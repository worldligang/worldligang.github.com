<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 源代码 | 刚刚在线]]></title>
  <link href="http://worldligang.github.io/blog/categories/yuan-dai-ma/atom.xml" rel="self"/>
  <link href="http://worldligang.github.io/"/>
  <updated>2015-01-06T13:53:46+08:00</updated>
  <id>http://worldligang.github.io/</id>
  <author>
    <name><![CDATA[刚刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pop]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/06/pop/"/>
    <updated>2015-01-06T13:52:18+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/06/pop</id>
    <content type="html"><![CDATA[<p> <a href="https://github.com/facebook/pop.git"target="_blank"title="源代码">源代码</a></p>

<p><img src="https://github.com/facebook/pop/blob/master/Images/pop.gif?raw=true" alt="pop" /></p>

<p>Pop is an extensible animation engine for iOS and OS X. In addition to basic static animations, it supports spring and decay dynamic animations, making it useful for building realistic, physics-based interactions. The API allows quick integration with existing Objective-C codebases and enables the animation of any property on any object. It&rsquo;s a mature and well-tested framework that drives all the animations and transitions in <a href="http://www.facebook.com/paper">Paper</a>.</p>

<p><a href="https://travis-ci.org/facebook/pop"><img src="https://travis-ci.org/facebook/pop.svg" alt="Build Status" /></a></p>

<h2>Installation</h2>

<p>Pop is available on <a href="http://cocoapods.org">CocoaPods</a>. Just add the following to your project Podfile:</p>

<pre><code class="ruby">pod 'pop', '~&gt; 1.0'
</code></pre>

<p>Alternatively, you can add the project to your workspace and adopt the provided configuration files or manually copy the files under the pop subdirectory into your project. If installing manually, ensure the C++ standard library is also linked by including <code>-lc++</code> to your project linker flags.</p>

<h2>Usage</h2>

<p>Pop adopts the Core Animation explicit animation programming model. Use by including the following import:</p>

<pre><code class="objective-c">#import &lt;POP/POP.h&gt;
</code></pre>

<h3>Start, Stop &amp; Update</h3>

<p>To start an animation, add it to the object you wish to animate:</p>

<pre><code class="objective-c">POPSpringAnimation *anim = [POPSpringAnimation animation];
...
[layer pop_addAnimation:anim forKey:@"myKey"];
</code></pre>

<p>To stop an animation, remove it from the object referencing the key specified on start:</p>

<pre><code class="objective-c">[layer pop_removeAnimationForKey:@"myKey"];
</code></pre>

<p>The key can also be used to query for the existence of an animation. Updating the toValue of a running animation can provide the most seamless way to change course:</p>

<pre><code class="objective-c">anim = [layer pop_animationForKey:@"myKey"];
if (anim) {
  /* update to value to new destination */
  anim.toValue = @(42.0);
} else {
  /* create and start a new animation */
  ....
}
</code></pre>

<p>While a layer was used in the above examples, the Pop interface is implemented as a category addition on NSObject. Any NSObject or subclass can be animated.</p>

<h3>Types</h3>

<p>There are four concrete animation types: spring, decay, basic and custom.</p>

<p>Spring animations can be used to give objects a delightful bounce. In this example, we use a spring animation to animate a layer&rsquo;s bounds from its current value to (0, 0, 400, 400):</p>

<pre><code class="objective-c">POPSpringAnimation *anim = [POPSpringAnimation animationWithPropertyNamed:kPOPLayerBounds];
anim.toValue = [NSValue valueWithCGRect:CGRectMake(0, 0, 400, 400)];
[layer pop_addAnimation:anim forKey:@"size"];
</code></pre>

<p>Decay animations can be used to gradually slow an object to a halt. In this example, we decay a layer&rsquo;s positionX from it&rsquo;s current value and velocity 1000pts per second:</p>

<pre><code class="objective-c">POPDecayAnimation *anim = [POPDecayAnimation animationWithPropertyNamed:kPOPLayerPositionX];
anim.velocity = @(1000.);
[layer pop_addAnimation:anim forKey:@"slide"];
</code></pre>

<p>Basic animations can be used to interpolate values over a specified time period. To use an ease-in ease-out animation to animate a view&rsquo;s alpha from 0.0 to 1.0 over the default duration:
<code>objective-c
POPBasicAnimation *anim = [POPBasicAnimation animationWithPropertyNamed:kPOPViewAlpha];
anim.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
anim.fromValue = @(0.0);
anim.toValue = @(1.0);
[view pop_addAnimation:anim forKey:@"fade"];
</code>
<code>POPCustomAnimation</code> makes creating custom animations and transitions easier by handling CADisplayLink and associated time-step management. See header for more details.</p>

<h3>Properties</h3>

<p>The property animated is specified by the <code>POPAnimatableProperty</code> class. In this example we create a spring animation and explicitly set the animatable property corresponding to <code>-[CALayer bounds]</code>:</p>

<pre><code class="objective-c">POPSpringAnimation *anim = [POPSpringAnimation animation];
anim.property = [POPAnimatableProperty propertyWithName:kPOPLayerBounds];
</code></pre>

<p>The framework provides many common layer and view animatable properties out of box. You can animate a custom property by creating a new instance of the class. In this example, we declare a custom volume property:</p>

<pre><code class="objective-c">prop = [POPAnimatableProperty propertyWithName:@"com.foo.radio.volume" initializer:^(POPMutableAnimatableProperty *prop) {
  // read value
  prop.readBlock = ^(id obj, CGFloat values[]) {
    values[0] = [obj volume];
  };
  // write value
  prop.writeBlock = ^(id obj, const CGFloat values[]) {
    [obj setVolume:values[0]];
  };
  // dynamics threshold
  prop.threshold = 0.01;
}];

anim.property = prop;
</code></pre>

<p>For a complete listing of provided animatable properties, as well more information on declaring custom properties see <code>POPAnimatableProperty.h</code>.</p>

<h3>Debugging</h3>

<p>Here are a few tips when debugging. Pop obeys the Simulator&rsquo;s Toggle Slow Animations setting. Try enabling it to slow down animations and more easily observe interactions.</p>

<p>Consider naming your animations. This will allow you to more easily identify them when referencing them, either via logging or in the debugger:</p>

<pre><code class="objective-c">anim.name = @"springOpen";
</code></pre>

<p>Each animation comes with an associated tracer. The tracer allows you to record all animation-related events, in a fast and efficient manner, allowing you to query and analyze them after animation completion. The below example starts the tracer and configures it to log all events on animation completion:</p>

<pre><code class="objective-c">POPAnimationTracer *tracer = anim.tracer;
tracer.shouldLogAndResetOnCompletion = YES;
[tracer start];
</code></pre>

<p>See <code>POPAnimationTracer.h</code> for more details.</p>

<h2>Testing</h2>

<p>Pop has extensive unit test coverage. To install test dependencies, navigate to the root pop directory and type:</p>

<pre><code class="sh">pod install
</code></pre>

<p>Assuming CocoaPods is installed, this will include the necessary OCMock dependency to the unit test targets.</p>

<h2>Resources</h2>

<p>A collection of links to external resources that may prove valuable:</p>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html">Apple – Core Animation Programming Guide</a></li>
<li><a href="http://tapity.com/tutorial-getting-started-with-pop/">Tapity Tutorial – Getting Started with Pop</a></li>
<li><a href="http://codeplease.io/playing-with-pop-ii/">Codeplease – Bridging the gesture to animation gap</a></li>
<li><a href="http://codeplease.io/playing-with-pop-iii/">Codeplease – Playing with Pop (iii)</a></li>
<li><a href="http://codeplease.io/playing-with-pop-v/">Codeplease – Adding a custom animatable property</a></li>
<li><a href="https://github.com/matthewcheok/POP-MCAnimate">POP-MCAnimate – Concise syntax for the Pop animation framework</a></li>
<li><a href="https://github.com/facebook/tweaks">Tweaks – Easily adjust parameters for iOS apps in development</a></li>
<li><a href="http://facebook.github.io/rebound/">Rebound – Spring Animations for Android</a></li>
</ul>


<h2>Contributing</h2>

<p>See the CONTRIBUTING file for how to help out.</p>

<h2>License</h2>

<p>Pop is released under a BSD License. See LICENSE file for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VVDocumenter-Xcode]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/06/vvdocumenter-xcode/"/>
    <updated>2015-01-06T13:44:56+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/06/vvdocumenter-xcode</id>
    <content type="html"><![CDATA[<p> <a href="https://github.com/worldligang/VVDocumenter-Xcode.git"target="_blank"title="源代码">源代码</a></p>

<h1>VVDocumenter-Xcode <a href="https://travis-ci.org/onevcat/VVDocumenter-Xcode"><img src="https://api.travis-ci.org/onevcat/VVDocumenter-Xcode.svg" alt="Build Status" /></a> <a href="https://flattr.com/submit/auto?user_id=onevcat&url=https%3A%2F%2Fgithub.com%2Fonevcat%2FVVDocumenter-Xcode" target="_blank"><img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0"></a></h1>

<hr />

<h2>What is this?</h2>

<p>Writing document is so important for developing, but it is really painful with Xcode. Think about how much time you are wasting in pressing &lsquo;*&rsquo; or &lsquo;/&rsquo;, and typing the parameters again and again. Now, you can find the method (or any code) you want to document to, and type in <code>///</code>, the document will be generated for you and all params and return will be extracted into a Javadoc style, which is compatible with <a href="https://github.com/tomaz/appledoc">appledoc</a>, <a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a> and <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/HeaderDoc/intro/intro.html">HeaderDoc</a>. You can just fill the inline placeholder tokens to finish your document.</p>

<p>Here is an image which can show what it exactly does.</p>

<p><img src="https://raw.github.com/onevcat/VVDocumenter-Xcode/master/ScreenShot.gif" alt="Screenshot" /></p>

<blockquote><p>By the way, it also supports <a href="https://developer.apple.com/swift/">Swift</a> now. Cheers!</p></blockquote>

<p><img src="https://raw.github.com/onevcat/VVDocumenter-Xcode/master/vvdocumenter-swift.gif" alt="Screenshot" /></p>

<h2>How to install and use?</h2>

<p><del>The best way of installing is by <a href="http://alcatraz.io">Alcatraz</a>. Install Alcatraz followed by the instruction, restart your Xcode and press <code>⇧⌘9</code>. You can find <code>VVDocumenter-Xcode</code> in the list and click the icon on left to install.</del> Some users reported the setting panel <a href="https://github.com/supermarin/Alcatraz/issues/196">can not be opened</a> if installing from Alcatraz, so I suggest to build the plugin yourself until this issue get fixed.</p>

<p>If you do not like the Alcatraz way, you can also clone the repo. Then build the <code>VVDocumenter-Xcode</code> target in the Xcode project and the plug-in will automatically be installed in <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code>. Relaunch Xcode and type in <code>///</code> above any code you want to write a document to.</p>

<p>If you want to use other text beside of <code>///</code> to trigger the document insertion, you can find a setting panel by clicking <code>VVDocument</code> in the Window menu of Xcode. You can also find some other useful options there, including setting using spaces instead of tab in the panel or changing the format of generated documentation.</p>

<h2>Xcode version?</h2>

<p>This plug-in is supported in Xcode 5 and 6 (current beta). From Xcode 5, Apple added a UUID-verification to all plugins to ensure the stability when Xcode gets updated. The value of <code>DVTPlugInCompatibilityUUIDs</code> in project plist should contains current UUID of Xcode version, or the plugin does not work. Once you update your Xcode, the plugin might be disabled and you should check the newest version and built it again.</p>

<p>The default deployment target is 10.8. If you want to use it in a earlier OS version, you should change OS X Deployment Target (in project info setting) to your system version.</p>

<h2>Swift Support</h2>

<p>Yes, this plugin supports documentation for Swift now. Check <a href="http://nshipster.com/swift-documentation/">this post</a> from @mattt to see how to write the documentation for swift. By using <code>VVDocumenter-Xcode</code>, you can just type <code>///</code> to make the magic happen.</p>

<h2>Limitations and Future</h2>

<p>The plugin is using simulation of keyboard event to insert the doc comments for you. So it is depending the keyboard shortcut of Xcode. These two kinds of operation are being used:</p>

<ul>
<li>Delete to Beginning of the Line (⌘⌫)</li>
<li>Paste (⌘V)</li>
</ul>


<p>If you have modified these two shortcuts in your Xcode, the newset version of the plugin would not work correctly. Instead, you can use a earlier version such as <a href="https://github.com/onevcat/VVDocumenter-Xcode/tree/03c4169ff79b618b9fd3db93dd96652a522ad3e0">this one(commit 03c4169ff7)</a>. Be causion you may suffer an <a href="https://github.com/onevcat/VVDocumenter-Xcode/issues/3">undo and redo issue </a>.</p>

<p><code>VVDocumenter-Xcode</code> is now using regular expression to extract things needed, which is not the best way to do such thing. A better approach could be using the AST, and I also have a plan to do it later if I have some more time :)</p>

<h2>License</h2>

<p>VVDocumenter is published under MIT License</p>

<pre><code>Copyright (c) 2014 Wei Wang (@onevcat)

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PushTalk]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/05/pushtalk/"/>
    <updated>2015-01-05T17:20:23+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/05/pushtalk</id>
    <content type="html"><![CDATA[<p> <a href="https://github.com/good-life/PushTalk"target="_blank"title="源代码">源代码</a></p>

<h1>推聊概述 PushTalk Overview</h1>

<p>推聊是一个基于极光推送的Android手机聊天系统。支持群聊与点对点聊天。当前包括Android客户端与Java服务器端。3分钟就可以整套系统跑起来。</p>

<p><img src="https://github.com/downloads/good-life/PushTalk/pushtalk_architecture_2.png" alt="" /></p>

<h3>项目官方网站</h3>

<p><a href="http://github.com/good-life/pushtalk">http://github.com/good-life/pushtalk</a></p>

<h3>功能与特点</h3>

<h5>功能列表</h5>

<ul>
<li>频道里群聊</li>
<li>与其他用户点对点聊天</li>
<li>聊天支持文字、表情、URL等</li>
<li>注册用户（不需要密码）</li>
<li>创建频道、加入频道</li>
<li>我的最近聊天、我的频道</li>
<li>聊天记录缓存（在服务器端）</li>
<li>客户端选择聊天服务器、添加聊天服务器</li>
</ul>


<h5>特点</h5>

<ul>
<li>简单到极致的 http 聊天服务器：一个 jar 包跑起来</li>
<li>轻量级客户端：聊天界面使用 Webview 的方式</li>
<li>下行消息推送基于 <a href="http://jpush.cn/">JPush</a>（一个免费的第三方 Android Push 服务），上行消息采用 http 请求的方式实现</li>
</ul>


<h3>聊天服务器</h3>

<p>推聊的服务器端使用 Java 语言编写，基于最简单实用的开源框架。</p>

<ul>
<li>http 服务器使用 <a href="http://www.eclipse.org/jetty/">Jetty</a>：轻量级的 Java Servlet 容器。</li>
<li>数据库使用 <a href="http://http://www.h2database.com/">H2</a>： 轻量级的 Java 内存/文件数据库。</li>
<li>页面模板使用 <a href="http://freemarker.sourceforge.net/">Freemarker</a>：轻量级的 Java 页面模板引擎。</li>
<li>打包时集成为一个整体 jar 包（包含所有的依赖包）</li>
</ul>


<p>要运行推聊服务器端，请在 github项目界面相关版本下载 dist/ 目录下的 pushtalk-server jar 文件。</p>

<p>要打包 server-java，请在项目该目录下执行 mvn package 命令。</p>

<p>使用如下命令运行服务器：</p>

<pre><code>java -Dfile.encoding=UTF-8 -jar pushtalk-server-with-dependencies.jar
</code></pre>

<p><code>注：实际的文件名后边一般会加上一个版本号。</code></p>

<p>上述命令运行后：</p>

<ul>
<li>一个 http server 启动了，监听端口为 10010</li>
<li>浏览器里输入 <a href="http://localhost:10010">http://localhost:10010</a> 则可以访问到界面</li>
<li>要正确地运行服务器，需要通过客户端访问</li>
</ul>


<p>推聊服务器默认使用 <code>10010</code> 端口。可以在上述命令后指定使用另外的端口。比如以下命令指定使用 <code>10011</code> 来启动推聊聊天服务器：</p>

<pre><code>java -Dfile.encoding=UTF-8 -jar pushtalk-server-with-dependencies.jar 10011
</code></pre>

<h3>Android 客户端</h3>

<p><img src="https://github.com/downloads/good-life/PushTalk/pushtalk_client.png" alt="" /></p>

<p>客户端运行，请在 github 文件下载页 <a href="https://github.com/good-life/PushTalk/downloads/">https://github.com/good-life/PushTalk/downloads/</a> 下载 Android apk 安装到 Android 手机即可。</p>

<p>你也可以自己编译 <code>/client-android</code> 项目之后安装到手机。</p>

<p>客户端默认内置官方聊天服务器地址。也可以直接在客户端添加新的服务器，选择新的聊天服务器。</p>

<p>如果你有服务器资源，可以长期运行，欢迎你架设推聊聊天服务器，请添加到以下的页面。经过测试没有问题，会被选择预置到客户端代码里：</p>

<p><a href="https://github.com/good-life/PushTalk/wiki/PushTalk-Third-Party-Servers">https://github.com/good-life/PushTalk/wiki/PushTalk-Third-Party-Servers</a></p>

<h3>开发者支持</h3>

<p>欢迎广大开发者加入本开源项目，大家一起来不断地丰满、完善推聊。</p>

<p>本人是因为兴趣业余时间来开发推聊，考虑到 IM 占用的时间太多，所以请谅解，不提供任何 IM 的沟通方式。希望大家以如下的方式交流：</p>

<ul>
<li>Email:  <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#x70;&#117;&#x73;&#104;&#116;&#x61;&#x6c;&#x6b;&#x2e;&#111;&#114;&#103;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#112;&#x75;&#x73;&#x68;&#x74;&#97;&#x6c;&#107;&#46;&#111;&#114;&#x67;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></li>
<li>项目Wiki: <a href="https://github.com/good-life/PushTalk/wiki">https://github.com/good-life/PushTalk/wiki</a></li>
<li>项目Bug: <a href="https://github.com/good-life/PushTalk/issues">https://github.com/good-life/PushTalk/issues</a></li>
<li>PushTalk频道：<code>pushtalk</code>, <code>报告bug</code>, <code>新功能讨论</code> 等</li>
</ul>


<p>代码提交方式：请先提交Bug修复，把 diff 以文件方式发邮件给我。合作多次后，我可以把你加入到本项目贡献者里来，你就可以随时自由地提交代码了。</p>

<p>你也可以自由地 fork 本项目，自己去发布新的版本。</p>

<p>推聊使用的开源协议：<a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PNChart]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/05/pnchart/"/>
    <updated>2015-01-05T17:16:07+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/05/pnchart</id>
    <content type="html"><![CDATA[<p> <a href="https://github.com/kevinzhow/PNChart"target="_blank"title="源代码">源代码</a></p>

<h1>PNChart</h1>

<p><a href="https://travis-ci.org/kevinzhow/PNChart"><img src="https://travis-ci.org/kevinzhow/PNChart.png?branch=master" alt="Build Status" /></a></p>

<p>You can also find swift version at here <a href="https://github.com/kevinzhow/PNChart-Swift">https://github.com/kevinzhow/PNChart-Swift</a></p>

<p>A simple and beautiful chart lib with <strong>animation</strong> used in <a href="https://itunes.apple.com/us/app/piner/id637706410">Piner</a> and <a href="https://itunes.apple.com/us/app/coinsman/id772163893">CoinsMan</a> for iOS</p>

<p><a href="https://dl.dropboxusercontent.com/u/1599662/pnchart.gif"><img src="https://dl.dropboxusercontent.com/u/1599662/pnchart.gif" alt="" /></a></p>

<h2>Requirements</h2>

<p>PNChart works on iOS 6.0 and later version and is compatible with ARC projects. It depends on the following Apple frameworks, which should already be included with most Xcode templates:</p>

<ul>
<li>Foundation.framework</li>
<li>UIKit.framework</li>
<li>CoreGraphics.framework</li>
<li>QuartzCore.framework</li>
</ul>


<p>You will need LLVM 3.0 or later in order to build PNChart.</p>

<h2>Usage</h2>

<h3>Cocoapods</h3>

<p><a href="http://cocoapods.org">CocoaPods</a> is the recommended way to add PNChart to your project.</p>

<ol>
<li>Add a pod entry for PNChart to your Podfile <code>pod 'PNChart', '~&gt; 0.6.0'</code></li>
<li>Install the pod(s) by running <code>pod install</code>.</li>
<li>Include PNChart wherever you need it with <code>#import "PNChart.h"</code>.</li>
</ol>


<h3>Copy the PNChart folder to your project</h3>

<p><a href="https://dl.dropboxusercontent.com/u/1599662/line.png"><img src="https://dl.dropboxusercontent.com/u/1599662/line.png" alt="" /></a></p>

<pre><code class="objective-c">#import "PNChart.h"

//For Line Chart
PNLineChart * lineChart = [[PNLineChart alloc] initWithFrame:CGRectMake(0, 135.0, SCREEN_WIDTH, 200.0)];
[lineChart setXLabels:@[@"SEP 1",@"SEP 2",@"SEP 3",@"SEP 4",@"SEP 5"]];

// Line Chart No.1
NSArray * data01Array = @[@60.1, @160.1, @126.4, @262.2, @186.2];
PNLineChartData *data01 = [PNLineChartData new];
data01.color = PNFreshGreen;
data01.itemCount = lineChart.xLabels.count;
data01.getData = ^(NSUInteger index) {
    CGFloat yValue = [data01Array[index] floatValue];
    return [PNLineChartDataItem dataItemWithY:yValue];
};
// Line Chart No.2
NSArray * data02Array = @[@20.1, @180.1, @26.4, @202.2, @126.2];
PNLineChartData *data02 = [PNLineChartData new];
data02.color = PNTwitterColor;
data02.itemCount = lineChart.xLabels.count;
data02.getData = ^(NSUInteger index) {
    CGFloat yValue = [data02Array[index] floatValue];
    return [PNLineChartDataItem dataItemWithY:yValue];
};

lineChart.chartData = @[data01, data02];
[lineChart strokeChart];
</code></pre>

<p><a href="https://dl.dropboxusercontent.com/u/1599662/bar.png"><img src="https://dl.dropboxusercontent.com/u/1599662/bar.png" alt="" /></a></p>

<pre><code class="objective-c">#import "PNChart.h"

//For BarC hart
PNBarChart * barChart = [[PNBarChart alloc] initWithFrame:CGRectMake(0, 135.0, SCREEN_WIDTH, 200.0)];
[barChart setXLabels:@[@"SEP 1",@"SEP 2",@"SEP 3",@"SEP 4",@"SEP 5"]];
[barChart setYValues:@[@1,  @10, @2, @6, @3]];
[barChart strokeChart];
</code></pre>

<p><a href="https://dl.dropboxusercontent.com/u/1599662/circle.png"><img src="https://dl.dropboxusercontent.com/u/1599662/circle.png" alt="" /></a></p>

<pre><code class="objective-c">#import "PNChart.h"

//For Circle Chart

PNCircleChart * circleChart = [[PNCircleChart alloc] initWithFrame:CGRectMake(0, 80.0, SCREEN_WIDTH, 100.0) andTotal:[NSNumber numberWithInt:100] andCurrent:[NSNumber numberWithInt:60] andClockwise:NO];
circleChart.backgroundColor = [UIColor clearColor];
[circleChart setStrokeColor:PNGreen];
[circleChart strokeChart];
</code></pre>

<p><a href="https://dl.dropboxusercontent.com/u/1599662/pie.png"><img src="https://dl.dropboxusercontent.com/u/1599662/pie.png" alt="" /></a></p>

<pre><code class="objective-c"># import "PNChart.h"
//For Pie Chart
NSArray *items = @[[PNPieChartDataItem dataItemWithValue:10 color:PNRed],
                           [PNPieChartDataItem dataItemWithValue:20 color:PNBlue description:@"WWDC"],
                           [PNPieChartDataItem dataItemWithValue:40 color:PNGreen description:@"GOOL I/O"],
                           ];



PNPieChart *pieChart = [[PNPieChart alloc] initWithFrame:CGRectMake(40.0, 155.0, 240.0, 240.0) items:items];
pieChart.descriptionTextColor = [UIColor whiteColor];
pieChart.descriptionTextFont  = [UIFont fontWithName:@"Avenir-Medium" size:14.0];
[pieChart strokeChart];
</code></pre>

<p><a href="https://dl.dropboxusercontent.com/u/1599662/scatter.png"><img src="https://dl.dropboxusercontent.com/u/1599662/scatter.png" alt="" /></a></p>

<pre><code class="objective-c"># import "PNChart.h"
//For Scatter Chart

PNScatterChart *scatterChart = [[PNScatterChart alloc] initWithFrame:CGRectMake(SCREEN_WIDTH /6.0 - 30, 135, 280, 200)];
[scatterChart setAxisXWithMinimumValue:20 andMaxValue:100 toTicks:6];
[scatterChart setAxisYWithMinimumValue:30 andMaxValue:50 toTicks:5];

NSArray * data01Array = [self randomSetOfObjects];
PNScatterChartData *data01 = [PNScatterChartData new];
data01.strokeColor = PNGreen;
data01.fillColor = PNFreshGreen;
data01.size = 2;
data01.itemCount = [[data01Array objectAtIndex:0] count];
data01.inflexionPointStyle = PNScatterChartPointStyleCircle;
__block NSMutableArray *XAr1 = [NSMutableArray arrayWithArray:[data01Array objectAtIndex:0]];
__block NSMutableArray *YAr1 = [NSMutableArray arrayWithArray:[data01Array objectAtIndex:1]];
data01.getData = ^(NSUInteger index) {
    CGFloat xValue = [[XAr1 objectAtIndex:index] floatValue];
    CGFloat yValue = [[YAr1 objectAtIndex:index] floatValue];
    return [PNScatterChartDataItem dataItemWithX:xValue AndWithY:yValue];
};

[scatterChart setup];
self.scatterChart.chartData = @[data01];
/***
this is for drawing line to compare
CGPoint start = CGPointMake(20, 35);
CGPoint end = CGPointMake(80, 45);
[scatterChart drawLineFromPoint:start ToPoint:end WithLineWith:2 AndWithColor:PNBlack];
***/
scatterChart.delegate = self;
</code></pre>

<h4>Update Value</h4>

<p>Now it&rsquo;s easy to update value in real time</p>

<pre><code class="objective-c">if ([self.title isEqualToString:@"Line Chart"]) {

    // Line Chart #1
    NSArray * data01Array = @[@(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300)];
    PNLineChartData *data01 = [PNLineChartData new];
    data01.color = PNFreshGreen;
    data01.itemCount = data01Array.count;
    data01.inflexionPointStyle = PNLineChartPointStyleTriangle;
    data01.getData = ^(NSUInteger index) {
        CGFloat yValue = [data01Array[index] floatValue];
        return [PNLineChartDataItem dataItemWithY:yValue];
    };

    // Line Chart #2
    NSArray * data02Array = @[@(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300), @(arc4random() % 300)];
    PNLineChartData *data02 = [PNLineChartData new];
    data02.color = PNTwitterColor;
    data02.itemCount = data02Array.count;
    data02.inflexionPointStyle = PNLineChartPointStyleSquare;
    data02.getData = ^(NSUInteger index) {
        CGFloat yValue = [data02Array[index] floatValue];
        return [PNLineChartDataItem dataItemWithY:yValue];
    };

    [self.lineChart setXLabels:@[@"DEC 1",@"DEC 2",@"DEC 3",@"DEC 4",@"DEC 5",@"DEC 6",@"DEC 7"]];
    [self.lineChart updateChartData:@[data01, data02]];

}
else if ([self.title isEqualToString:@"Bar Chart"])
{
    [self.barChart setXLabels:@[@"Jan 1",@"Jan 2",@"Jan 3",@"Jan 4",@"Jan 5",@"Jan 6",@"Jan 7"]];
    [self.barChart updateChartData:@[@(arc4random() % 30),@(arc4random() % 30),@(arc4random() % 30),@(arc4random() % 30),@(arc4random() % 30),@(arc4random() % 30),@(arc4random() % 30)]];
}
else if ([self.title isEqualToString:@"Circle Chart"])
{
    [self.circleChart updateChartByCurrent:@(arc4random() % 100)];
}
</code></pre>

<h4>Callback</h4>

<pre><code class="objective-c">#import "PNChart.h"

//For LineChart

lineChart.delegate = self;
</code></pre>

<pre><code class="objective-c">
//For DelegateMethod


-(void)userClickedOnLineKeyPoint:(CGPoint)point lineIndex:(NSInteger)lineIndex pointIndex:(NSInteger)pointIndex{
    NSLog(@"Click Key on line %f, %f line index is %d and point index is %d",point.x, point.y,(int)lineIndex, (int)pointIndex);
}

-(void)userClickedOnLinePoint:(CGPoint)point lineIndex:(NSInteger)lineIndex{
    NSLog(@"Click on line %f, %f, line index is %d",point.x, point.y, (int)lineIndex);
}
</code></pre>

<h2>License</h2>

<p>This code is distributed under the terms and conditions of the <a href="LICENSE">MIT license</a>.</p>

<h2>SpecialThanks</h2>

<p><a href="http://twitter.com/lexrus">@lexrus</a>  CocoaPods Spec</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding-iOS]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/05/coding-ios/"/>
    <updated>2015-01-05T13:09:26+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/05/coding-ios</id>
    <content type="html"><![CDATA[<p> <a href="https://coding.net/u/coding"target="_blank"title="源代码">源代码</a></p>

<h3>Coding_iOS客户端项目介绍</h3>

<p><em>编译环境：Xcode-Version 6.1 (6A1052d)</em></p>

<h4>下面介绍一下文件的大概目录先：</h4>

<pre><code>.
├── Coding_iOS
│   ├── Models：数据类
│   ├── Views：视图类
│   │   ├── CCell：所有的CollectionViewCell都在这里
│   │   ├── Cell：所有的TableViewCell都在这里
│   │   └── XXX：ListView（项目、动态、任务、讨论、文档、代码）和InputView（用于聊天和评论的输入框）
│   ├── Controllers：控制器，对应app中的各个页面
│   │   ├── Login：登录页面
│   │   ├── RootControllers：登录后的根页面
│   │   ├── MeSetting：设置信息页面
│   │   └── XXX：其它页面
│   ├── Images：app中用到的所有的图片都在这里
│   ├── Resources：资源文件
│   ├── Util：一些常用控件和Category、Manager之类
│   │   ├── Common
│   │   ├── Manager
│   │   ├── OC_Category
│   │   └── ObjcRuntime
│   └── Vendor：用到的一些第三方类库，一般都有改动
│       ├── AFNetworking
│       ├── AGEmojiKeyboard
│       ├── ASProgressPopUpView
│       ├── ActionSheetPicker
│       ├── FontAwesome+iOS
│       ├── MJPhotoBrowser
│       ├── MLEmojiLabel
│       ├── NSDate+Helper
│       ├── NSStringEmojize
│       ├── PPiAwesomeButton
│       ├── QBImagePickerController
│       ├── RDVTabBarController
│       ├── SMPageControl
│       ├── SVPullToRefresh
│       ├── SWTableViewCell
│       ├── UMENG
│       ├── UMessage_Sdk_1.1.0
│       ├── XGPush
│       ├── XTSegmentControl
│       └── iCarousel
└── Pods：项目使用了[CocoaPods](http://code4app.com/article/cocoapods-install-usage)这个类库管理工具
</code></pre>

<h4>再说下项目的启动流程：</h4>

<p>在AppDelegate的启动方法中，先设置了一下Appearance的样式，然后根据用户的登录状态选择是去加载登录页面LoginViewController，还是登录后的RootTabViewController页面。</p>

<p>RootTabViewController继承自第三方库<a href="https://github.com/robbdimitrov/RDVTabBarController">RDVTabBarController</a>。在RootTabViewController里面依次加载了Project_RootViewController、MyTask_RootViewController、Tweet_RootViewController、Message_RootViewController、Me_RootViewController五个RootViewController，后续的页面跳转都是基于这几个RootViewController引过去的。</p>

<h4>项目里面还有些需要注意的点</h4>

<ul>
<li><p>Coding_NetAPIManager：基本上app的所有请求接口都放在了这里。网络请求使用的是<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>库，与服务器之间的数据交互格式用的都是json（与<a href="https://coding.net">Coding</a>使用的api一致）。</p></li>
<li><p>关于推送：刚开始是用的<a href="http://www.umeng.com/">友盟推送</a>，后来又改用了<a href="http://xg.qq.com/">腾讯信鸽</a>，因为要兼顾旧版本app的推送，所以服务器是同时保留了两套推送。但是为了确保新版本的app不同时收到双份相同的推送消息，所以当前代码里还存留了友盟的sdk，用于解除推送token与友盟Alias的绑定。</p></li>
<li><p>关于ProjectViewController：这个就是进入到某个项目之后的页面，这里包含了项目的动态、任务、讨论、文档、代码、成员各类信息，而且每类信息里面还可能会有新的分类（如‘任务’里面还分有各个成员的任务）；这个页面相当的臃肿，我对它们做了拆分，都放在视图类Views目录下面。 首先是把数据列表独立成了对应的XXXListView（如ProjectTaskListView）；然后如果需要标签切换的话，会再新建一个XXXsView（如：ProjectTasksView），在这个视图中，上面会放一个切换栏<a href="https://github.com/xushao1990/XTNews">XTSegmentControl</a>显示各个标签，下面放一个<a href="https://github.com/nicklockwood/iCarousel">iCarousel</a>可以滑动显示各个标签的内容；最后这些视图都会存储在ProjectViewController的projectContentDict变量里面，根据顶部导航栏选择的类别，去显示或隐藏对应的视图。</p></li>
<li><p>关于UIMessageInputView：这个是私信聊天的输入框。因为这个输入框好多地方都有用到（冒泡、任务、讨论的评论还有私信），所以这个输入框就写成了一个相对独立的控件，并且直接显示在了keyWindow里面而不是某个视图里。这里的表情键盘用的是<a href="https://github.com/ayushgoel/AGEmojiKeyboard">AGEmojiKeyboard</a>改写了一下。</p></li>
<li><p>关于Emoji：这个，<a href="https://coding.net">Coding</a>站点的emoji都是用的图片，而且服务器是不接受大部分emoji字符的，所以刚开始的时候app一直不能处理emoji表情；又因为没有emoji图片名和emoji code码的对应关系表，所以拖了很久都没能做好转换。直到在github上面找到了<a href="https://github.com/diy/NSStringEmojize">NSStringEmojize</a>这个项目；试了一下，虽然也不能全部解析，但是大部分表情都能正确显示了，不能更感谢。</p></li>
<li><p>关于如何正确显示冒泡的内容：api返回的数据里面，冒泡内容都是html格式，需要做一下预处理；其实私信、讨论里面的内容也是html。解析html的类名是HtmlMediaItem，它是先用<a href="https://github.com/topfunky/hpple">hpple</a>对html进行了解析，然后把对应的media元素和对应的位置做一个存储，显示的时候便可以根据需要来显示了。</p></li>
</ul>


<h4>最后说下<a href="http://code4app.com/article/cocoapods-install-usage">CocoaPods</a>里面用到的第三方类库</h4>

<ul>
<li><a href="https://github.com/rs/SDWebImage">SDWebImage</a>：图片加载</li>
<li><a href="https://github.com/TTTAttributedLabel/TTTAttributedLabel">TTTAttributedLabel</a>：富文本的label，可点击链接</li>
<li><a href="https://github.com/wezm/RegexKitLite">RegexKitLite</a>：正则表达式</li>
<li><a href="https://github.com/topfunky/hpple">hpple</a>：html解析</li>
<li><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a>：hud提示框</li>
<li><a href="https://github.com/Sephiroth87/ODRefreshControl">ODRefreshControl</a>：下拉刷新</li>
<li><a href="https://github.com/michaeltyson/TPKeyboardAvoiding">TPKeyboardAvoiding</a>：有文字输入时，能根据键盘是否弹出来调整自身显示内容的位置</li>
<li><a href="https://github.com/jaydee3/JDStatusBarNotification">JDStatusBarNotification</a>：状态栏提示框</li>
<li><a href="https://github.com/zwaldowski/BlocksKit">BlocksKit</a>：block工具包。将很多需要用delegate实现的方法整合成了block的形式</li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>：基于响应式编程思想的oc实践（是个好东西呢）</li>
</ul>


<h4>License</h4>

<p>Coding is available under the MIT license. See the LICENSE file for more info.</p>
]]></content>
  </entry>
  
</feed>
