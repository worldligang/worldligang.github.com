<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 推荐 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/tui-jian/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-07-31T18:43:53+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[快快快！27个提升效率的iOS开源库推荐]]></title>
    <link href="http://www.superqq.com/blog/2015/07/22/kuai-kuai-kuai-!27ge-ti-sheng-xiao-lu-de-ioskai-yuan-ku-tui-jian/"/>
    <updated>2015-07-22T13:11:49+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/22/kuai-kuai-kuai-!27ge-ti-sheng-xiao-lu-de-ioskai-yuan-ku-tui-jian</id>
    <content type="html"><![CDATA[<blockquote><p>CSDN移动将持续为您优选移动开发的精华内容，共同探讨移动开发的技术热点话题，涵盖移动应用、开发工具、移动游戏及引擎、智能硬件、物联网等方方面面。如果您想投稿、参与内容翻译工作，或寻求近匠报道，请发送邮件至tangxy#csdn.net（请把#改成@）。</p></blockquote>

<p>我热爱开源，更喜爱那些花费宝贵的业余时间来创造奇迹的开发者们，感谢他们将自己辛苦劳动的成果无偿分享给大家。开源作者和贡献者们，你们太了不起了，感谢你们所付出的一切。</p>

<p>鉴于我是收集不全会死星人，这里我根据个人喜好选取了一些iOS的开源库。这些项目的顺序完全随机，每个都棒到爆。绝大多数支持CocoaPods，所以将它们添加到你的Xcode项目中只是小事一桩。</p>

<p>在本文末尾你可以找到一个长文慎入版本——一个只包含题目与项目链接的简单列表。如果你觉得这篇文章有用的话，请把它分享给其他做iOS开发的小伙伴们，好酒也怕巷子深。</p>

<h3>1. <a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" title=“DZNEmptyDataSet”>DZNEmptyDataSet</a></h3>

<p>DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。默认情况下，如果你的table view为空，屏幕就为空，这样一来用户体验并不理想。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55adfe02a4a2f_middle.jpg" alt="1" /></p>

<p>使用这个库，你只需遵守一些协议，iOS就会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理，不用再一一费神。</p>

<h3>2. <a href="https://github.com/jivesoftware/PDTSimpleCalendar" target="_blank" title=“PDTSimpleCalendar”>PDTSimpleCalendar</a></h3>

<p>你的应用需要一个简单美观且正常运行的日历组件吗？现在有了——PDTSimpleCalendar也许可以算是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55adff269e028_middle.jpg" alt="2" /></p>

<h3>3. <a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" title=“MagicalRecord”>MagicalRecord</a></h3>

<p>他们都说：Core Data简洁易用。他们又说：很棒很好用噢。哈？真的吗，苹果？添加到各个项目中的大量样板数据完全不符合简洁而易用的标准。更别提添加、移除和更新那一大堆的entities、保存context、按不同环境创建不同的Core Data堆栈等等。当然，我很喜欢Core Data，但是苹果真的可以把它更好地简化一下——使用MagicalRecord方式。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0130e5bb0_middle.jpg" alt="3" /></p>

<p>MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。如果你曾经使用过active record模式（比如Ruby on Rails），你就知道了。倾情推荐，在应用中使用Core Data的童鞋们可一定要试试。</p>

<h3>4. <a href="https://github.com/ViccAlexander/Chameleon" target="_blank" title=“Chameleon”>Chameleon</a></h3>

<p>如果你已经看到这里了，我猜你更有可能是个程序猿，而不是设计狮。这里有个东东很适合你。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae02035ca71_middle.jpg" alt="4" /></p>

<p>Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。如果你想要应用美观的话，一定要把这个库加到项目里。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0212f22c6_middle.jpg" alt="4-1" /></p>

<h3>5. <a href="https://github.com/Alamofire/Alamofire" target="_blank" title=“Alamofire”>Alamofire</a></h3>

<p>Alamofire是一个简洁的网络库，用Swift语言编写。你是否曾经使用过AFNetworking呢？Alamofire是它的小弟。更年轻更时尚，当然（AFNetworking是用Objective-C编写的）。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae024c07d47_middle.jpg" alt="5" /></p>

<p>如果你需要进行网络的相关工作，诸如下载、上传与获取JSONs等等的话，Alamofire正是你所需要的。GitHub上8000人次推荐，一定不会错。</p>

<h3>6. <a href="https://github.com/raulriera/TextFieldEffects" target="_blank" title=“TextFieldEffects”>TextFieldEffects</a></h3>

<p>你不觉得标准的UITextField有些枯燥么？我也这样想——来认识一下TextFieldEffects吧！废话不多说，只要看几个例子：</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae048484702.jpg" alt="6" /></p>

<p>是啊，都是些简单的dropin控制器。你甚至可以在storyboard中使用IBDesignables。</p>

<p>不幸地是：这个库不支持CocoaPods（如果你来自未来，而这一情况什么时候会改变的话，一定要在Twitter上告诉我），但是它支持Carthage。你只管从GitHub上下载项目，把它放入你的workspace就行了。</p>

<h3>7. <a href="https://github.com/BradLarson/GPUImage" target="_blank" title=“GPUImage”>GPUImage</a></h3>

<p>你曾经写过照相机应用吗？如果没有的话，很快你一定会遇到这个库的。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae04fe94fc8.jpg" alt="7" /></p>

<p>GPUImage为我们提供了一个GPU加速的照相机效果（同时支持照片与视频），而且处理速度飞快。在App Store中，使用这个库的应用数以百计。我有一个应用也用到了GPUImage。 它在GitHub上获得了8869个star，而且还在增长。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae053f548d5_middle.jpg" alt="7-1" /></p>

<h3>8. <a href="https://github.com/nicklockwood/iRate" target="_blank" title=“iRate”>iRate</a></h3>

<p>想要在App Store中获得更多评论的最佳方式是什么？想要回答这个问题，我缺乏切实数据，但如果必须猜一下的话，我会建议问问用户。也许这样做有点老套——大多开发者现在都有创建定制的应用内置alert。</p>

<p>但是如果你没有时间，或者不想从头实现的话，最好用一下iRata。这个就是iRata——一个小型库——你可以把它放入项目中，把问卷调查什么的都忘记吧，iRate会在恰当的时候为你解决这个问题。</p>

<h3>9. <a href="https://github.com/nihalahmed/GameCenterManager" target="_blank" title=“GameCenterManager”>GameCenterManager</a></h3>

<p>无论你喜不喜欢单例模式，管理一个GameCenter都比我们已知的其他相反模式要好很多。（你的游戏只有一个GameCenter，对吗？）</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae05bd3f99e_middle.jpg" alt="9" /></p>

<p>说实话，在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae05c9cba37_middle.jpg" alt="9-1" /></p>

<p>我在我一个游戏中用到了这个，体验很好。</p>

<h3>10. <a href="https://github.com/pkluz/PKRevealController" target="_blank" title=“PKRevealController 2”>PKRevealController 2</a></h3>

<p>这个要注意，真的很棒！是我最喜爱的iOS控件之一。PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷）。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae067bd3b6b.jpg" alt="2" /></p>

<p>我试过一些可以提供这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。</p>

<h3>11. <a href="https://github.com/slackhq/SlackTextViewController" target="_blank" title=“SlackTextViewController”>SlackTextViewController</a></h3>

<p>你曾经用过Slack iOS应用吗？如果你在较大的软件公司工作，也许会用过。对那些没用过的人呢？—?Slack令人激动。用到Slack的应用也是这样，尤其是用作极佳、定制的文本输入控制时。这时你有了一个现成可用在应用中的代码。</p>

<p>自适应文本区域？试一下。</p>

<p>手势识别、自动填充、多媒体合并？试一下。</p>

<p>快速drop-in解决方案？试一下。</p>

<p>其他还想要什么？</p>

<h3>12. <a href="https://github.com/romaonthego/RETableViewManager" target="_blank" title=“RETableViewManager”>RETableViewManager</a></h3>

<p>RETableViewManager可以帮助你进行动态创建与管理table views。它给我们提供了预定义cells（bool类型、文本、日期等等——请看下面的截图），但是你还可以创建自定义views，并与默认视图一同使用。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0702088ab_middle.jpg" alt="12" /></p>

<p>左侧截图显得非常古板！在storyboard中没有这个库的时候，你能做的就是这些了，但是有时候代码比可视化编辑器要好。</p>

<h3>13. <a href="https://github.com/nickoneill/PermissionScope" target="_blank" title=“PermissionScope”>PermissionScope</a></h3>

<p>用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—>更多活跃用户->更高的留存率->数据更好->下载率更高。墙裂推荐pod。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0733b6110_middle.jpg" alt="13" /></p>

<h3>14. <a href="https://github.com/TransitApp/SVProgressHUD" target="_blank" title=“SVProgressHUD”>SVProgressHUD</a></h3>

<p>这张图片在正常加载，无需等待太久或者刷新页面。这正是SVProgressHUD在你的应用中的表现。如果你需要定制化的等待提示器，这个就是了（也许是最好的）。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae077d15432.jpg" alt="14" /></p>

<h3>15. <a href="https://github.com/PrideChung/FontAwesomeKit" target="_blank" title=“FontAwesomeKit”>FontAwesomeKit</a></h3>

<p>Font Awesome很棒，有了它你可以很容易地给项目加字体，使用方式繁多。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae07a34b492_middle.jpg" alt="15" /></p>

<h3>16. <a href="https://github.com/SnapKit/SnapKit" target="_blank" title=“SnapKit”>SnapKit</a></h3>

<p>喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae07ebf3c2c_middle.jpg" alt="16" /></p>

<h3>17. <a href="https://github.com/MortimerGoro/MGSwipeTableCell" target="_blank" title=“MGSwipeTableCell”>MGSwipeTableCell</a></h3>

<p>这是另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0953304a9.jpg" alt="17" /></p>

<p>这只是其中三个动画类型，还有更多变化，请查看readme。</p>

<h3>18. <a href="https://github.com/Quick/Quick" target="_blank" title=“Quick”>Quick</a></h3>

<p>用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0a6012068_middle.jpg" alt="18" /></p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0a767198e_middle.jpg" alt="181" /></p>

<h3>19. <a href="https://github.com/saturngod/IAPHelper" target="_blank" title=“IAPHelper”>IAPHelper</a></h3>

<p>应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。</p>

<h3>20. <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" title=“ReactiveCocoa”>ReactiveCocoa</a></h3>

<p>好吧，这是个小怪物。</p>

<p>ReactiveCocoa并不像列表中其他库一样，它不是小型的drop-in项目。ReactiveCocoa给我们带来了一个迥异的编程风格与结构，它是基于信号与数据流的。首先你需要忘掉已知的一切，才能理解它的工作方式。很有难度，但是价值不斐。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0acf1f0dc_middle.jpg" alt="20" /></p>

<p>在这里教ReactiveCocoa有点不合适，但是如果你感兴趣的话，我会提供一些好源：</p>

<ul>
<li><a href="http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/" target="_blank" title=“Getting Started with ReactiveCocoa”>Getting Started with ReactiveCocoa</a></li>
<li><a href="http://nshipster.com/reactivecocoa/" target="_blank" title=“Mattt Thompson：Reactive​Cocoa”>Mattt Thompson：Reactive​Cocoa</a></li>
<li><a href="http://www.raywenderlich.com/62699/reactivecocoa-tutorial-pt1" target="_blank" title=“ReactiveCocoa Tutorial – The Definitive Introduction: Part 1/2”>ReactiveCocoa Tutorial – The Definitive Introduction: Part &frac12;</a></li>
</ul>


<p>注意：对我们iOS开发社区的朋友来说，这会是一个稍微有些技术含量的活儿。</p>

<h3>21. <a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" title=“SwiftyJSON”>SwiftyJSON</a></h3>

<p>使Swift的JSON解析变得简单。</p>

<h3>22. <a href="https://github.com/MengTo/Spring" target="_blank" title=“Spring”>Spring</a></h3>

<p>使动画在简单性、可链接性与声明性方面有所提高。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0dfe58b6c_middle.jpg" alt="22" /></p>

<h3>23. <a href="https://github.com/ArtSabintsev/FontBlaster" target="_blank" title=“FontBlaster”>FontBlaster</a></h3>

<p>载入定制字体时更简单。</p>

<h3>24. <a href="https://github.com/JanC/TAPromotee" target="_blank" title=“TAPromotee”>TAPromotee</a></h3>

<p>交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0e81d6464_middle.jpg" alt="24" /></p>

<h3>25. <a href="https://github.com/contentful-labs/Concorde" target="_blank" title=“Concorde”>Concorde</a></h3>

<p>你在应用中载入了一堆jpeg吗？有了Concorde，你可以用更好的方式来解决，这是一个很大的进步。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae11e47390e.jpg" alt="25" /></p>

<h3>26. <a href="https://github.com/kishikawakatsumi/KeychainAccess" target="_blank" title=“KeychainAccess”>KeychainAccess</a></h3>

<p>管理Keychain接入的小助手。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0f198a4dc_middle.jpg" alt="26" /></p>

<h3>27. <a href="https://github.com/danielgindi/ios-charts" target="_blank" title=“iOS-charts”>iOS-charts</a></h3>

<p>最后一个，但绝不是最不重要的——iOS图表库！非常有用而且美观，这里我无需赘言。向下看，你就知道用它可以做什么了。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0f6715aec_middle.jpg" alt="27" /></p>

<p>没错，一切都变成了drop-in组件了（也许是“code-in组件）。</p>

<p><img src="http://img.ptcms.csdn.net/article/201507/21/55ae0f7ec6743_middle.jpg" alt="271" /></p>

<p>不幸的是，它还不支持CocoaPods，所以你得手动把它拽到你的Xcode workspace里面去。</p>

<p>超长慎入列表：</p>

<ol>
<li><a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" title=“DZNEmptyDataSet”>DZNEmptyDataSet</a>（UI，空表格视图解算器）</li>
<li><a href="https://github.com/jivesoftware/PDTSimpleCalendar" target="_blank" title=“PDTSimpleCalendar”>PDTSimpleCalendar</a>（UI，drop-in日历组件）</li>
<li><a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" title=“MagicalRecord”>MagicalRecord</a>（实施活跃记录模式的Core Data助手）</li>
<li><a href="https://github.com/ViccAlexander/Chameleon" target="_blank" title=“Chameleon”>Chameleon</a>（UI，色彩框架）</li>
<li><a href="https://github.com/Alamofire/Alamofire" target="_blank" title=“Alamofire”>Alamofire</a>（Swift 网络）</li>
<li><a href="https://github.com/raulriera/TextFieldEffects" target="_blank" title=“TextFieldEffects”>TextFieldEffects</a> （UI，自定义外观的文本区域）</li>
<li><a href="https://github.com/BradLarson/GPUImage" target="_blank" title=“GPUImage”>GPUImage</a>（快速图片处理）</li>
<li><a href="https://github.com/nicklockwood/iRate" target="_blank" title=“iRate”>iRate</a>（获取用户评价）</li>
<li><a href="https://github.com/nihalahmed/GameCenterManager" target="_blank" title=“GameCenterManager”>GameCenterManager</a>（快速管理游戏中心）</li>
<li><a href="https://github.com/pkluz/PKRevealController" target="_blank" title=“PKRevealController 2”>PKRevealController 2</a>（UI，滑动侧边栏菜单）</li>
<li><a href="https://github.com/slackhq/SlackTextViewController" target="_blank" title=“SlackTextViewController”>SlackTextViewController</a>（UI，高度可定制的自定义文本区域）</li>
<li><a href="https://github.com/romaonthego/RETableViewManager" target="_blank" title=“RETableViewManager”>RETableViewManager</a>（自动以代码创建表格视图）</li>
<li><a href="https://github.com/nickoneill/PermissionScope" target="_blank" title=“PermissionScope”>PermissionScope</a>（UI，预询问用户系统权限的友好体验）</li>
<li><a href="https://github.com/TransitApp/SVProgressHUD" target="_blank" title=“SVProgressHUD”>SVProgressHUD</a> （UI，自定义等待进度条）</li>
<li><a href="https://github.com/PrideChung/FontAwesomeKit" target="_blank" title=“FontAwesomeKit”>FontAwesomeKit</a> （快速添加Awesome字体）</li>
<li><a href="https://github.com/SnapKit/SnapKit" target="_blank" title=“SnapKit”>SnapKit</a>（在代码中快速自动布局）</li>
<li><a href="https://github.com/MortimerGoro/MGSwipeTableCell" target="_blank" title=“MGSwipeTableCell”>MGSwipeTableCell</a> （UI，可滑动的表格视图cell）</li>
<li><a href="https://github.com/Quick/Quick" target="_blank" title=“Quick”>Quick</a>（Swift单元测试框架）</li>
<li><a href="https://github.com/saturngod/IAPHelper" target="_blank" title=“IAPHelper”>IAPHelper</a>（应用内购买助手封装）</li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" title=“ReactiveCocoa”>ReactiveCocoa</a>（FRP框架）</li>
<li><a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" title=“SwiftyJSON”>SwiftyJSON</a>（Swift JSON库）</li>
<li><a href="https://github.com/MengTo/Spring" target="_blank" title=“Spring”>Spring</a>（动画框架）</li>
<li><a href="https://github.com/ArtSabintsev/FontBlaster" target="_blank" title=“FontBlaster”>FontBlaster</a>（在应用中快速载入个性化字体）</li>
<li><a href="https://github.com/JanC/TAPromotee" target="_blank" title=“TAPromotee”>TAPromotee</a>（使用drop-in视图交叉推广应用）</li>
<li><a href="https://github.com/contentful-labs/Concorde" target="_blank" title=“Concorde”>Concorde</a>（下载解码渐进式jpeg）</li>
<li><a href="https://github.com/kishikawakatsumi/KeychainAccess" target="_blank" title=“KeychainAccess”>KeychainAccess</a>（简便管理keychain）</li>
<li><a href="https://github.com/danielgindi/ios-charts" target="_blank" title=“iOS-charts”>iOS-charts</a>（美观的图表库）</li>
</ol>


<p>文章来源：<a href="https://medium.com/app-coder-io/27-ios-open-source-libraries-to-skyrocket-your-development-301b67d3124c" target="_blank" title=“Medium”>Medium</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禅与Objective-C编程艺术(译)]]></title>
    <link href="http://www.superqq.com/blog/2015/07/18/ios/"/>
    <updated>2015-07-18T23:15:26+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/18/ios</id>
    <content type="html"><![CDATA[<p>禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）</p>

<p>原文 <a href="https://github.com/objc-zen/objc-zen-book">https://github.com/objc-zen/objc-zen-book</a></p>

<p><img src="https://github.com/objc-zen/objc-zen-book/raw/master/images/zen-logo-thumb.png" alt="" /></p>

<h1>前言</h1>

<p>我们在 2013 年 11 月份开始写这本书，最初的目标是提供一份如何编写干净漂亮的 Objective-C 代码的指南：现在虽然有很多指南，但是它们都是有一些问题的。我们不想介绍一些死板的规定，我们想提供一个在开发者们之间写更一致的代码的途径。随时间的推移，这本书开始转向介绍如何设计和构建优秀的代码。</p>

<p>这本书的观点是代码不仅是可以编译的，同时应该是 “有效” 的。好的代码有一些特性：简明，自我解释，优秀的组织，良好的文档，良好的命名，优秀的设计以及可以被久经考验。
本书的一个理念是是代码的清晰性优先于性能，同时阐述为什么应该这么做。
虽然所有的代码都是 Objective-C 写的，但是一些主题是通用的，并且独立于编程语言。</p>

<h2>Swift</h2>

<p>在 2014 年 6 月 6 日，苹果发布了面向 iOS 和 Mac 开发的新语言： Swift。
这个新语言与 Objective-C 截然不同。所以，我们改变了写这本书的计划。我们决定发布这本书当前的状态，而不是继续书写我们原来计划写下去的主题。
Objective-C 没有消失，但是现在用一个慢慢失去关注的语言来继续写这本书并不是一个明智的选择。</p>

<h2>贡献给社区</h2>

<p>我们将这本书免费发布并且贡献给社区，因为我们希望提供给读者一些有价值的内容。如果你能学到至少一条最佳实践，我们的目的就达到了。</p>

<p>我们已经非常用心地打磨了这些文字，但是仍然可能有一些拼写或者其他错误。我们非常希望读者给我们一个反馈或者建议，以来改善本书。所以如果有什么问题的话，请联系我们。我们非常欢迎各种 pull-request。</p>

<h2>作者</h2>

<p><strong>Luca Bernardi</strong></p>

<ul>
<li><a href="http://lucabernardi.com">http://lucabernardi.com</a></li>
<li>@luka_bernardi</li>
<li><a href="http://github.com/lukabernardi">http://github.com/lukabernardi</a></li>
</ul>


<p><strong>Alberto De Bortoli</strong></p>

<ul>
<li><a href="http://albertodebortoli.com">http://albertodebortoli.com</a></li>
<li>@albertodebo</li>
<li><a href="http://github.com/albertodebortoli">http://github.com/albertodebortoli</a></li>
</ul>


<h2>关于中文翻译</h2>

<p>译者</p>

<p><strong>林翔宇</strong>
- <a href="http://linxiangyu.org">http://linxiangyu.org</a>
- <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#108;&#105;&#110;&#x78;&#x69;&#x61;&#x6e;&#x67;&#x79;&#x75;&#64;&#110;&#117;&#x70;&#x74;&#x65;&#114;&#46;&#x6f;&#x72;&#103;">&#x6c;&#x69;&#110;&#x78;&#x69;&#x61;&#110;&#x67;&#x79;&#117;&#x40;&#x6e;&#117;&#112;&#116;&#101;&#x72;&#x2e;&#x6f;&#x72;&#x67;</a>
- <a href="http://github.com/oa414">http://github.com/oa414</a></p>

<p><strong>庞博</strong>
- <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#98;&#111;&#x70;&#x61;&#x6e;&#x67;&#64;&#115;&#111;&#x68;&#x75;&#x2d;&#x69;&#110;&#99;&#46;&#x63;&#111;&#109;">&#98;&#x6f;&#x70;&#x61;&#x6e;&#x67;&#64;&#115;&#x6f;&#x68;&#x75;&#45;&#x69;&#x6e;&#99;&#46;&#99;&#x6f;&#109;</a>
- <a href="https://github.com/heistings">https://github.com/heistings</a></p>

<p>翻译已得到原作者许可，并且会在更加完善后申请合并到原文仓库。</p>

<p><strong>部分译文表达可能存在不妥之处，非常欢迎各种修订建议和校队。 请直接 fork 本仓库，在 README.md 文件中修改，并申请 pull request 到 <a href="https://github.com/oa414/objc-zen-book-cn/">https://github.com/oa414/objc-zen-book-cn/</a>。</strong></p>

<h1>条件语句</h1>

<p>为了避免错误，条件语句体应该总是被大括号包围，即使可以不这样做（比如，条件语句体只有一行内容）。可能的错误是：多加了第二行，并且误以为它是 if 语句体里面的。此外，更危险的是，如果把 if 语句体里的一行注释掉了，之后的一行代码会成为 if 语句里的代码。</p>

<p><strong>推荐:</strong></p>

<pre><code>if (!error) {
    return success;
}
</code></pre>

<p><strong>不推荐:</strong></p>

<pre><code>if (!error)
    return success;
</code></pre>

<p>或者</p>

<pre><code>if (!error) return success;
</code></pre>

<p>在 2014年2月 苹果的 SSL/TLS 实现里面发现了知名的 <a href="https://gotofail.com/">goto fail</a> 错误。</p>

<p>代码在这里：</p>

<pre><code>    static OSStatus
    SSLVerifySignedServerKeyExchange(SSLContext *ctx, bool isRsa, SSLBuffer signedParams,
                                     uint8_t *signature, UInt16 signatureLen)
    {
      OSStatus        err;
      ...

      if ((err = SSLHashSHA1.update(&amp;hashCtx, &amp;serverRandom)) != 0)
        goto fail;
      if ((err = SSLHashSHA1.update(&amp;hashCtx, &amp;signedParams)) != 0)
        goto fail;
        goto fail;
      if ((err = SSLHashSHA1.final(&amp;hashCtx, &amp;hashOut)) != 0)
        goto fail;
      ...

    fail:
      SSLFreeBuffer(&amp;signedHashes);
      SSLFreeBuffer(&amp;hashCtx);
      return err;
    }
</code></pre>

<p>显而易见，这里有没有括号包围的2行连续的 <code>goto fail;</code> 。我们当然不希望写出上面的代码导致错误。</p>

<p>此外，在其他条件语句里面也应该按照这种风格统一，这样更便于检查。</p>

<h2>尤达表达式</h2>

<p>不要使用尤达表达式。尤达表达式是指，拿一个常量去和变量比较而不是拿变量去和常量比较。它就像是在表达 “蓝色是不是天空的颜色” 或者 “高个是不是这个男人的属性” 而不是  “天空是不是蓝的” 或者 “这个男人是不是高个子的”</p>

<p><img src="./images/yoda.png" alt="Yoda" /></p>

<p>（译者注：名字起源于星球大战中尤达大师的讲话方式，总是用倒装的语序）</p>

<p><strong>推荐:</strong></p>

<pre><code>if ([myValue isEqual:@42]) { ...
</code></pre>

<p><strong>不推荐:</strong></p>

<pre><code>if ([@42 isEqual:myValue]) { ...
</code></pre>

<h2>nil 和 BOOL 检查</h2>

<p>类似于 Yoda 表达式，nil 检查的方式也是存在争议的。一些 notous 库像这样检查对象是否为 nil：</p>

<pre><code>if (nil == myValue) { ...
</code></pre>

<p>或许有人会提出这是错的，因为在 nil 作为一个常量的情况下，这样做就像 Yoda 表达式了。 但是一些程序员这么做的原因是为了避免调试的困难，看下面的代码：</p>

<pre><code>if (myValue == nil) { ...
</code></pre>

<p>如果程序员敲错成这样：</p>

<pre><code>if (myValue = nil) { ...
</code></pre>

<p>这是合法的语句，但是即使你是一个丰富经验的程序员，即使盯着眼睛瞧上好多遍也很难调试出错误。但是如果把 nil 放在左边，因为它不能被赋值，所以就不会发生这样的错误。 如果程序员这样做，他/她就可以轻松检查出可能的原因，比一遍遍检查敲下的代码要好很多。</p>

<p>为了避免这些奇怪的问题，可以用感叹号来作为运算符。因为 nil 是 解释到 NO，所以没必要在条件语句里面把它和其他值比较。同时，不要直接把它和 <code>YES</code> 比较，因为 <code>YES</code> 的定义是 1， 而 <code>BOOL</code> 是 8 bit的，实际上是 char 类型。</p>

<p><strong>推荐:</strong></p>

<pre><code>if (someObject) { ...
if (![someObject boolValue]) { ...
if (!someObject) { ...
</code></pre>

<p><strong>不推荐:</strong></p>

<pre><code>if (someObject == YES) { ... // Wrong
if (myRawValue == YES) { ... // Never do this.
if ([someObject boolValue] == NO) { ...
</code></pre>

<p>同时这样也能提高一致性，以及提升可读性。</p>

<p>原文 <a href="https://github.com/objc-zen/objc-zen-book">https://github.com/objc-zen/objc-zen-book</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS提交后申请加急审核]]></title>
    <link href="http://www.superqq.com/blog/2015/07/13/iosti-jiao-hou-shen-qing-jia-ji-shen-he/"/>
    <updated>2015-07-13T23:14:17+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/13/iosti-jiao-hou-shen-qing-jia-ji-shen-he</id>
    <content type="html"><![CDATA[<p>之前只是听过加急审核这回事，一直也没有用到过。昨天用了下果然很给力。昨天晚上将近8点（北京时间）提交应用，今天早上上班看了下已经通过了审核，而且可以在AppStore里下载到。</p>

<p>话说加急的原因比较悲催，年前一直在做老版本的更新（一直在改别人代码的bug），临过年一周多的时候说不改了，做新版本的。心里终于舒服些，开始
自己写新版本。2月7号上班到2月18号一直在做新版本。就在经理天天催，老板经常问进度的时候，实施那边说xxx那边20号要验收，验收不过要打官司
了……</p>

<p>然后开始悲催的继续找到以前别人的代码改bug，十几个，虽说难度不是很大，但是很不爽~</p>

<p>18号加班改完，19号给测试人员测试。然后我继续开始新版本。结果测试那一天了没消息，LZ很2的去找到测试去问测试完了吗？然后测试MM笑着和
我说，呀，忘了和你说了，没问题了。
括弧当时时间为下午6点左右，LZ当天正常下班时间是6点十几分。然后开始回来今天提交。话说提交速度那叫一个慢！没办法，启用米国VPN，速度快了很
多，看着进度条一点一点往前走，慢慢走，慢慢走……n久后走到头。然后上面文字提示说已经提交完毕，但是进度条又回到了初始位置是怎么回事
？！愤怒了！去iTunes connect里刷新状态提示等待提交
 = =！</p>

<p>好吧，重新提交 &ndash;> 然后卡那不动了 ~~ 这米国vpn也不好用啊还是库克那服务器的原因啊。。。。</p>

<p>唉，取消提交然后用Application Loader提交，打包、选择、上传，速度很慢但是一切还算是顺利。在忽上忽下、“动荡不定”的网速中终于提交成功。iTunes connect里刷新状态为等待审核。OK，终于提交了。</p>

<p>竟然扯了这么多~</p>

<p>下面进入正题。提交完成后进入加急审核页面。</p>

<p>链接：<a href="https://developer.apple.com/appstore/contact/appreviewteam/index.html">https://developer.apple.com/appstore/contact/appreviewteam/index.html</a></p>

<p>在i would like to里选择加急审核</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/jiaji1.png" alt="1" /></p>

<p>然后填写相关信息。</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/jiaji2.png" alt="2" /></p>

<p>App Information里填写应用名称，ID填写9位数字ID。</p>

<p>继续</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/jiaji3.png" alt="3" /></p>

<p>选择原因，然后填写理由。</p>

<p>这里要注意的是理由一般是用户安全问题或者崩溃问题成功率会高一些（LZ写的是崩溃，不要说我是赶时间，苹果会不同意，以前版本确实有崩溃问题，只不过不多~ 这里我不多说了，你们懂的）</p>

<p>还有一点要注意的是，如果是崩溃问题，你最好写上操作步骤，让审核员去重现这个问题。</p>

<p>PS. 如果遇到非常时期或者人品不好遇到心情不好的审核员，请自行另行处理~</p>

<p>就到这里了，继续搬砖去了~</p>

<p>2014.5.10补充：</p>

<p>之前听别人说一年只有两次加急的机会。一直没有尝试过，所以也没法证明是否是真的。</p>

<p>昨天晚上（周五晚）由于销售要在周一的时候开始做大量推广，所以今年的第三次加急审核又开始了……</p>

<p>今天早上起床后还在担心应该是没有通过，但是AppStore查看了下，已经通过了审核。</p>

<p>说明之前一年只有两次加急审核的机会是不正确的。至于一年到底有多少次加急审核的机会，官方没有看到相关的说明，也不能确定次数是多少。</p>

<p>如果有看到相关文档或说明的童鞋，希望能和大家分享下~</p>

<p>2014.5.14补充：</p>

<p>第四次加急，从提交到通过大概过了两天的时间。</p>

<p>2015.6.2补充：</p>

<p>加急审核说明是可以写中文的。这里感谢 @第七只蚂蚁 提供宝贵的信息。</p>

<p>原文来自：<a href="http://blog.csdn.net/showhilllee/article/details/19541493">iOS提交后申请加急审核</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 中的 NSTimer]]></title>
    <link href="http://www.superqq.com/blog/2015/07/12/ios-zhong-de-nstimer/"/>
    <updated>2015-07-12T21:02:51+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/12/ios-zhong-de-nstimer</id>
    <content type="html"><![CDATA[<blockquote><p>之前的一篇文章：<a href="http://www.superqq.com/blog/2015/07/10/ioskai-fa-zhi-nstimershi-yong-chu-tan/">iOS开发之NSTimer使用初探</a> 讲的是比较基础的知识。今天给大家分享一篇来自Why的“iOS 中的 NSTimer”，讲的就比较深入一些。</p></blockquote>

<p>前阵子在整理公司项目的时候，发现老代码在使用 NSTimer 时出现了内存泄露。然后整理了一些 NSTimer 的相关内容。比较简单，各位见笑啦。</p>

<h2>NSTimer</h2>

<h3>fire</h3>

<p>我们先用 NSTimer 来做个简单的计时器，每隔5秒钟在控制台输出 Fire 。比较想当然的做法是这样的：</p>

<pre><code>@interface DetailViewController ()
@property (nonatomic, weak) NSTimer *timer;
@end

@implementation DetailViewController
- (IBAction)fireButtonPressed:(id)sender {
    _timer = [NSTimer scheduledTimerWithTimeInterval:3.0f
                                              target:self
                                            selector:@selector(timerFire:)
                                            userInfo:nil
                                             repeats:YES];
    [_timer fire];
}

-(void)timerFire:(id)userinfo {
    NSLog(@"Fire");
}
@end
</code></pre>

<p>运行之后确实在控制台每隔3秒钟输出一次 Fire ，然而当我们从这个界面跳转到其他界面的时候却发现：控制台还在源源不断的输出着 Fire 。看来 Timer 并没有停止。</p>

<h3>invalidate</h3>

<p>既然没有停止，那我们在 DemoViewController 的 dealloc 里加上 invalidate 的方法：</p>

<pre><code>-(void)dealloc {
    [_timer invalidate];
    NSLog(@"%@ dealloc", NSStringFromClass([self class]));
}
</code></pre>

<p>再次运行，还是没有停止。原因是 Timer 添加到 Runloop 的时候，会被 Runloop 强引用：</p>

<pre><code>Note in particular that run loops maintain strong references to their timers, so you don’t have to maintain your own strong reference to a timer after you have added it to a run loop.
</code></pre>

<p>然后 Timer 又会有一个对 Target 的强引用（也就是 self ）：</p>

<pre><code>Target is the object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to target until it (the timer) is invalidated.
</code></pre>

<p>也就是说 NSTimer 强引用了 self ，导致 self 一直不能被释放掉，所以也就走不到 self 的 dealloc 里。</p>

<p>既然如此，那我们可以再加个 invalidate 按钮：</p>

<pre><code>- (IBAction)invalidateButtonPressed:(id)sender {
    [_timer invalidate];
}
</code></pre>

<p>嗯这样就可以了。（在 SOF 上有人说该在 invalidate 之后执行 _timer = nil ，未能理解为什么，如果你知道原因可以告诉我：）</p>

<p>在 invalidate 方法的文档里还有这这样一段话：</p>

<pre><code>You must send this message from the thread on which the timer was installed. If you send this message from another thread, the input source associated with the timer may not be removed from its run loop, which could prevent the thread from exiting properly.
</code></pre>

<p>NSTimer 在哪个线程创建就要在哪个线程停止，否则会导致资源不能被正确的释放。看起来各种坑还不少。</p>

<h3>dealloc</h3>

<p>那么问题来了：如果我就是想让这个 NSTimer 一直输出，直到 DemoViewController 销毁了才停止，我该如何让它停止呢？</p>

<ol>
<li>NSTimer 被 Runloop 强引用了，如果要释放就要调用 invalidate 方法。</li>
<li>但是我想在 DemoViewController 的 dealloc 里调用 invalidate 方法，但是 self 被 NSTimer 强引用了。</li>
<li>所以我还是要释放 NSTimer 先，然而不调用 invalidate 方法就不能释放它。</li>
<li>然而你不进入到 dealloc 方法里我又不能调用 invalidate 方法。</li>
<li>嗯…</li>
</ol>


<p><img src="http://ww4.sinaimg.cn/large/61d238c7gw1ettf9re22uj20fu08owf3.jpg" alt="1" /></p>

<h2>HWWeakTimer</h2>

<h3>weakSelf</h3>

<p>问题的关键就在于 self 被 NSTimer 强引用了，如果我们能打破这个强引用问题自然而然就解决了。所以一个很简单的想法就是：weakSelf：</p>

<pre><code>__weak typeof(self) weakSelf = self;
_timer = [NSTimer scheduledTimerWithTimeInterval:3.0f
                                          target:weakSelf
                                        selector:@selector(timerFire:)
                                        userInfo:nil
                                         repeats:YES];
</code></pre>

<p>然而这并没有什么卵用，这里的 <strong>weak 和 </strong>strong 唯一的区别就是：如果在这两行代码执行的期间 self 被释放了， NSTimer 的 target 会变成 nil 。</p>

<h3>target</h3>

<p>既然没办法通过 __weak 把 self 抽离出来，我们可以造个假的 target 给 NSTimer 。这个假的 target 类似于一个中间的代理人，它做的唯一的工作就是挺身而出接下了 NSTimer 的强引用。类声明如下：</p>

<pre><code>@interface HWWeakTimerTarget : NSObject
@property (nonatomic, weak) id target;
@property (nonatomic, assign) SEL selector;
@property (nonatomic, weak) NSTimer* timer;
@end

@implementation HWWeakTimerTarget
- (void) fire:(NSTimer *)timer {
    if(self.target) {
        [self.target performSelector:self.selector withObject:timer.userInfo];
    } else {
        [self.timer invalidate];
    }
}
@end
</code></pre>

<p>然后我们再封装个假的 scheduledTimerWithTimeInterval 方法，但是在调用的时候已经偷梁换柱了：</p>

<pre><code>+ (NSTimer *) scheduledTimerWithTimeInterval:(NSTimeInterval)interval
                                      target:(id)aTarget
                                    selector:(SEL)aSelector
                                    userInfo:(id)userInfo
                                     repeats:(BOOL)repeats {
    HWWeakTimerTarget* timerTarget = [[HWWeakTimerTarget alloc] init];
    timerTarget.target = aTarget;
    timerTarget.selector = aSelector;
    timerTarget.timer = [NSTimer scheduledTimerWithTimeInterval:interval
                                                         target:timerTarget
                                                       selector:@selector(fire:)
                                                       userInfo:userInfo
                                                        repeats:repeats];
    return timerTarget.timer;
}
</code></pre>

<p>再次运行，问题解决。</p>

<h3>block</h3>

<p>如果能用 block 来调用 NSTimer 那岂不是更好了。我们可以这样来实现：</p>

<pre><code>+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)interval
                                      block:(HWTimerHandler)block
                                   userInfo:(id)userInfo
                                    repeats:(BOOL)repeats {
    return [self scheduledTimerWithTimeInterval:interval
                                         target:self
                                       selector:@selector(_timerBlockInvoke:)
                                       userInfo:@[[block copy], userInfo]
                                        repeats:repeats];
}

+ (void)_timerBlockInvoke:(NSArray*)userInfo {
    HWTimerHandler block = userInfo[0];
    id info = userInfo[1];
    // or `!block ?: block();` @sunnyxx
    if (block) {
        block(info);
    }
}
</code></pre>

<p>这样我们就可以直接在 block 里写相关逻辑了：</p>

<pre><code>- (IBAction)fireButtonPressed:(id)sender {
    _timer = [HWWeakTimer scheduledTimerWithTimeInterval:3.0f block:^(id userInfo) {
        NSLog(@"%@", userInfo);
    } userInfo:@"Fire" repeats:YES];
    [_timer fire];
}
</code></pre>

<p>嗯就是这样。</p>

<h3>More</h3>

<p>把上面的的代码简单的封装到了 <a href="https://github.com/ChatGame/HWWeakTimer">HWWeakTimer</a> 中，欢迎试用。</p>

<p>参考文献:</p>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/">NStimer</a></li>
<li><a href="http://stackoverflow.com/questions/15170518/how-to-stop-invalidate-nstimer">How to stop/invalidate NStimer</a></li>
<li><a href="http://stackoverflow.com/questions/16821736/weak-reference-to-nstimer-target-to-prevent-retain-cycle">Weak Reference to NSTimer Target To Prevent Retain Cycle</a></li>
<li><a href="http://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown">performSelector may cause a leak because its selector is unknown</a></li>
</ul>


<p>原文链接： <a href="http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/?sukey=fc78a68049a14bb264852ae4e610e664d74bb6bf7a3e31be7aa2ac6c3e5a83ca566fa1c683d37c01e8569e560d873907" target="_blank" title=" iOS 中的 NSTimer "> iOS 中的 NSTimer </a></p>
]]></content>
  </entry>
  
</feed>
