<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 推荐 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/tui-jian/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2016-05-06T23:51:10+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于NSRunLoop和NSTimer的深入理解]]></title>
    <link href="http://www.superqq.com/blog/2016/05/05/ios-nsrunllop-nstimer/"/>
    <updated>2016-05-05T22:02:14+08:00</updated>
    <id>http://www.superqq.com/blog/2016/05/05/ios-nsrunllop-nstimer</id>
    <content type="html"><![CDATA[<h2>一、什么是NSRunLoop</h2>

<p>NSRunLoop是消息机制的处理模式</p>

<p>NSRunLoop的作用在于有事情做的时候使的当前NSRunLoop的线程工作，没有事情做让当前NSRunLoop的线程休眠</p>

<p>NSTimer默认添加到当前NSRunLoop中，也可以手动制定添加到自己新建的NSRunLoop</p>

<p>NSRunLoop就是一直在循环检测，从线程start到线程end，检测inputsource(如点击，双击等操作)同步事件，检测timesource同步事件，检测到输入源会执行处理函数，首先会产生通知，corefunction向线程添加runloop observers来监听事件，意在监听事件发生时来做处理。</p>

<p>在单线程的app中，不需要注意Run Loop，但不代表没有。程序启动时，系统已经在主线程中加入了Run Loop。它保证了我们的主线程在运行起来后，就处于一种“等待”的状态（而不像一些命令行程序一样运行一次就结束了），这个时候如果有接收到的事件（Timer的定时到了或是其他线程的消息），就会执行任务，否则就处于休眠状态。</p>

<p>runloopmode是一个集合，包括监听：事件源，定时器，以及需通知的runloop observers</p>

<p>模式包括：</p>

<ul>
<li>default模式：几乎包括所有输入源(除NSConnection) NSDefaultRunLoopMode模式</li>
<li>mode模式：处理modal panels</li>
<li>connection模式：处理NSConnection事件，属于系统内部，用户基本不用</li>
<li>event tracking模式：如组件拖动输入源 UITrackingRunLoopModes 不处理定时事件</li>
<li>common modes模式：NSRunLoopCommonModes 这是一组可配置的通用模式。将input sources与该模式关联则同时也将input sources与该组中的其它模式进行了关联。</li>
</ul>


<!--more-->


<p>每次运行一个run loop，你指定（显式或隐式）run loop的运行模式。当相应的模式传递给run loop时，只有与该模式对应的input sources才被监控并允许run loop对事件进行处理（与此类似，也只有与该模式对应的observers才会被通知）</p>

<p>例：</p>

<p>1).在timer与table同时执行情况，当拖动table时，runloop进入UITrackingRunLoopModes模式下，不会处理定时事件，此时timer不能处理，所以此时将timer加入到NSRunLoopCommonModes模式(addTimer forMode)</p>

<p>2).在scroll一个页面时来松开，此时connection不会收到消息，由于scroll时runloop为UITrackingRunLoopModes模式，不接收输入源，此时要修改connection的mode</p>

<pre><code>[scheduleInRunLoop:[NSRunLoop currentRunLoop]forMode:NSRunLoopCommonModes];
</code></pre>

<p>关于-(BOOL)runMode:(NSString <em>)mode beforeDate:(NSDate </em>)date;方法</p>

<p>指定runloop模式来处理输入源，首个输入源或date结束退出。</p>

<p>暂停当前处理的流程，转而处理其他输入源，当date设置为[NSDate distantFuture]-(将来，基本不会到达的时间)，所以除非处理其他输入源结束，否则永不退出处理暂停的当前处理的流程。</p>

<pre><code>while(A){

 [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];

}
</code></pre>

<p>当前A为YES时，当前runloop会一直接收处理其他输入源，当前流程不继续处理，出为A为NO，当前流程继续</p>

<p>performSelector关于内存管理的执行原理是这样的执行 [self performSelector:@selector(method1:) withObject:self.tableLayer afterDelay:3]; 的时候，系统会将tableLayer的引用计数加1，执行完这个方法时，还会将tableLayer的引用计数减1，由于延迟这时tableLayer的引用计数没有减少到0，也就导致了切换场景dealloc方法没有被调用，出现了内存泄露。</p>

<p>利用如下函数：</p>

<pre><code>[NSObject cancelPreviousPerformRequestsWithTarget:self]
</code></pre>

<p>当然你也可以一个一个得这样用：</p>

<pre><code>[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(method1:) object:nil]
</code></pre>

<p>加上了这个以后，顺利地执行了dealloc方法</p>

<p>在touchBegan里面</p>

<pre><code>[self performSelector:@selector(longPressMethod:) withObject:nil afterDelay:longPressTime]
</code></pre>

<p>然后在end 或cancel里做判断，如果时间不够长按的时间调用：</p>

<pre><code>[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(longPressMethod:) object:nil]
</code></pre>

<p>取消began里的方法</p>

<h2>二、Run Loop和线程的关系：</h2>

<ol>
<li><p>主线程的run loop默认是启动的，用于接收各种输入sources</p></li>
<li><p>对第二线程来说，run loop默认是没有启动的，如果你需要更多的线程交互则可以手动配置和启动，如果线程执行一个长时间已确定的任务则不需要。</p></li>
</ol>


<h2>三、Run Loop什么情况下使用：</h2>

<ul>
<li>使用ports 或 input sources 和其他线程通信   // 不了解</li>
<li><p>在线程中使用timers                                             // 如果不启动run</p>

<p>  loop，timer的事件是不会响应的</p></li>
<li><p>在Cocoa 应用中使用performSelector…方法   // 应该是performSelector…这种方法会启动一个线程并启动run loop吧</p></li>
<li>让线程执行一个周期性的任务</li>
</ul>


<p>注：timer的创建和释放必须在同一线程中。</p>

<p>[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];  此方法会retain timer对象的引用计数。</p>

<h2>四、关于NSTimer</h2>

<h3>1、NSTimer会是准时触发事件吗</h3>

<p>答案是否定的，而且有时候你会发现实际的触发时间跟你想象的差距还比较大。NSTimer不是一个实时系统，因此不管是一次性的还是周期性的timer的实际触发事件的时间可能都会跟我们预想的会有出入。差距的大小跟当前我们程序的执行情况有关系，比如可能程序是多线程的，而你的timer只是添加在某一个线程的runloop的某一种指定的runloopmode中，由于多线程通常都是分时执行的，而且每次执行的mode也可能随着实际情况发生变化。</p>

<p>假设你添加了一个timer指定2秒后触发某一个事件，但是签好那个时候当前线程在执行一个连续运算(例如大数据块的处理等)，这个时候timer就会延迟到该连续运算执行完以后才会执行。重复性的timer遇到这种情况，如果延迟超过了一个周期，则会和后面的触发进行合并，即在一个周期内只会触发一次。但是不管该timer的触发时间延迟的有多离谱，他后面的timer的触发时间总是倍数于第一次添加timer的间隙。</p>

<p>原文如下：</p>

<pre><code>A repeating timer reschedules itself based on the scheduled firing time, not the actual firing time. For example, if a timer is scheduled to fire at a particular time and every 5 seconds after that, the scheduled firing time will always fall on the original 5 second time intervals, even if the actual firing time gets delayed. If the firing time is delayed so far that it passes one or more of the scheduled firing times, the timer is fired only once for that time period; the timer is then rescheduled, after firing, for the next scheduled firing time in the future.
</code></pre>

<p>下面请看一个简单的例子:</p>

<pre><code>- (void)applicationDidBecomeActive:(UIApplication *)application 
{ 
    SvTestObject *testObject2 = [[SvTestObject alloc] init]; 
    [NSTimer scheduledTimerWithTimeInterval:1 target:testObject2 selector:@selector(timerAction:) userInfo:nil repeats:YES]; 
    [testObject2 release]; 

    NSLog(@"Simulate busy"); 
    [self performSelector:@selector(simulateBusy) withObject:nil afterDelay:3]; 
} 

// 模拟当前线程正好繁忙的情况 
- (void)simulateBusy 
{ 
    NSLog(@"start simulate busy!"); 
    NSUInteger caculateCount = 0x0FFFFFFF; 
    CGFloat uselessValue = 0; 
    for (NSUInteger i = 0; i &lt; caculateCount; ++i) { 
        uselessValue = i / 0.3333; 
    } 
    NSLog(@"finish simulate busy!"); 
}
</code></pre>

<p>例子中首先开启了一个timer，这个timer每隔1秒调用一次target的timerAction方法，紧接着我们在3秒后调用了一个模拟线程繁忙的方法(其实就是一个大的循环)。运行程序后输出结果如下:</p>

<p><img src="http://www.xcoder.cn/wp-content/uploads/2013/11/20131128011608171-300x78.jpeg" alt="1" /></p>

<p>观察结果我们可以发现，当线程空闲的时候timer的消息触发还是比较准确的，但是在36分12秒开始线程一直忙着做大量运算，知道36分14秒该运算才结束，这个时候timer才触发消息，这个线程繁忙的过程超过了一个周期，但是timer并没有连着触发两次消息，而只是触发了一次。等线程忙完以后后面的消息触发的时间仍然都是整数倍与开始我们指定的时间，这也从侧面证明，timer并不会因为触发延迟而导致后面的触发时间发生延迟。</p>

<p>综上: timer不是一种实时的机制，会存在延迟，而且延迟的程度跟当前线程的执行情况有关。</p>

<h3>2、NSTimer为什么要添加到RunLoop中才会有作用</h3>

<p>前面的例子中我们使用的是一种便利方法，它其实是做了两件事：首先创建一个timer，然后将该timer添加到当前runloop的default mode中。也就是这个便利方法给我们造成了只要创建了timer就可以生效的错觉，我们当然可以自己创建timer，然后手动的把它添加到指定runloop的指定mode中去。</p>

<p>NSTimer其实也是一种资源，如果看过多线程变成指引文档的话，我们会发现所有的source如果要起作用，就得加到runloop中去。同理timer这种资源要想起作用，那肯定也需要加到runloop中才会又效喽。如果一个runloop里面不包含任何资源的话，运行该runloop时会立马退出。你可能会说那我们APP的主线程的runloop我们没有往其中添加任何资源，为什么它还好好的运行。我们不添加，不代表框架没有添加，如果有兴趣的话你可以打印一下main thread的runloop，你会发现有很多资源。</p>

<p>下面我们看一个小例子：</p>

<pre><code>- (void)applicationDidBecomeActive:(UIApplication *)application 
{ 
    [self testTimerWithOutShedule]; 
} 

- (void)testTimerWithOutShedule 
{ 
    NSLog(@"Test timer without shedult to runloop"); 
    SvTestObject *testObject3 = [[SvTestObject alloc] init]; 
    NSTimer *timer = [[NSTimer alloc] initWithFireDate:[NSDate dateWithTimeIntervalSinceNow:1] interval:1 target:testObject3 selector:@selector(timerAction:) userInfo:nil repeats:NO]; 
    [testObject3 release]; 
    NSLog(@"invoke release to testObject3"); 
} 

- (void)applicationWillResignActive:(UIApplication *)application 
{ 
    NSLog(@"SvTimerSample Will resign Avtive!"); 
}
</code></pre>

<p>这个小例子中我们新建了一个timer，为它指定了有效的target和selector，并指出了1秒后触发该消息，运行结果如下:</p>

<p><img src="http://www.xcoder.cn/wp-content/uploads/2013/11/20131128012234578.jpeg" alt="2" /></p>

<p>观察发现这个消息永远也不会触发，原因很简单，我们没有将timer添加到runloop中。</p>

<p>综上: 必须得把timer添加到runloop中，它才会生效。</p>

<h3>3、NSTimer加到了RunLoop中但迟迟的不触发事件</h3>

<p>为什么明明添加了，但是就是不按照预先的逻辑触发事件呢？？？原因主要有以下两个:</p>

<h4>1、runloop是否运行</h4>

<p>每一个线程都有它自己的runloop，程序的主线程会自动的使runloop生效，但对于我们自己新建的线程，它的runloop是不会自己运行起来，当我们需要使用它的runloop时，就得自己启动。</p>

<p>那么如果我们把一个timer添加到了非主线的runloop中，它还会按照预期按时触发吗？下面请看一段测试程序:</p>

<pre><code>- (void)applicationDidBecomeActive:(UIApplication *)application 
{ 
    [NSThread detachNewThreadSelector:@selector(testTimerSheduleToRunloop1) toTarget:self withObject:nil]; 
} 

// 测试把timer加到不运行的runloop上的情况 
- (void)testTimerSheduleToRunloop1 
{ 
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init]; 

    NSLog(@"Test timer shedult to a non-running runloop"); 
    SvTestObject *testObject4 = [[SvTestObject alloc] init]; 
    NSTimer *timer = [[NSTimer alloc] initWithFireDate:[NSDate dateWithTimeIntervalSinceNow:1] interval:1 target:testObject4 selector:@selector(timerAction:) userInfo:nil repeats:NO]; 
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode]; 
    // 打开下面一行输出runloop的内容就可以看出，timer却是已经被添加进去 
    //NSLog(@"the thread's runloop: %@", [NSRunLoop currentRunLoop]); 

    // 打开下面一行, 该线程的runloop就会运行起来，timer才会起作用 
    //[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3]]; 

    [testObject4 release]; 
    NSLog(@"invoke release to testObject4"); 

    [pool release]; 
} 

- (void)applicationWillResignActive:(UIApplication *)application 
{ 
    NSLog(@"SvTimerSample Will resign Avtive!"); 
}
</code></pre>

<p>上面的程序中，我们新创建了一个线程，然后创建一个timer，并把它添加当该线程的runloop当中，但是运行结果如下：</p>

<p><img src="http://www.xcoder.cn/wp-content/uploads/2013/11/20131128012536812-300x52.jpeg" alt="3" /></p>

<p>观察运行结果，我们发现这个timer知道执行退出也没有触发我们指定的方法，如果我们把上面测试程序中“//[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3]];”这一行的注释去掉，则timer将会正确的掉用我们指定的方法。</p>

<h4>2、mode是否正确</h4>

<p>我们前面自己动手添加runloop的时候，可以看到有一个参数runloopMode，这个参数是干嘛的呢？</p>

<p>前面提到了要想timer生效，我们就得把它添加到指定runloop的指定mode中去，通常是主线程的defalut mode。但有时我们这样做了，却仍然发现timer还是没有触发事件。这是为什么呢？</p>

<p>这是因为timer添加的时候，我们需要指定一个mode，因为同一线程的runloop在运行的时候，任意时刻只能处于一种mode。所以只能当程序处于这种mode的时候，timer才能得到触发事件的机会。</p>

<p>举个不恰当的例子，我们说兄弟几个分别代表runloop的mode，timer代表他们自己的才水桶，然后一群人去排队打水，只有一个水龙头，那么同一时刻，肯定只能有一个人处于接水的状态。也就是说你虽然给了老二一个桶，但是还没轮到它，那么你就得等，只有轮到他的时候你的水桶才能碰上用场。</p>

<p>综上: 要让timer生效，必须保证该线程的runloop已启动，而且其运行的runloopmode也要匹配。</p>

<pre><code>文章转自http://blog.csdn.net/ioswyl88219
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 9 App Thinning]]></title>
    <link href="http://www.superqq.com/blog/2016/03/09/ios-9-app-thinning/"/>
    <updated>2016-03-09T21:38:29+08:00</updated>
    <id>http://www.superqq.com/blog/2016/03/09/ios-9-app-thinning</id>
    <content type="html"><![CDATA[<p>App Thinning 是苹果在去年 WWDC, 也就是 iOS 9 中推出的为 App 瘦身的一个新的技术。 App Thinning 主要分为 3 个部分:</p>

<ul>
<li>App Slicing</li>
<li>Bitcode</li>
<li>On Demand Resources</li>
</ul>


<h2>App Slicing</h2>

<p>我们正常的应用中都会用到图片资源，为了适配 iPhone 6 Plus 以及 iPhone 6, 图片资源需要包含 @2x 的图片 和 @3x 的图片，而 Slicing 就是在这一步进行优化，Slicing 会根据用户在 App Store 下载的不同设备选择对应的资源。例如：当用户使用 iPhone 6 在 App Store 上下载 App 的时候，App Store 只会给予他 @2x 的图片，而不会像以前一样，不管三七二十一我把所有的资源都给你，根据苹果的描述，这大约能节约你 30% 到 50% 的大小。而你要做的事情，仅仅是使用 Xcode 7 IDE, 并且使用其中的 Assert Catalog 管理你的资源文件。</p>

<p>不过 Slicing 因为 iCloud 备份的问题, 知道 iOS 9.0.2 以及 Xcode 7.0.1 才可以被使用</p>

<h2>Bitcode</h2>

<p>Bitcode 是苹果在你 App 被下载之前做的另外一件优化。Bitcode 是你的代码编译为最终可执行文件的中间的一层，当你的 App 以 Bitcode 的形式提交到 iTunes Connect 的时候，iTunes Connect 会自动为合适的机器编译出对应的代码，例如：对于 64 位机器的 iPhone 6 或者 iPad Air 2，Bitcode 会为其编译出适合 64 位机器可执行文件。</p>

<p>对于 iOS app 来说, Bitcode 不是必须的，但 Bitcode 编译选项为 Yes（这里应该只是一个过渡期，有些第三方库如果不在继续维护了需要尽快换掉）, 对于 tvOS 和 watchOS 的 app，Bitcode 的的选项必须为 Yes。</p>

<!--more-->


<h2>On Demand Resources</h2>

<p>最后一个 App Thinnig 步骤是 On Demand Resources, On Demand Resources 在游戏的制作中比较常见，主要为了一些没用的资源在用到了才会去下载，比如，当我们设计一个游戏有 3 个关卡的时候，第一关的资源在 App 被下载的时候就已经下载好了，但是，出于对 App 大小的考虑，此时，第二关的资源是不需要下载的, 可以等到第一关结束以后，或者第一关进行到一半的时候后台进行下载。</p>

<p>On Demand Resources 中的资源包括了 图片，音效等等， 下面是一个 On Demand Resources 的 Demo, 语言的话，我们选用 Swift.</p>

<p>Demo 是这样的： 首页只有一个 Button，默认情况下 Assets 里面的图片 Group 没有被下载, 当点击 Button 以后，会先去看 Group 时候已经存储下载完毕, 如果没有下载，则会去触发一个下载请求，下载完成后，把图片显示到居中的位置。</p>

<pre><code>@IBAction func downloadBarButtonItemTouchUpInside(sender: UIButton) {
    let tags = NSSet(array: ["Group"])
    self.resourceRequest = NSBundleResourceRequest(tags: tags as! Set&lt;String&gt;)
    self.resourceRequest?.conditionallyBeginAccessingResourcesWithCompletionHandler() {
        resourceAvailable in

        if resourceAvailable {
            dispatch_async(dispatch_get_main_queue()) {
                self.imageView.image = UIImage(named: "Group")
            }
        } else {

            self.resourceRequest?.beginAccessingResourcesWithCompletionHandler() {
                error in
                if error == nil {
                    dispatch_async(dispatch_get_main_queue()) {
                        self.imageView.image = UIImage(named: "Group")
                    }
                } else {
                    print(error)
                }
            }
        }
    }

}
</code></pre>

<p>另外，我们可以通过 Xcode 中的 Disk 来查看 On Demand Resources 的情况</p>

<p><img src="http://blog.ggteach.com/img/app_thinning.jpg" alt="1" /></p>

<p>完整的 Demo 见 <a href="https://github.com/VioletHill/AppThinningDemo">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS视频边下边播--缓存播放数据流]]></title>
    <link href="http://www.superqq.com/blog/2016/03/08/ios-video-play-stream/"/>
    <updated>2016-03-08T23:13:36+08:00</updated>
    <id>http://www.superqq.com/blog/2016/03/08/ios-video-play-stream</id>
    <content type="html"><![CDATA[<p>google搜索“iOS视频变下边播”，有好几篇博客写到了实现方法，其实只有一篇，其他都是copy的，不过他们都是使用的本地代理服务器的方式，原理很简单，但是缺点也很明显，需要自己写一个本地代理服务器或者使用第三方库httpSever。如果使用httpSever作为本地代理服务器，如果只缓存一个视频是没有问题的，如果缓存多个视频互相切换，本地代理服务器提供的数据很不稳定，crash概率非常大。</p>

<p>这里我采用ios7以后系统自带的方法实现视频边下边播，这里的边下边播不是单独开一个子线程去下载，而是把视频播放的数据给保存到本地。简而言之，就是使用一遍的流量，既播放了视频，也保存了视频。</p>

<pre><code>用到的框架：&lt;AVFoundation/AVFoundation.h&gt;
用到的播放器：AVplayer
</code></pre>

<p>先说一下avplayer自身的播放原理，当我们给播放器设置好url等一些参数后，播放器就会向url所在的服务器发送请求(请求参数有两个值，一个是offset偏移量，另一个是length长度，其实就相当于NSRange一样)，服务器就根据range参数给播放器返回数据。这就是大致的原理，当然实际的过程还是略微比较复杂。</p>

<p>下面进入主题</p>

<h2>产品需求：</h2>

<ol>
<li><p>支持正常播放器的一切功能，包括暂停、播放和拖拽</p></li>
<li><p>如果视频加载完成且完整，将视频文件保存到本地cache，下一次播放本地cache中的视频，不再请求网络数据</p></li>
<li><p>如果视频没有加载完（半路关闭或者拖拽）就不用保存到本地cache<br/></p></li>
</ol>


<h2>实现方案:</h2>

<ol>
<li><p>需要在视频播放器和服务器之间添加一层类似代理的机制，视频播放器不再直接访问服务器，而是访问代理对象，代理对象去访问服务器获得数据，之后返回给视频播放器，同时代理对象根据一定的策略缓存数据。</p></li>
<li><p>AVURLAsset中的resourceLoader可以实现这个机制，resourceLoader的delegate就是上述的代理对象。</p></li>
<li><p>视频播放器在开始播放之前首先检测是本地cache中是否有此视频，如果没有才通过代理获得数据，如果有，则直接播放本地cache中的视频即可。<br/></p></li>
</ol>


<h2>视频播放器需要实现的功能</h2>

<ol>
<li><p>有开始暂停按钮</p></li>
<li><p>显示播放进度及总时长</p></li>
<li><p>可以通过拖拽从任意位置开始播放视频</p></li>
<li><p>视频加载中的过程和加载失败需要有相应的提示<br/></p></li>
</ol>


<h2>代理对象需要实现的功能</h2>

<ol>
<li><p>接收视频播放器的请求，并根据请求的range向服务器请求本地没有获得的数据</p></li>
<li><p>缓存向服务器请求回的数据到本地</p></li>
<li><p>如果向服务器的请求出现错误，需要通知给视频播放器，以便视频播放器对用户进行提示</p></li>
</ol>


<h2>具体流程图</h2>

<p><img src="http://upload-images.jianshu.io/upload_images/971366-0a9b11be2df75aaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1" /></p>

<p>视频播放器处理流程</p>

<ol>
<li><p>当开始播放视频时，通过视频url判断本地cache中是否已经缓存当前视频，如果有，则直接播放本地cache中视频</p></li>
<li><p>如果本地cache中没有视频，则视频播放器向代理请求数据</p></li>
<li><p>加载视频时展示正在加载的提示（菊花转）</p></li>
<li><p>如果可以正常播放视频，则去掉加载提示，播放视频，如果加载失败，去掉加载提示并显示失败提示</p></li>
<li><p>在播放过程中如果由于网络过慢或拖拽原因导致没有播放数据时，要展示加载提示，跳转到第4步</p></li>
</ol>


<p>代理对象处理流程</p>

<ol>
<li><p>当视频播放器向代理请求dataRequest时，判断代理是否已经向服务器发起了请求，如果没有，则发起下载整个视频文件的请求</p></li>
<li><p>如果代理已经和服务器建立链接，则判断当前的dataRequest请求的offset是否大于当前已经缓存的文件的offset，如果大于则取消当前与服务器的请求，并从offset开始到文件尾向服务器发起请求（此时应该是由于播放器向后拖拽，并且超过了已缓存的数据时才会出现）</p></li>
<li><p>如果当前的dataRequest请求的offset小于已经缓存的文件的offset，同时大于代理向服务器请求的range的offset，说明有一部分已经缓存的数据可以传给播放器，则将这部分数据返回给播放器（此时应该是由于播放器向前拖拽，请求的数据已经缓存过才会出现）</p></li>
<li><p>如果当前的dataRequest请求的offset小于代理向服务器请求的range的offset，则取消当前与服务器的请求，并从offset开始到文件尾向服务器发起请求（此时应该是由于播放器向前拖拽，并且超过了已缓存的数据时才会出现）</p></li>
<li><p>只要代理重新向服务器发起请求，就会导致缓存的数据不连续，则加载结束后不用将缓存的数据放入本地cache</p></li>
<li><p>如果代理和服务器的链接超时，重试一次，如果还是错误则通知播放器网络错误</p></li>
<li><p>如果服务器返回其他错误，则代理通知播放器网络错误</p></li>
</ol>


<h2>resourceLoader的难点处理</h2>

<pre><code>- (BOOL)resourceLoader:(AVAssetResourceLoader *)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest *)loadingRequest
{
    [self.pendingRequests addObject:loadingRequest];
    [self dealWithLoadingRequest:loadingRequest];

    return YES;
}
</code></pre>

<p>播放器发出的数据请求从这里开始，我们保存从这里发出的所有请求存放到数组，自己来处理这些请求，当一个请求完成后，对请求发出finishLoading消息，并从数组中移除。正常状态下，当播放器发出下一个请求的时候，会把上一个请求给finish。</p>

<p>下面这个方法发出的请求说明播放器自己关闭了这个请求，我们不需要再对这个请求进行处理，系统每次结束一个旧的请求，便必然会发出一个或多个新的请求，除了播放器已经获得整个视频完整的数据，这时候就不会再发起请求。</p>

<pre><code>- (void)resourceLoader:(AVAssetResourceLoader *)resourceLoader didCancelLoadingRequest:(AVAssetResourceLoadingRequest *)loadingRequest
{
    [self.pendingRequests removeObject:loadingRequest];

}
</code></pre>

<p>下面这个方法是对播放器发出的请求进行填充数据</p>

<pre><code>- (BOOL)respondWithDataForRequest:(AVAssetResourceLoadingDataRequest *)dataRequest
{
    long long startOffset = dataRequest.requestedOffset;

    if (dataRequest.currentOffset != 0) {
        startOffset = dataRequest.currentOffset;
    }

    if ((self.task.offset +self.task.downLoadingOffset) &lt; startOffset)
    {
        //NSLog(@"NO DATA FOR REQUEST");
        return NO;
    }

    if (startOffset &lt; self.task.offset) {
        return NO;
    }

    NSData *filedata = [NSData dataWithContentsOfURL:[NSURL fileURLWithPath:_videoPath] options:NSDataReadingMappedIfSafe error:nil];

    // This is the total data we have from startOffset to whatever has been downloaded so far
    NSUInteger unreadBytes = self.task.downLoadingOffset - ((NSInteger)startOffset - self.task.offset);

    // Respond with whatever is available if we can't satisfy the request fully yet
    NSUInteger numberOfBytesToRespondWith = MIN((NSUInteger)dataRequest.requestedLength, unreadBytes);


    [dataRequest respondWithData:[filedata subdataWithRange:NSMakeRange((NSUInteger)startOffset- self.task.offset, (NSUInteger)numberOfBytesToRespondWith)]];



    long long endOffset = startOffset + dataRequest.requestedLength;
    BOOL didRespondFully = (self.task.offset + self.task.downLoadingOffset) &gt;= endOffset;

    return didRespondFully;


}
</code></pre>

<p>这是对存放所有的请求的数组进行处理</p>

<pre><code>- (void)processPendingRequests
{
    NSMutableArray *requestsCompleted = [NSMutableArray array];  //请求完成的数组
    //每次下载一块数据都是一次请求，把这些请求放到数组，遍历数组
    for (AVAssetResourceLoadingRequest *loadingRequest in self.pendingRequests)
    {
        [self fillInContentInformation:loadingRequest.contentInformationRequest]; //对每次请求加上长度，文件类型等信息

        BOOL didRespondCompletely = [self respondWithDataForRequest:loadingRequest.dataRequest]; //判断此次请求的数据是否处理完全

        if (didRespondCompletely) {

            [requestsCompleted addObject:loadingRequest];  //如果完整，把此次请求放进 请求完成的数组
            [loadingRequest finishLoading];

        }
    }

    [self.pendingRequests removeObjectsInArray:requestsCompleted];   //在所有请求的数组中移除已经完成的

}
</code></pre>

<p>resourceLoader的难点基本上就是上面这点了，说到播放器，下面便顺便讲下AVPlayer的难点。</p>

<h2>难点：对播放器状态的捕获</h2>

<pre><code>举个简单的例子，视频总长度60分，现在缓冲的数据才10分钟，然后拖动到20分钟的位置进行播放，在网速较慢的时候，视频从当前位置开始播放，必然会出现一段时间的卡顿，为了有一个更好的用户体验，在卡顿的时候，我们需要加一个菊花转的状态，现在问题就来了。

在拖动到未缓冲区域内，是否需要加菊花转，如果加，要显示多久再消失，而且如果在网速很慢的时候，播放器如果等了太久，哪怕最后有数据了，播放器也已经“死”了，它自己无法恢复播放，这个时候需要我们人为的去恢复播放，如果恢复播放不成功，那么过一段时间需要再次恢复播放，是否恢复播放成功，这里也需要捕获其状态。所以，如果要有一个好的用户体验，我们需要时时知道播放器的状态。
</code></pre>

<p>有两个状态需要捕获，一个是正在缓冲，一个是正在播放，监听播放的“playbackBufferEmpty”属性就可以捕获正在缓冲状态，播放器的时间监听器则可以捕获正在播放状态，我的demo中一共有4个状态：</p>

<pre><code>typedef NS_ENUM(NSInteger, TBPlayerState) {
    TBPlayerStateBuffering = 1,
    TBPlayerStatePlaying   = 2,
    TBPlayerStateStopped   = 3,
    TBPlayerStatePause     = 4
};
</code></pre>

<p>这样可以对播放器更好的把握和处理了。然后说一说在缓冲时候的处理，以及缓冲后多久去播放，处理方法：进入缓冲状态后，缓冲2秒后去手动播放，如果播放不成功（缓冲的数据太少，还不足以播放），那就再缓冲2秒再次播放，如此循环，看详细代码：</p>

<pre><code>- (void)bufferingSomeSecond
{
    // playbackBufferEmpty会反复进入，因此在bufferingOneSecond延时播放执行完之前再调用bufferingSomeSecond都忽略
    static BOOL isBuffering = NO;
    if (isBuffering) {
        return;
    }
    isBuffering = YES;

    // 需要先暂停一小会之后再播放，否则网络状况不好的时候时间在走，声音播放不出来
    [self.player pause];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{

        // 如果此时用户已经暂停了，则不再需要开启播放了
        if (self.isPauseByUser) {
            isBuffering = NO;
            return;
        }

        [self.player play];
        // 如果执行了play还是没有播放则说明还没有缓存好，则再次缓存一段时间
        isBuffering = NO;
        if (!self.currentPlayerItem.isPlaybackLikelyToKeepUp) {
            [self bufferingSomeSecond];
        }
    });
}
</code></pre>

<p>这个demo花了我很长的时间，实现这个demo我也遇到了很多坑最后才完成的，现在我奉献出来，也许对你会有所帮助。如果你觉得不错，还请为我Star一个，也算是对我的支持和鼓励。</p>

<p>demo下载地址</p>

<pre><code>https://github.com/suifengqjn/TBPlayer
</code></pre>

<blockquote><pre><code>文／夜千寻墨（简书作者）
来自：http://www.jianshu.com/p/990ee3db0563
</code></pre></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C和Swift混编的一些经验]]></title>
    <link href="http://www.superqq.com/blog/2016/03/07/objective-c-swift-study/"/>
    <updated>2016-03-07T22:38:41+08:00</updated>
    <id>http://www.superqq.com/blog/2016/03/07/objective-c-swift-study</id>
    <content type="html"><![CDATA[<blockquote><p>阿里云iOS客户端2.1.0版本中开始尝试使用Swift来写新的业务，磕磕绊绊总算是发布了新版，总结一下开发过程中得到的经验和踩过的坑吧。</p></blockquote>

<h2>CocoaPods</h2>

<p>使用Swift作为主要的开发语言，很难避免引入Swift编写的库。2.1.0版本引入了SwiftyJSON和Charts这两个Swift写的库，分别用于处理JSON数据和画监控图。</p>

<p>苹果要求使用Swift写的库，必须通过动态链接库引入，其实这一点我也是不太理解的，因为静态库也是可以依赖动态库的符号的，不存在导入多个Swift动态库的问题。允许App使用自带的动态库从iOS8才开始支持，因此必须将App支持的iOS版本升到iOS8。阿里云iOS客户端iOS7的用户不到4%，所以放弃了对iOS7的支持。</p>

<p>Cocoapods支持将依赖的组件编译成动态库，只需要在Podfile顶部加上&#8221;use_frameworks!&ldquo;。开启这个选项之后，所有以源码引入的pod都会编译成动态链接库，而以fake framework引入的pod仍然会编译到主App里面。动态库都放在App里面的Frameworks目录，可以看到Swift相关的动态库也都拷贝进来了，所以支持Swift会导致包变大。我没有记下2.0.0版本的大小，导致没法对比2.1.0放大了多少，这是一个失误。</p>

<pre><code>[~/Library/Developer/Xcode/Archives/2015-12-17/CloudConsoleApp 15-12-17 下午9.24.xcarchive/Products/Applications/CloudConsoleApp.app/Frameworks]$ tree
.
├── Charts.framework
│   ├── Charts
│   ├── Info.plist
│   └── _CodeSignature
│       └── CodeResources
├── EAIntroView.framework
│   ├── EAIntroView
│   ├── Info.plist
│   └── _CodeSignature
│       └── CodeResources
├── FMDB.framework
│   ├── FMDB
│   ├── Info.plist
│   └── _CodeSignature
│       └── CodeResources
├── FTCoreText.framework
│   ├── FTCoreText
│   ├── Info.plist
│   └── _CodeSignature
│       └── CodeResources
├── JSBadgeView.framework
│   ├── Info.plist
│   ├── JSBadgeView
│   ├── JSBadgeView.bundle
│   └── _CodeSignature
│       └── CodeResources
├── MBProgressHUD.framework
│   ├── Info.plist
│   ├── MBProgressHUD
│   └── _CodeSignature
│       └── CodeResources
├── MFSideMenu.framework
│   ├── Info.plist
│   ├── MFSideMenu
│   └── _CodeSignature
│       └── CodeResources
├── PFormanceKit.framework
│   ├── Info.plist
│   ├── PFormanceKit
│   └── _CodeSignature
│       └── CodeResources
├── Reachability.framework
│   ├── Info.plist
│   ├── Reachability
│   └── _CodeSignature
│       └── CodeResources
├── RegexKitLite.framework
│   ├── Info.plist
│   ├── RegexKitLite
│   └── _CodeSignature
│       └── CodeResources
├── SSZipArchive.framework
│   ├── Info.plist
│   ├── SSZipArchive
│   └── _CodeSignature
│       └── CodeResources
├── SnapKit.framework
│   ├── Info.plist
│   ├── SnapKit
│   └── _CodeSignature
│       └── CodeResources
├── SwiftyJSON.framework
│   ├── Info.plist
│   ├── SwiftyJSON
│   └── _CodeSignature
│       └── CodeResources
├── libswiftContacts.dylib
├── libswiftCore.dylib
├── libswiftCoreData.dylib
├── libswiftCoreGraphics.dylib
├── libswiftCoreImage.dylib
├── libswiftDarwin.dylib
├── libswiftDispatch.dylib
├── libswiftFoundation.dylib
├── libswiftObjectiveC.dylib
└── libswiftUIKit.dylib

27 directories, 49 files

$ file Charts 
Charts: Mach-O universal binary with 2 architectures
Charts (for architecture armv7):    Mach-O dynamically linked shared library arm
Charts (for architecture arm64):    Mach-O 64-bit dynamically linked shared library
</code></pre>

<p>因为fake framework和源代码pod分别会编译成静态库和动态库，这样会导致一个问题，就是如果源码pod又依赖fake framework，那就没办法了。CocoaPods发现这种情况会提示下面这个错误。</p>

<pre><code>target has transitive dependencies that include static binaries: (xxx.framework, xxx.framework)
</code></pre>

<p>pod install时会把静态库编译到App里面，源码编译成的动态库没法依赖它。最终的解决方案只能是CocoaPods对fake framework和源码pod一视同仁，都编译成动态库，这样彼此才能依赖。不知道CocoaPods什么时候会支持这样。</p>

<h2>混编</h2>

<ul>
<li>Swift使用Objective-C</li>
</ul>


<p>这种情况占绝大多数。只需要在CloudConsoleApp-Bridging-Header.h这个头文件中包含相关的头文件就行。pod组件另外一种引入的方式是通过@import引入。比如SDWebImage可以通过下面两种方式引入。</p>

<pre><code>//在Bridging头文件包含下面这个头文件
#import &lt;SDWebImage/UIImageView+WebCache.h&gt;

//另外一种办法，在Swift文件中引入。
import SDWebImage
</code></pre>

<p>Objective-C写的类和方法都会被改成Swift的使用方式，下面是两个很典型的例子。使用的时候需要尝试一下才能找到翻译的Swift方法。</p>

<pre><code>//Objective-C
titleLabel.lineBreakMode = NSLineBreakByWordWrapping;
titleLabel.numberOfLines = 0;

//Swift
cell.nameLabel?.lineBreakMode = .ByWordWrapping //全写是 NSLineBreakMode.ByWordWrapping
cell.nameLabel?.numberOfLines = 0

//Objective-C
UIImage *image = [UIImage imageNamed:@"abc"];

//Swift
let image = UIImage(named: "abc")
</code></pre>

<ul>
<li>Objective-C使用Swift</li>
</ul>


<p>Xcode会生成一个虚拟的头文件CloudConsoleApp-Swift.h，在工程里面是找不到这个头文件的，但是可以包含，并且跳转进去。这个文件里面包含了所有从Swift导出来的符号，比如下面这个view controller就是用Swift写的。可以看出来Objectivew-C看到的名称跟Swift源码里面的名称是一样的，但是Swift会对类做demangling，变成了_TtC15CloudConsoleApp31YWSResourceDetailViewController这样的，跟C++有点类似。</p>

<pre><code>SWIFT_CLASS("_TtC15CloudConsoleApp31YWSResourceDetailViewController")
@interface YWSResourceDetailViewController : UIPageViewController
@property (nonatomic, strong) NSArray * __nonnull vcs;
@property (nonatomic, copy) NSString * __null_unspecified pluginId;
@property (nonatomic, strong) YWSSegmentedControl * __nonnull segmentedControl;
@property (nonatomic, strong) YWSInstanceListViewController * __nonnull instanceListViewController;
@property (nonatomic, strong) YWSMetricConcernedViewController * __nonnull metricConcernedViewController;
@property (nonatomic, weak) IBOutlet UIBarButtonItem * __null_unspecified addMetricBarButton;
- (void)viewDidLoad;
- (void)initSegmentedControl;
- (void)indexChanged:(id __nonnull)sender;
- (void)onNavigationBack:(id __nonnull)sender;
- (void)prepareForSegue:(UIStoryboardSegue * __nonnull)segue sender:(id __nullable)sender;
- (nonnull instancetype)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary&lt;NSString *, id&gt; * __nullable)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end
</code></pre>

<h2>Swift的优缺点</h2>

<p>这个项目刚起步，用Swift的经验尚浅，所以都是一些比较浅薄的理解，后面有更深刻的理解再补上。</p>

<h3>优点</h3>

<ul>
<li>代码简洁。类的声明和实现在一个文件中。</li>
<li>统一对属性和方法的调用，都用.。</li>
<li>如果不加额外的访问控制，所有的符号都是整个项目可见，无需考虑头文件的问题。</li>
<li><p>字符串处理太方便了。</p>

<p>  //字符串比较和拼接实在是太方便了
  let foo = &ldquo;abc&rdquo;
  let bar = &ldquo;abc&rdquo;</p>

<p>  if foo == bar {
      //blablabla
  }</p>

<p>  print(&ldquo;====(foo)+(bar)&rdquo;)</p></li>
<li><p>语言上支持延迟加载。</p>

<p>  lazy var imageView : UIImageView = {
      var imageView = UIImageView(image: UIImage(named: &ldquo;empty_hint&rdquo;))
      imageView.contentMode = .ScaleAspectFit</p>

<pre><code>  return imageView
</code></pre>

<p>  }()</p>

<p>  lazy var infoLabel : UILabel = {
      var infoLabel = UILabel()
      infoLabel.lineBreakMode = .ByWordWrapping //支持换行
      infoLabel.numberOfLines = 0</p>

<pre><code>  return infoLabel
</code></pre>

<p>  }()</p>

<p>  lazy var button : UIButton = {
      var button = UIButton()
      button.titleLabel?.font = UIFont.systemFontOfSize(15)
      button.setTitleColor(UIColor.darkGrayColor(), forState: .Normal)
      button.setBackgroundImage(UIImage(named: &ldquo;buy_instance_hint_button&rdquo;), forState: .Normal)
      button.hidden = true</p>

<pre><code>  return button
</code></pre>

<p>  }()</p></li>
<li><p>多返回值。比如下面这个函数，如果使用Objective-C写还是比较麻烦的。</p>

<p>  //将 &ldquo;创建中&amp;#FA8C35&rdquo; 翻译成对应的 &ldquo;(字符串对象, 颜色对象)&rdquo;
  func YWSTranslateRichText (str : String) -> (text : String, color : UIColor) {
      let statusArray = str.componentsSeparatedByString(&ldquo;&amp;&rdquo;)</p>

<pre><code>  if statusArray.count == 0 {
      return ("", UIColor.lightGrayColor())
  }

  if statusArray.count == 1 {
      return (statusArray[0], UIColor.lightGrayColor())
  }

  return (statusArray[0], UIColor.fromHexString(statusArray[1]))
</code></pre>

<p>  }</p>

<p>  //使用方式如下
  let (text, color) = YWSTranslateRichText(instanceStatusConf)</p></li>
<li><p>支持字符串作为枚举值。</p>

<p>  enum YWSECSInstanceStatus : String {
      case Starting = &ldquo;Starting&rdquo;
      case Running = &ldquo;Running&rdquo;
      case Stopping = &ldquo;Stopping&rdquo;
      case Stopped = &ldquo;Stopped&rdquo;
  }</p>

<p>  //使用方法
  cell.ECSInstanceStatus = YWSECSInstanceStatus(rawValue: instanceStatus!)</p>

<p>  //转换成字符串
  textDetailLabel.text = YWSECSInstanceStatus.Starting.rawValue</p></li>
<li><p>selector类型实现了 StringLiteralConvertible，使用起来更加简单。</p>

<p>  self.button.addTarget(self, action: &ldquo;introduceResources:&rdquo;, forControlEvents: .TouchUpInside)</p></li>
<li><p>不再需要引入libextobjc这个Pod，因为Swift支持更方便的用法。在block开始的时候，在数组里面weak所有要用到的对象。</p>

<p>  inputViewController.finishBlock = { [weak inputViewController, weak cell, weak self] () -> Void in
  }</p></li>
<li><p>函数支持默认参数。比如下面这个函数，有五个参数，其中三个有默认参数，用户需要设置的参数只有两个。</p>

<p>  convenience init(text: String, textColor: UIColor = UIColor.whiteColor(), bgColor: UIColor, font: UIFont = UIFont.systemFontOfSize(10), inset: UIEdgeInsets = UIEdgeInsetsMake(0, 3, 0, 3)) {
      //blabla
  }</p>

<p>  lazy var vipLabel : YWSInsetsTextLabel! = YWSInsetsTextLabel(text: &ldquo;vip&rdquo;, bgColor: UIColor.orangeColor())</p></li>
<li><p>通过减少动态性，使用vtable替换原有的objc_msgSend，获取更高的性能。新增了final、private等关键字，编译器可以对代码做更多优化，提升性能并减少内存的使用。比如final方法不用放入虚表中，节省内存；跳转时不用查表，性能更佳；private的类如果发现有方法只在本文件中使用，可以直接内联，提高性能。</p></li>
<li><p>在Playground工程里面练习Swift编程非常之方便，尤其是测试VFL语句的时候。</p></li>
</ul>


<p><img src="http://upload-images.jianshu.io/upload_images/1376176-76d2627719e67fa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1" /></p>

<h2>缺点</h2>

<ul>
<li>Optional让人头疼，大量的?和!，没处理好很容易导致崩溃。</li>
<li>强类型和Optional，给JSON解释带来了灾难。</li>
<li><p>目前Xcode不支持对Swift写的代码做重构。</p></li>
<li><p>Build Settings里面设置Treat Warnings as Errors对Swift代码无效。</p></li>
</ul>


<h2>坑</h2>

<p>用private修饰的类，如果使用KVC来给属性设置值，编译不会报错，运行时也不会报错，但就是设置不上。去掉private就好了。</p>

<h2>crash分析</h2>

<p>手解crash可以看到具体崩溃代码的行号。</p>

<pre><code>$ symbolicatecrash ~/Downloads/034dc058c5d4ff1f717ec7a05d4d55b8 CloudConsoleApp.app.dSYM

Exception Type:  SIGTRAP
Exception Codes: #0 at 0x1001c09b4
Crashed Thread:  0

Thread 0 Crashed:
0   CloudConsoleApp                     0x00000001001c09b4 YWSInstanceListViewController.goToBuyPage() -&gt; () (YWSInstanceListViewController.swift:701)
1   CloudConsoleApp                     0x00000001001c92cc specialized YWSInstanceListViewController.introduceResources(AnyObject) -&gt; () (YWSInstanceListViewController.swift:689)
2   CloudConsoleApp                     0x00000001001c029c @objc YWSInstanceListViewController.introduceResources(AnyObject) -&gt; () (YWSInstanceListViewController.swift:0)
3   UIKit                               0x000000018601be50 0x185fd0000 + 310864
4   UIKit                               0x000000018601bdcc 0x185fd0000 + 310732
5   UIKit                               0x0000000186003a88 0x185fd0000 + 211592
6   UIKit                               0x000000018601b6e4 0x185fd0000 + 308964
7   UIKit                               0x000000018601b314 0x185fd0000 + 307988
8   UIKit                               0x0000000186013e30 0x185fd0000 + 278064
9   UIKit                               0x0000000185fe44cc 0x185fd0000 + 83148
10  UIKit                               0x0000000185fe2794 0x185fd0000 + 75668
11  CoreFoundation                      0x00000001812a8efc 0x1811cc000 + 904956
12  CoreFoundation                      0x00000001812a8990 0x1811cc000 + 903568
13  CoreFoundation                      0x00000001812a6690 0x1811cc000 + 894608
14  CoreFoundation                      0x00000001811d5680 0x1811cc000 + 38528
15  GraphicsServices                    0x00000001826e4088 0x1826d8000 + 49288
16  UIKit                               0x000000018604cd90 0x185fd0000 + 511376
17  CloudConsoleApp                     0x000000010014b4e0 main (main.m:16)
18  libdyld.dylib                       0x0000000180d768b8 0x180d74000 + 10424

//不过我对着这行代码分析了好久，实在想不出来崩溃的原因。没有任何crash提示信息。
//这个版本Swift代码只有这样一个crash
//后面再看看新crash会不会也是这样
self.resourceType = YWSXXX.shareInstance().getXXXByXXX(self.XXX.pluginId)
</code></pre>

<p>实际证明Swift的crash信息非常不准确，能知道崩溃的文件和函数，行号不准确，也不会输出Application Specific Information。比如下面这个crash。</p>

<pre><code>Incident Identifier: 54087A46-D37D-454B-9305-22ED5420B58B
CrashReporter Key:   TODO
Hardware Model:      iPhone6,2
Process:             CloudConsoleApp [696]
Path:                /var/mobile/Containers/Bundle/Application/E8E24C8B-A47B-425E-863F-A871F273FCA2/CloudConsoleApp.app/CloudConsoleApp
Identifier:          com.aliyun.wstudio.amc.AliyunMobileApp
Version:             2.2.0 (2169)
Code Type:           ARM-64
Parent Process:      ??? [1]

Date/Time:           2016-01-25 10:44:56 +0000
OS Version:          iPhone OS 9.2.1 (13D15)
Report Version:      104

Exception Type:  SIGTRAP
Exception Codes: #0 at 0x100139e80
Triggered by Thread:  0

Thread 0 Crashed:
0   CloudConsoleApp                 0x0000000100139e80 __TFC15CloudConsoleApp24YWSTouchIDViewController14viewWillAppearfS0_FSbT_ (in CloudConsoleApp) + 1304
1   CloudConsoleApp                 0x0000000100139eb0 __TToFC15CloudConsoleApp24YWSTouchIDViewController14viewWillAppearfS0_FSbT_ (in CloudConsoleApp) + 44
2   UIKit                           0x000000018722c74c 0x0000000187200000 + 182092
3   UIKit                           0x000000018722c4c0 0x0000000187200000 + 181440
4   UIKit                           0x00000001872d3130 0x0000000187200000 + 864560
5   UIKit                           0x00000001872d2a6c 0x0000000187200000 + 862828
6   UIKit                           0x00000001872d2694 0x0000000187200000 + 861844
7   UIKit                           0x00000001872d25fc 0x0000000187200000 + 861692
8   UIKit                           0x000000018720f778 0x0000000187200000 + 63352
9   QuartzCore                      0x0000000184c1eb2c 0x0000000184c10000 + 60204
10  QuartzCore                      0x0000000184c19738 0x0000000184c10000 + 38712
11  QuartzCore                      0x0000000184c195f8 0x0000000184c10000 + 38392
12  QuartzCore                      0x0000000184c18c94 0x0000000184c10000 + 35988
13  QuartzCore                      0x0000000184c189dc 0x0000000184c10000 + 35292
14  QuartzCore                      0x0000000184c120cc 0x0000000184c10000 + 8396
15  CoreFoundation                  0x00000001824d8588 0x00000001823fc000 + 902536
16  CoreFoundation                  0x00000001824d632c 0x00000001823fc000 + 893740
17  CoreFoundation                  0x00000001824d675c 0x00000001823fc000 + 894812
18  CoreFoundation                  0x0000000182405680 0x00000001823fc000 + 38528
19  GraphicsServices                0x0000000183914088 0x0000000183908000 + 49288
20  UIKit                           0x000000018727cd90 0x0000000187200000 + 511376
21  CloudConsoleApp                 0x000000010007f988 main (in CloudConsoleApp) (main.m:16)
22  libdyld.dylib                   0x0000000181fa68b8 0x0000000181fa4000 + 10424

//确实崩溃在viewWillAppear函数中，但是是97行的 as! 导致的，在crash信息里面这两个重要的信息没有暴露出来。
override func viewWillAppear(animated: Bool) {
    super.viewWillAppear(animated)

    //let urlString = YWSXXX.sharedInstance().get("userIcon") as! String

    //因为2.1.0重构过登录模块，新的登录模块才会保存 userIcon 这个值
    //所以2.2.0覆盖2.1.0之前的版本用 as! 会崩溃，这里改成 as? 了
    if let urlString = YWSXXX.sharedInstance().get("userIcon") as? String {
    }
}
</code></pre>

<h2>总结</h2>

<p>Swift 2.1版本已经非常稳定，苹果将其开源，也表明对Swift的质量和可靠性有足够的信心。开源社区开始涌现一批优秀的Swift库，比如Charts，这个画图的组件很不错。StackOverflow的答案中很多人会同时提供Objective-C和Swift两个版本。目前来看唯一美中不足的问题就是解出来的crash没有Objective-C那么直观了，很多时候都得靠猜。</p>

<pre><code>文／阿呆少爷（简书作者）
原文链接：http://www.jianshu.com/p/a5e6e574145b
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[女程序员做了个梦，众网友的神回复]]></title>
    <link href="http://www.superqq.com/blog/2016/03/01/female-coder-dream-reply/"/>
    <updated>2016-03-01T23:16:18+08:00</updated>
    <id>http://www.superqq.com/blog/2016/03/01/female-coder-dream-reply</id>
    <content type="html"><![CDATA[<p>女程序员发的一条微博：</p>

<p>“昨晚梦见男朋友和别的女人在逛街，梦里我的第一反应就是查源代码，结果调试半天查不出来为什么显示的那个女人不是我，最后含泪把那个女人注释掉了，再一运行就是我男朋友自己逛街了。”
众网友的神回复：</p>

<p>1、把那个女人的指针指向你即可； (:з」∠)</p>

<p>2、谁让你把男朋友设成public的？；Σ(っ °Д °;)っ</p>

<p>3、加个断点看看那女人是谁； (ಡωಡ)</p>

<p>4、心真软，就应该把他的接口屏蔽掉； (눈_눈)</p>

<p>5、Protected逛街(youOnly)； (ง•̀_•́)ง</p>

<p>6、设计问题，应该采用单例模式； (๑•́ωก̀๑)</p>

<p>7、没做回归测试； ヽ( ￣д￣;)ノ</p>

<p>8、标准做法是做个断言； (๑•̀ㅂ•́) ✧</p>

<p>9、注释掉了，逛街的参数不用改吗？； (＠￣ー￣＠)</p>

<p>10、最后含泪把那个女人给注释掉了，再一运行就是我男朋友自己逛街了—>很明显是变量名作用域的问题，改个名就行了(๑•̀ㅂ•́) ✧</p>

<p>11、还可以有个多线程的算法，把你的优先级设成99，一个idle线程的优先级设成50，把那个女人的优先级设成49。酱紫就永远都调度不到啦 (๑•́ωก̀๑)</p>

<p>12、那也没关系，那就老调用那个女人。。。你BF放在那里不动。。。养着 (ಡωಡ)</p>

<p>13、上绝招，用goto，做个死循环，让他们逛死 (๑•̀ㅂ•́) ✧</p>

<p>14、善心点，别goto了，调用exit函数结束进程吧，冤冤相报何时了啊 ヽ( ￣д￣;)ノ</p>

<p>15、查一下Log，仅仅只有逛街吗？ԅ(¯ㅂ¯ԅ)</p>

<pre><code>来自：http://www.wtoutiao.com/p/Xa51bf.html
</code></pre>
]]></content>
  </entry>
  
</feed>
