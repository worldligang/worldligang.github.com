<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-07-12T20:33:52+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS开发之NSString的几条实用技巧]]></title>
    <link href="http://www.superqq.com/blog/2015/07/11/ioskai-fa-zhi-nsstringde-ji-tiao-shi-yong-ji-qiao/"/>
    <updated>2015-07-11T22:57:21+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/11/ioskai-fa-zhi-nsstringde-ji-tiao-shi-yong-ji-qiao</id>
    <content type="html"><![CDATA[<p>这两天上海台风“灿鸿”来袭，又是刮风，又是下雨。这雨已经连下好多天了，再不出太阳人都发霉了。不过无论再怎么样，也不要让天气破坏了心情。</p>

<p>台风来了，刚好我要走了。周六一大早5点就爬起来，雨下的不小，风也特别大。我是7点多的动车。从我家过去大概需要一个半小时的时间。所以得提前起来，省的匆匆忙忙。</p>

<h2>使用Uber的感受</h2>

<p>我还一直担心，这天气可能连车都打不到。抱着尝试的心态，我打开了Uber，为什么打开的是Uber，而不是滴滴，也不是快的呢。因为我的Uber上还有优惠劵，而且还有一个重要的原因，Uber上面的人民优步，不仅价格比出租车便宜，而且服务态度那也是相当好的。</p>

<p>看来我的担心是多余的。我打开Uber点了打车，不到10s，就有司机抢单成功。我连目的地都没有来得及输入，这也是滴滴和快的不具备的。这一点我觉得真的比较人性。因为很多司机都是看距离抢单的，Uber这样做估计就是杜绝这样的事情发生。</p>

<p>我并不说给Uber打广告的，再说了Uber也没给我钱。我之前一直用的都是滴滴和快的。我说的都是事实，大家可以自己尝试尝试。</p>

<p>写这篇文章时，我刚到郑州，在同学安顿的宾馆里。虽然奔波了一天，有些疲惫。还是要给大家准备一些NSString的小技巧。希望你能把iOS开发：<strong>iOSDevTip</strong> 介绍给更多你身边的朋友，这就是对我最大的支持。</p>

<h2>NSString的几条小技巧</h2>

<h3>创建字符串</h3>

<p><strong>常量字符串</strong></p>

<pre><code>NSString *string = @"i am an iOSDevTip!";
</code></pre>

<p><strong>常用创建方法</strong></p>

<pre><code>NSString *string = [[NSString alloc] init];

string = @"i am an iOSDevTip too!";
</code></pre>

<p><strong>用initWithString创建字符串</strong></p>

<pre><code>NSString *string = [[NSString alloc] initWithString:@"iOSDevTip is here!"];
</code></pre>

<h3>格式化创建字符串</h3>

<p><strong>int格式化字符串</strong></p>

<pre><code>int age = 20;
NSString *personAge = [NSString stringWithFormat:@"this person age is %d",age];
</code></pre>

<p>既然int格式化字符串，那么float、double等，也可以格式化字符串。</p>

<p><strong>NSString格式化字符串</strong></p>

<pre><code>NSString *name = @"iOSDevTip";
NSString *personName = [NSString stringWithFormat:@"this person name is %@",name];
</code></pre>

<h3>字符串比较</h3>

<p><strong>isEqualToString方法比较</strong></p>

<pre><code>//比较字符串
NSString *stingOne = @"This is an iOSDevTip!";
NSString *stringTwo = @"This is an iOSDevTip!";
BOOL result = [stingOne isEqualToString:stringTwo];
</code></pre>

<p><strong>compare方法比较</strong></p>

<pre><code>BOOL result = [stingOne compare:stringTwo] == NSOrderedSame;
</code></pre>

<p>compare:方法返回值类型为NSComparisonResult。而NSComparisonResult有下面几个枚举值。</p>

<pre><code>typedef NS_ENUM(NSInteger, NSComparisonResult) {NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending};
</code></pre>

<h3>字符串大小写转换</h3>

<p><strong>小写转大写</strong></p>

<pre><code> NSString *string = @"This is an iOSDevTip!";
[string lowercaseString];
</code></pre>

<p><strong>大写转小写</strong></p>

<pre><code>NSString *string = @"This is an iOSDevTip!";
[string uppercaseString];
</code></pre>

<h3>截取字符串</h3>

<p><strong>substringToIndex截取字符串</strong></p>

<pre><code>NSString *string = @"This is a operation string!";
NSString *subToString = [string substringToIndex:6];
</code></pre>

<p>截取的subToString为This i</p>

<p><strong>substringFromIndex截取字符串</strong></p>

<pre><code>NSString *subFromString = [string substringFromIndex:6];
</code></pre>

<p>截取的subFromString为s a operation string!</p>

<p><strong>substringWithRange截取字符串</strong></p>

<pre><code>NSString *rangeString = [string substringWithRange:NSMakeRange(6, 3)];
</code></pre>

<p>截取的rangeString为s a!</p>

<h3>判断字符串是否包含另一个字符串</h3>

<p><strong>rangeOfString判断</strong></p>

<pre><code>NSString *string1 = @"This is a iOSDevTip";
NSString *string2 = @"iOSDevTip";
NSRange range = [string1 rangeOfString:string2];
NSInteger location = range.location;
NSInteger leight = range.length;
NSString *logString = [[NSString alloc] initWithString:[NSString stringWithFormat:@"Location:%ld,Leight:%ld",location,leight]];
NSLog(@"logString:%@",logString);
</code></pre>

<p>打印出来：</p>

<pre><code>iOSStrongDemo[8837:2221170] logString:Location:10,Leight:9
</code></pre>

<p>如果Leight为0，说明不包含。还有更多关于NSString的用法，大家一起探索吧。代码下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之NSTimer使用初探]]></title>
    <link href="http://www.superqq.com/blog/2015/07/10/ioskai-fa-zhi-nstimershi-yong-chu-tan/"/>
    <updated>2015-07-10T23:21:44+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/10/ioskai-fa-zhi-nstimershi-yong-chu-tan</id>
    <content type="html"><![CDATA[<p>这个周日，我的大学同学结婚。他们的婚礼选在郑州举办。他不是郑州的，他女朋友也不是郑州的。但是他们是在郑州相识相爱，最终走到一起的，所以他们选择在郑州举办婚礼。</p>

<p>这几年大家都在各自忙碌着，很少有见面的机会。不过经常会电话联系，相互了解一下情况。</p>

<p>作为兄弟，我打心底为他们高兴，为他们祝福。我也会到现场参加，估计现在我已经坐上开发郑州的动车了。</p>

<p>我喜欢走出去的感觉，很喜欢坐车，去各个地方，哪怕是路过。<strong>感觉走的越远，离心越近。</strong>辞职去旅行也许很快就可以实现。</p>

<p>最近我在改一个bug，在一个UIViewController上有一个定时器，在执行轮播图片。push到别的UIViewController的时候，暂停定时器（NSTimer）；pop回来的时候，开启定时器（NSTimer）。这个bug是：push到别的UIViewController暂定定时器（NSTimer），有时候有作用，有时候没有作用。</p>

<p>开始我以为是NSTimer运行的run loop有问题，最后发现是别的地方导致这个bug的。不过正好，我们来一起了解一下NSTimer。</p>

<h2>创建一个定时器（NSTimer）</h2>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(actionTimer:) userInfo:nil repeats:YES];
}

- (void)actionTimer:(NSTimer *)timer
{

}
</code></pre>

<p>NSTimer默认运行在default mode下，default mode几乎包括所有输入源(除NSConnection) NSDefaultRunLoopMode模式。</p>

<p>actionTimer方法会每隔1s中被调用一次。NSTimer使用起来是不是非常简单。这是NSTimer比较初级的应用。</p>

<h2>当主界面被滑动时NSTimer失效了</h2>

<p>主界面被滑动是什么意思呢？就是说主界面有UITableView或者UIScrollView，滑动UITableView或者UIScrollView。这个时候NSTimer失效了。</p>

<p>我们来写一个demo，在一个有UITableView的UIViewController上启动定时器，每1s数字加1，并将这个数字显示在UILabel上面.</p>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(actionTimer:) userInfo:nil repeats:YES];
}

- (void)actionTimer:(NSTimer *)timer
{
    self.number++;
    self.label.text = [NSString stringWithFormat:@"%d",self.number];
    NSLog(@"%d",self.number);
}
</code></pre>

<p>关于UITableView和UILabel的创建我省去了。详细的代码可以点击这里下载：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a>，iOSStrongDemo我会不断更新，大家在github上star一下。</p>

<p>这样当用户在拖动UITableView处于UITrackingRunLoopMode时，NSTimer就失效了，不能fire。self.label上的数字也就无法更新。</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/timer1.gif" alt="nstimer1" /></p>

<h2>修改NSTimer的run loop</h2>

<p>解决方法就是将其加入到UITrackingRunLoopMode模式或NSRunLoopCommonModes模式中。</p>

<pre><code>[[NSRunLoop currentRunLoop] addTimer:timer forMode:UITrackingRunLoopMode];
</code></pre>

<p>或者</p>

<pre><code>[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];
</code></pre>

<p>NSRunLoopCommonModes：是一个模式集合，当绑定一个事件源到这个模式集合的时候就相当于绑定到了集合内的每一个模式。</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/timer2.gif" alt="nstimer1" /></p>

<p>代码下载地址：：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用UIDataDetectorTypes自动检测电话、网址和邮箱]]></title>
    <link href="http://www.superqq.com/blog/2015/07/09/shi-yong-uidatadetectortypeszi-dong-jian-ce-dian-hua-,-wang-zhi-he-you-xiang/"/>
    <updated>2015-07-09T23:43:39+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/09/shi-yong-uidatadetectortypeszi-dong-jian-ce-dian-hua-,-wang-zhi-he-you-xiang</id>
    <content type="html"><![CDATA[<p>支付宝发布最新版本9.0，再一次引发一场撕逼大战。微信说支付宝抄袭了它，支付宝说微信一直都在抄袭自己。在我看来，微信和支付宝都抄袭了对方。对于大佬们的抄袭，我们也是司空见惯了。</p>

<p>支付宝这一次更新，真是赚足了眼球，估计这也是支付宝的推广策略。就是要造势，造势有利于品牌推广。传播速度可想而知，似乎一夜之间都在谈论支付宝和微信。</p>

<p>至于支付宝和微信谁能打过谁，我们拭目以待。</p>

<p>上一篇文章<a href="http://www.superqq.com/blog/2015/07/08/uiwebviewyong-fa-xiang-jie/">UIWebView用法详解及代码分享</a>里面提到：</p>

<pre><code>webView.dataDetectorTypes = UIDataDetectorTypePhoneNumber;//自动检测网页上的电话号码，单击可以拨打
</code></pre>

<p>接下来我们来简单讲一下，使用UIDataDetectorTypes自动检测电话、网址和邮箱。我们先来看看UIDataDetectorTypes有哪些枚举值。</p>

<h2>UIDataDetectorTypes的枚举值</h2>

<pre><code>typedef NS_OPTIONS(NSUInteger, UIDataDetectorTypes) {
    UIDataDetectorTypePhoneNumber   = 1 &lt;&lt; 0,          // Phone number detection
    UIDataDetectorTypeLink          = 1 &lt;&lt; 1,          // URL detection    
#if __IPHONE_4_0 &lt;= __IPHONE_OS_VERSION_MAX_ALLOWED
    UIDataDetectorTypeAddress       = 1 &lt;&lt; 2,          // Street address detection
    UIDataDetectorTypeCalendarEvent = 1 &lt;&lt; 3,          // Event detection
#endif    

    UIDataDetectorTypeNone          = 0,               // No detection at all
    UIDataDetectorTypeAll           = NSUIntegerMax    // All types
};
</code></pre>

<p>NS_OPTIONS一般用来定义位移相关操作的枚举值。UIDataDetectorTypeAddress，UIDataDetectorTypeCalendarEvent不在我们考虑的范围了。</p>

<p>UIWebView有dataDetectorTypes属性，UITextView也有dataDetectorTypes属性。我们来UITextView来举例。</p>

<h2>创建UITextView</h2>

<pre><code>UITextView *textView = [[UITextView alloc] initWithFrame:self.view.bounds];
textView.font = [UIFont systemFontOfSize:20];
textView.editable = NO;
textView.text = @"\r\n我的手机号不是： 13888888888 \r\n\r\n"
"我的博客刚刚在线网址： www.xxxxxx.com \r\n\r\n"
"我的邮箱： worldligang@163.com \r\n\r\n";
[self.view addSubview:textView];
</code></pre>

<p>运行起来看一下：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/UIDataDetectorTypes1.jpeg" alt="UIDataDetectorTypes1" /></p>

<p>可以看出来就是一个简单的文本，电话号码，网址和邮箱都没有检测出来。下面我们来看看dataDetectorTypes作用。</p>

<h2>UIDataDetectorTypePhoneNumber检测电话</h2>

<pre><code>textView.dataDetectorTypes = UIDataDetectorTypePhoneNumber;
</code></pre>

<p>设置textView.dataDetectorTypes的属性，即可检测文本中的电话。效果如下所示：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/UIDataDetectorTypes2.jpeg" alt="UIDataDetectorTypes2" /></p>

<h2>UIDataDetectorTypeLink检测网址和邮箱</h2>

<pre><code>textView.dataDetectorTypes = UIDataDetectorTypeLink;
</code></pre>

<p>UIDataDetectorTypeLink检测网址和邮箱的。点击网址会跳转到相应的网页，点击邮箱可以调用系统的发邮件。</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/UIDataDetectorTypes3.jpeg" alt="UIDataDetectorTypes3" /></p>

<h2>UIDataDetectorTypeAll检测电话、网址和邮箱</h2>

<pre><code>textView.dataDetectorTypes = UIDataDetectorTypeAll;
</code></pre>

<p>UIDataDetectorTypeAll可以检测检测电话、网址和邮箱。效果如下：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/UIDataDetectorTypes4.jpeg" alt="UIDataDetectorTypes4" /></p>

<p>专门写了一个iOSStrongDemo以后都在这个iOSStrongDemo里面更新内容。下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebView用法详解及代码分享]]></title>
    <link href="http://www.superqq.com/blog/2015/07/08/uiwebviewyong-fa-xiang-jie/"/>
    <updated>2015-07-08T23:52:34+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/08/uiwebviewyong-fa-xiang-jie</id>
    <content type="html"><![CDATA[<p>今天加入一个QQ群，也算是一个圈子，群主的要求是满足他的三个条件。经过与群主的沟通，终于得到通过，顺利加入。</p>

<p>群主是一个93年的小伙，而且是河南的老乡。没想到小伙子这么有号召力。我也是偶然在我的空间发现他的，看他每天发的文章，还挺有意思。</p>

<p><strong>90后的小伙子都这么厉害了，有什么理由不努力奋斗呢！</strong>多加入以下圈子，认识一下身边的牛人。说不定会有意外的收获。</p>

<p>今天我们来详细UIWebView用法。UIWebView是iOS内置的浏览器控件，可以浏览网页、打开文档等 能够加载html/htm、pdf、docx、txt等格式的文件.</p>

<p>用UIWebView我们就可以做一个简易的浏览器。效果如下：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/webview1.png" alt="1" /></p>

<h2>创建UIWebView</h2>

<p>首先创建UIWebView，这个不难，设置frame，然后添加到self.view上即可：</p>

<pre><code>UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];
webView.scalesPageToFit = YES;//自动对页面进行缩放以适应屏幕
[self.view addSubview:webView];
</code></pre>

<h2>UIWebView加载网络地址</h2>

<p>用UIWebView来加载网络地址，那我的博客：<strong><a href="http://www.superqq.com">http://www.superqq.com</a></strong> 来举例。代码如下：</p>

<pre><code>NSURLRequest *request =[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.superqq.com"]];
[self.view addSubview:webView];
[webView loadRequest:request];
</code></pre>

<h2>UIWebView加载本地资源</h2>

<h3>通过NSURLRequest加载</h3>

<pre><code>NSString *path = [[NSBundle mainBundle] pathForResource:@"swift" ofType:@"html"];
NSURL* url = [NSURL   fileURLWithPath:path];//创建URL
NSURLRequest* request = [NSURLRequest requestWithURL:url];//创建NSURLRequest
[webView loadRequest:request];//加载
</code></pre>

<h3>通过NSString加载</h3>

<p>UIWebView 还支持将一个NSString对象作为源来加载。你可以为其提供一个基础URL，来指导UIWebView对象如何跟随链接和加载远程资源：</p>

<pre><code>NSString *path = [[NSBundle mainBundle] pathForResource:@"index" ofType:@"html"];
NSString *htmlString = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];
[webView loadHTMLString:htmlString baseURL:[NSURL URLWithString:path]];
</code></pre>

<h2>自动检测电话</h2>

<p>设置这个属性，如果在加载的网页中遇到电话号码，直接单击就可以拨打，非常方便：</p>

<pre><code>webView.dataDetectorTypes = UIDataDetectorTypePhoneNumber;//自动检测网页上的电话号码，单击可以拨打
</code></pre>

<h2>设置代理和代理方法</h2>

<p>UIWebView有五个代理方法，我们可以在不同的代理方法中，完成不同的需求。</p>

<pre><code>//设置代理
webView.delegate = self;

//代理方法
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
{
    //返回YES，进行加载。通过UIWebViewNavigationType可以得到请求发起的原因
    return YES;
}

- (void)webViewDidStartLoad:(UIWebView *)webView
{
    //开始加载，可以加上风火轮（也叫菊花）
}

- (void)webViewDidFinishLoad:(UIWebView *)webView
{
    //完成加载
}

- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error
{
    //加载出错
}
</code></pre>

<h2>创建加载他、停止、后退、前进按钮</h2>

<p>创建四个按钮，分别是加载按钮、停止按钮、返回按钮、前进按钮：</p>

<pre><code>NSArray *array = [NSArray arrayWithObjects:@"加载",@"停止",@"返回",@"前进", nil];
    int far = (SCREEN.width - 200)/5;
    for (int i = 0; i &lt; array.count; i++) {
        UIButton *button = [[UIButton alloc] init];
        button.frame = CGRectMake( (i + 1) * far + 50 * i, SCREEN.height - 60, 50, 40);
        button.tag = 200 + i;
        [button addTarget:self action:@selector(actionClick:) forControlEvents:UIControlEventTouchUpInside];
        [button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];
        [button setBackgroundColor:[UIColor orangeColor]];
        [button setTitle:array[i] forState:UIControlStateNormal];
        [self.view addSubview:button];
    }
</code></pre>

<h2>前进后退</h2>

<p>给四个按钮绑定事件，根据tag值来区分每一个点击事件：</p>

<pre><code>- (void)actionClick:(UIButton *)button
{
    switch (button.tag) {
        case 200:
        {
            [self.webView reload];//加载
        }
            break;
        case 201:
        {
            [self.webView stopLoading];//停止加载
        }
            break;
        case 202:
        {
            [self.webView goBack];//返回
        }
            break;
        case 203:
        {
            [self.webView goForward];//前进
        }
            break;
        default:
            break;
    }
}
</code></pre>

<p>大功告成，再来看看效果：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/webview2.png" alt="2" /></p>

<p>以上分享的内容我做了一个demo，需要的话可以点击这里下载：<a href="https://github.com/worldligang/UIWebViewDemo">UIWebView用法详解</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSLocale的重要性和用法简介]]></title>
    <link href="http://www.superqq.com/blog/2015/07/07/nslocalede-zhong-yao-xing-he-yong-fa-jian-jie/"/>
    <updated>2015-07-07T22:33:47+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/07/nslocalede-zhong-yao-xing-he-yong-fa-jian-jie</id>
    <content type="html"><![CDATA[<p>股票还在努力的往下跌，怎么办呢？我这真是杞人忧天啊。谁说我不着急呢？我的模拟炒股都亏的过半了吧。你想想那些真真炒股的人该有多担心。</p>

<p>罢了罢了，我还是滚去撸代码，消灭bug吧。</p>

<h2>上百万APP你用过几个？</h2>

<p>随着iPhone的日趋强盛，随着AppStore的不断壮大，海量的应用如潮水般涌来。据统计AppStore上的应用早已过120万，Google Play Store更是超于AppStore，达到150万。</p>

<p>知道120万、150万是什么概念吗？人生不过短短两三万天。也就是说，如果你一天用一个APP的话，AppStore够你用40辈子，Google Play Store够你用50辈子，前提是，你必须生下来就开始玩手机。</p>

<p>这么多应用，不知道有没有你的贡献。估计正在看文章的你也贡献了好几个了吧。AppStore里面也有我的贡献。😊</p>

<p>开发一个APP不是那么容易的一件事，有很多坑等着你去踩。今天我们就抛出一个格式化时间的坑。</p>

<h2>NSDateFormatter格式化时间</h2>

<p>之前的文章，讲到过：<a href="http://www.superqq.com/blog/2015/06/26/nsdatehe-nsstringxiang-hu-zhuan-huan/">NSDate和NSString相互转换</a>。里面提到过如何讲NSDate转化成NSString。代码如下：</p>

<pre><code>//获取系统当前时间
NSDate *currentDate = [NSDate date];
//用于格式化NSDate对象
NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
//设置格式：zzz表示时区
[dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss zzz"];
//NSDate转NSString
NSString *currentDateString = [dateFormatter stringFromDate:currentDate];
//输出currentDateString
NSLog(@"%@",currentDateString);
</code></pre>

<p>运行起来，看看打印的内容：</p>

<pre><code>2015-07-07 22:08:57.422 TestDemo[6756:1555205] 2015-07-07 22:08:57
</code></pre>

<p>这样写是不是没有什么问题。看着应该是没什么问题，其实问题很大。但是如果你改一下系统设置：语言设置成印度尼西亚文，时间设置成12小时制。</p>

<p>大家应该知道如何去设置吧，不会设置的请不要告诉我你是一名<a href="http://www.superqq.com/blog/2015/06/25/ru-he-cheng-wei-%5B%3F%5D-ming-you-xiu-de-ioskai-fa-gong-cheng-shi/">iOS开发工程师</a>。再次编译起来，看看打印内容如下：</p>

<pre><code>2015-07-07 22:09:14.928 TestDemo[6762:1555466] 2015-07-07 10.09.14 PM
</code></pre>

<p>是不是愣住了，怎么会这么奇葩，时间怎么是.呢？还有更奇葩的呢，你去设置设置其他语言试试，也许有更多的收获。</p>

<h2>如何正确的格式化时间</h2>

<p>这也是我们这两天遇到的问题，跟用户几经沟通之后，终于抓到log，发现问题竟然是格式化导致的。怎么解决呢？</p>

<p>这个时候NSLocale的重要性就体现出来了。NSLocale作为大家都不常用的一个类，NSLocale类是将与国家和语言相关的信息进行简单的组合，包括货币、语言、国家等的信息。</p>

<p>所以很简单，我们把dateFormatter的locale属性改一下即可解决这个问题。将下面代码放在dateFormatter初始化之后：</p>

<pre><code>NSLocale *usLocale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US"];
dateFormatter.locale = usLocale;
</code></pre>

<p>看看问题解决没有，编译一下：</p>

<pre><code>2015-07-07 22:20:08.411 TestDemo[6769:1556968] 2015-07-07 22:20:08
</code></pre>

<p>果然，问题得到完美解决了。</p>

<h2>NSLocale用法简介</h2>

<h3>获取国家、货币、语言地区编码</h3>

<p>既然谈到NSLocale，我们就来简单了解一下：</p>

<pre><code>+ ISOCountryCodes// 所有的ISO定义的国家地区编码
+ ISOCurrencyCodes// 所有的ISO定义的货币编码
+ ISOLanguageCodes// 所有ISO定义的语言编码
</code></pre>

<p>以上我们可以用NSLog打印出来看一看。</p>

<h3>监听用户本地化的设置信息</h3>

<pre><code>FOUNDATION_EXPORT NSString * const NSCurrentLocaleDidChangeNotification NS_AVAILABLE(10_5, 2_0);
</code></pre>

<h3>获取当前系统设置语言的标识符</h3>

<pre><code>[[NSLocale currentLocale] localeIdentifier];
</code></pre>

<p>还有很多关于NSLocale的用法，自己动手多尝试。还有一个小问题。</p>

<h2>NSLocale怎么读？</h2>

<p>看了这么久的NSLocale了，你知道NSLocale怎么读吗？不要翻译噢，看看你读的到底对不对？</p>
]]></content>
  </entry>
  
</feed>
