<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-07-22T15:37:20+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS开发之获取沙盒路径]]></title>
    <link href="http://www.superqq.com/blog/2015/07/22/ioskai-fa-zhi-huo-qu-sha-he-lu-jing/"/>
    <updated>2015-07-22T01:02:41+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/22/ioskai-fa-zhi-huo-qu-sha-he-lu-jing</id>
    <content type="html"><![CDATA[<p><a href="http://www.superqq.com/blog/2015/07/20/ioskai-fa-zhi-sha-he-ji-zhi-%28sandbox/">iOS开发之沙盒机制（SandBox)</a>详细讲解了沙盒的一些机制。在开发中，我们需要对沙盒进行操作，所以我们需要获取到沙盒路径。</p>

<p>沙盒里的文件夹包括Documents、Library、tmp。这三个文件夹的作用请点击<a href="http://www.superqq.com/blog/2015/07/20/ioskai-fa-zhi-sha-he-ji-zhi-%28sandbox/">这里</a>。接下来我们来讲解如何获取Documents、Library、tmp的路径。</p>

<h3>获取沙盒根目录</h3>

<p>获取沙盒根目录，直接调用NSHomeDirectory()：</p>

<pre><code>//获取沙盒根目录
NSString *directory = NSHomeDirectory();
NSLog(@"directory:%@", directory);
</code></pre>

<p>控制台输出：</p>

<pre><code>2015-07-22 00:40:16.185 iOSStrongDemo[1605:555658] directory:/var/mobile/Containers/Data/Application/F9418815-51A9-4A0A-A76C-6FD37C400928
</code></pre>

<p>这个是真机的路径，大家有时间的话可以看看模拟器的根目录路径。</p>

<h3>获取Documents路径</h3>

<p>获取Documents路径如下：</p>

<pre><code>//获取Documents路径
NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString *path = [paths objectAtIndex:0];
NSLog(@"path:%@", path);
</code></pre>

<p>控制台输出：</p>

<pre><code>2015-07-22 00:41:41.397 iOSStrongDemo[1613:556159] path:/var/mobile/Containers/Data/Application/A62B886B-A8F0-4215-B59D-1F505C3997BD/Documents
</code></pre>

<p>获取Documents文件夹目录,第一个参数是说明获取Doucments文件夹目录，第二个参数说明是在当前应用沙盒中获取。</p>

<h3>获取Library路径</h3>

<pre><code>//获取Library路径
NSArray *paths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);
NSString *path = [paths objectAtIndex:0];
NSLog(@"path：%@", path);
</code></pre>

<p>控制台输出：</p>

<pre><code>2015-07-22 00:43:15.803 iOSStrongDemo[1619:556638] /var/mobile/Containers/Data/Application/17300507-4643-4DE7-BC68-E13DB19C8D98/Library
</code></pre>

<h3>获取Caches路径</h3>

<pre><code>//获取Caches路径
NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
NSString *path = [paths objectAtIndex:0];
NSLog(@"path：%@", path);
</code></pre>

<p>控制台输出：</p>

<pre><code>2015-07-22 00:44:31.383 iOSStrongDemo[1626:557083] path：/var/mobile/Containers/Data/Application/1E945B52-E29D-4041-A489-1AA1B11BB960/Library/Caches
</code></pre>

<h3>获取tmp路径</h3>

<pre><code>NSString *tmp = NSTemporaryDirectory();
NSLog(@"tmp：%@", tmp);
</code></pre>

<p>控制台输出：</p>

<pre><code>2015-07-22 00:46:07.846 iOSStrongDemo[1632:557537] tmp：/private/var/mobile/Containers/Data/Application/4BE02307-1CC5-47E8-BEA8-CEBB7ED5A402/tmp/
</code></pre>

<p>以上是iOS开发中获取沙盒路径的方法，也许还有更好的获取方法等待我们去发现。后面我们还会讲到关于在沙盒里进行读写文件操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[报错：failed to Get the Task for Process 1285（解决方案）]]></title>
    <link href="http://www.superqq.com/blog/2015/07/21/bao-cuo-:process-launch-failed-failed-to-get-the-task-for-process-1285(jie-jue-fang-an-)/"/>
    <updated>2015-07-21T00:16:31+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/21/bao-cuo-:process-launch-failed-failed-to-get-the-task-for-process-1285(jie-jue-fang-an-)</id>
    <content type="html"><![CDATA[<h2>你遇到的问题别人也遇到过</h2>

<p>初接触iOS开发的童鞋估计会被真机调试搞的稀里糊涂的。在模拟器上运行什么问题没有，真机调试就会碰到各种各样的问题。</p>

<p>不用担心。记住：你碰到的问题别人肯定都已经碰到过了。我们不是有百度和谷歌嘛，把你的问题描述出来，一定有解决方案的。还可以在<a href="http://zhannei.superqq.com/">刚刚在线站内搜索</a>里搜索，说不定也能帮你解决不少问题呢。</p>

<p>我会经常把自己开发过程中碰到的调试问题，一一总结出来。一来是帮助自己在下一次碰到同样问题时，可以游刃有余。二来是帮助大家再碰到类似问题的时候，有一个参考的作用。</p>

<h2>failed to get the task for process 1285</h2>

<p>这一次碰到的问题是这样的：模拟器上运行正常。我在iPhone 6上运行，程序编译正常，但是跑起来之后，大概一两秒的时间，就闪退（代码是没有问题的）。这个时候，Xcode6.4弹出这样的提示：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/fixbug12850.jpg" alt="fixbug1285" /></p>

<pre><code>Could not launch “iOSStrongDemo”
process launch failed: failed to get the task for process 1285
</code></pre>

<h2>错误分析</h2>

<p>我看了一下Build Settings里的Code Signing配置，发现Provisioning Profile选择的是XC Ad Hoc: *。如下图所示：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/fixbug.jpg" alt="fixbug" /></p>

<p>Ad Hoc是用来实现发布前的用户测试的，也就是通过Ad Hoc将未发布的App给其他人提前使用。显然这是不对的，我们是要真机调试。</p>

<h2>解决方案</h2>

<p>解决方法很简单，将Provisioning Profile换成用开发证书创建的Provisioning Profile即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之沙盒机制（SandBox)]]></title>
    <link href="http://www.superqq.com/blog/2015/07/20/ioskai-fa-zhi-sha-he-ji-zhi-(sandbox/"/>
    <updated>2015-07-20T00:36:13+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/20/ioskai-fa-zhi-sha-he-ji-zhi-(sandbox</id>
    <content type="html"><![CDATA[<p>iOS APP可以在自己的沙盒里读写文件，但是，不可以访问其他APP的沙盒。每一个APP都是一个信息孤岛，相互是不可以进行通信的，唯独可以通过<a href="http://www.superqq.com/blog/2015/07/14/xcode6-dot-4zhu-ce-url-schemebu-zou-xiang-jie/">URL Scheme</a>。沙盒里面的文件可以是照片、声音文件、文本、属性列表等。</p>

<h2>沙盒机制简介</h2>

<p><strong>沙盒简述：</strong></p>

<ol>
<li>每一个APP都有一个存储空间，就是沙盒。</li>
<li>APP之间不能相互通信。</li>
<li>沙盒根目录结构：Documents、Library、temp。</li>
</ol>


<p>简述一下Documents、Library、tmp的区别：</p>

<ol>
<li><strong>Documents：</strong>用于存储用户数据，iTunes备份和恢复的时候会包括此目录，所以，苹果建议将程序中建立的或在程序中浏览到的文件数据保存在该目录下。</li>
<li><strong>Library：</strong>包含两个子目录：Caches 和 Preferences。Caches用来存放用户需要换成的文件。Preferences是APP的偏好设置，可以通过NSUserDefaults来读取和设置。</li>
<li><strong>tmp：</strong> 用于存放临时文件，这个可以放一些当APP退出后不再需要的文件。</li>
</ol>


<h2>打开模拟器沙盒方法</h2>

<p><strong>方法一：前往文件夹打开</strong></p>

<pre><code>/Users/ligang/Library/Application Support/iPhone Simulator/ 
</code></pre>

<p>直接在Finder->前往->前往文件夹，输入上面的内容即可。记住将ligang换成你的电脑用户名。</p>

<p><strong>方法二：通过Finder一步步查找</strong></p>

<p>模拟器上的APP的沙盒实在用户目录下的资源库里面，但是资源库是隐藏文件夹。所以查看沙盒之前，现将隐藏文件夹显示出来。显示隐藏文件的命令：</p>

<pre><code>defaults write com.apple.finder AppleShowAllFiles -bool true
</code></pre>

<p>用心的童鞋会发现，隐藏隐藏文件的命令：</p>

<pre><code>defaults write com.apple.finder AppleShowAllFiles -bool false
</code></pre>

<p>查找步骤请看图：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/sandbox.jpg" alt="sandbox" /></p>

<p>关于沙盒机制（SandBox)的介绍大概就是这样，以后面试的时候万一碰到你就可以这么回答。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSString的八条实用技巧]]></title>
    <link href="http://www.superqq.com/blog/2015/07/16/nsstringde-ba-tiao-shi-yong-ji-qiao/"/>
    <updated>2015-07-16T23:07:57+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/16/nsstringde-ba-tiao-shi-yong-ji-qiao</id>
    <content type="html"><![CDATA[<p>有一篇文章写了：<a href="http://www.superqq.com/blog/2015/07/11/ioskai-fa-zhi-nsstringde-ji-tiao-shi-yong-ji-qiao/">iOS开发之NSString的几条实用技巧</a> ， 今天这篇，我们讲讲NSString的八条实用技巧。大家可以收藏起来，方便开发随时可以复制粘贴。</p>

<h2>0.首字母大写</h2>

<p>代码：</p>

<pre><code>//首字母大写
NSString *string = @"ligang";
NSLog(@"string: %@",[string capitalizedString]);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 23:06:11.652 iOSStrongDemo[10279:3062010] string: Ligang
</code></pre>

<h2>1.分割字符串</h2>

<p>代码：</p>

<pre><code>//分割字符串
NSString *string = @"This is a iOSDevTip";
NSArray *array = [string componentsSeparatedByString:@"a"];
NSString *string1 = [array objectAtIndex:0];
NSString *string2 = [array objectAtIndex:1];
NSLog(@"string1:%@  string2:%@",string1,string2);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:40:39.559 iOSStrongDemo[10165:3055448] string1:This is   string2: iOSDevTip
</code></pre>

<h2>2.追加字符串</h2>

<p>代码：</p>

<pre><code>//追加字符串
NSMutableString *string = [[NSMutableString alloc] initWithString:@"I Love "];
[string appendString:@"China"];
NSLog(@"string:%@",string);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:42:32.305 iOSStrongDemo[10189:3056410] string:I Love China
</code></pre>

<h2>3.插入字符串</h2>

<p>代码：</p>

<pre><code>//插入字符串
NSMutableString *string = [[NSMutableString alloc] initWithString:@"I China"];
[string insertString:@"Love " atIndex:2];
NSLog(@"string: %@",string);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:44:10.706 iOSStrongDemo[10206:3057014] string: I Love China
</code></pre>

<h2>4.删除字符串</h2>

<p>代码：</p>

<pre><code>//删除字符串
NSMutableString *string = [[NSMutableString alloc] initWithString:@"I love China"];
[string deleteCharactersInRange:NSMakeRange(2, 4)];
NSLog(@"String1: %@",string);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:46:58.437 iOSStrongDemo[10219:3057749] String1: I  China
</code></pre>

<h2>5.判断是否包含前后缀</h2>

<p>代码：</p>

<pre><code>//判断是否包含前后缀
NSString *string = @"I love China";
BOOL isHasI = [string hasPrefix:@"I"];
BOOL isHasChina = [string hasSuffix:@"China"];
</code></pre>

<h2>6.替换字符串</h2>

<p>代码：</p>

<pre><code>//替换字符串
NSString *string = @"I love China";
NSString *replaceString = [string stringByReplacingOccurrencesOfString:@"love" withString:@"like"];
NSLog(@"replaceString:  %@",replaceString);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:56:07.405 iOSStrongDemo[10236:3059503] replaceString:  I like China
</code></pre>

<h2>7.去除字符串首尾的空格和换行符</h2>

<p>代码：</p>

<pre><code>//去除字符串首尾的空格和换行符
NSString *string = @" I love China ";
NSString *text = [string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
NSLog(@"text:%@",text);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 23:00:47.845 iOSStrongDemo[10265:3061013] text:I love China
</code></pre>

<p>代码已经更新，demo下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过URL Scheme传递参数]]></title>
    <link href="http://www.superqq.com/blog/2015/07/15/tong-guo-url-schemechuan-di-can-shu/"/>
    <updated>2015-07-15T22:50:21+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/15/tong-guo-url-schemechuan-di-can-shu</id>
    <content type="html"><![CDATA[<p>有这么一个段子特别火：实体店终于翻身了，他们用铁一样的事实告诉淘宝和京东，互联网+再牛逼也干不过实体店。你再便宜，你有试衣间吗？百年修得同船渡，千年修得优衣库。众里寻他千百度，三里屯优衣库。最美的不是下雨天，而是和你在试衣间。</p>

<p>优衣库火了，你的朋友圈有没有被优衣库刷屏呀？据说还有视频传出来，各种版本的。有人竟然从我要视频，我是给还是不给呢？不知道优衣库的童鞋，赶紧百度一下吧！</p>

<h2>这会是优衣库的炒作吗？</h2>

<p>优衣库事件让优衣库狠狠的火了一把。不禁发问：这会是优衣库的炒作吗？不得而知。事件一经各大媒体报道出来之后，优衣库立刻发出声明。此事和我们没有半毛钱关系。</p>

<p>如果这真是一次炒作。那么优衣库的营销未免太低俗了，这将会大大降低优衣库在消费者心里的地位。以后来优衣库的人可能不是买衣服而是约炮。</p>

<p>如果这不是一次炒作。那么，这段视频上传的目的是什么呢？是男女主角想借此出名吗？可能性不是特别高，借此出名有什么好的呢！真正的目的也许只有当事人心里最清楚。</p>

<p>我问了北京的朋友，是否知道优衣库事件。朋友说，何止知道，天天从那里路过。现在有很多人在那里合影呢，三里屯优衣库俨然成了一个景点。</p>

<p><strong>热点总是一时的，借此炒作的人或许已达成目的。</strong>作为一名iOS开发程序员，我们只能继续写代码，改变世界。</p>

<p>上一篇文章讲到：<a href="http://www.superqq.com/blog/2015/07/14/xcode6-dot-4zhu-ce-url-schemebu-zou-xiang-jie/">Xcode6.4注册URL Scheme步骤详解</a>，这一篇继续来看看URL Scheme传递参数。</p>

<h2>通过注册的URL Scheme向目标APP传递参数</h2>

<p>通过URL Scheme启动APP很简单就可以做到，但有时候我们想在启动APP的时候传递一些参数，这个时候我们就可以通过URL Scheme自定义URL来传递参数了。</p>

<p>昨天我们在AppDelegate调用了UIApplicationDelegate的代理方法：</p>

<pre><code>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL*)url
{
    // 接受传过来的参数
    NSString *text = [[url host] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"打开啦"
                                           message:text
                                          delegate:nil
                                 cancelButtonTitle:@"OK"
                                 otherButtonTitles:nil];
    [alertView show];
    return YES;
}
</code></pre>

<p>我们来看看苹果给这个方法的注释：</p>

<pre><code>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url;  // Will be deprecated at some point, please replace with application:openURL:sourceApplication:annotation:
</code></pre>

<p>这个方法在未来将被废弃，可以用application:openURL:sourceApplication:annotation:来代替。</p>

<h2>URL传参格式</h2>

<p>昨天我们在<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a>注册的URL Scheme还记得是什么吗？你应该还有印象的就是iOS开发的ID：<strong>iOSDevTip</strong>。</p>

<p>假设我们想要传递两个参数分别是名字name和手机号phone，格式如下：</p>

<pre><code>iOSDevTip://?name=ligang&amp;phone=13888888888
</code></pre>

<p>有没有似曾相识的感觉。我们用get方式请求一个接口是不是就是这样的。</p>

<h2>被启动的APP处理传过来的参数</h2>

<pre><code>- (BOOL)application:(UIApplication *)application
        openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation
{
    NSLog(@"sourceApplication: %@", sourceApplication);
    NSLog(@"URL scheme:%@", [url scheme]);
    NSLog(@"URL query: %@", [url query]);

    // 接受传过来的参数
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"打开啦"
                                                        message:[url query]
                                                       delegate:nil
                                              cancelButtonTitle:@"OK"
                                              otherButtonTitles:nil];
    [alertView show];

    return YES;
}
</code></pre>

<p>当APP被启动是，会调用代理方法application:openURL:sourceApplication:annotation:。参数URL就是启动APP的URL，参数sourceApplication就是来源APP的Bundle ID。</p>

<p>我们依然通过Safari来测试，在Safari的地址栏中输入：iOSDevTip://?name=ligang&amp;phone=13888888888</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/scheme1.png" alt="scheme1" /></p>

<p>即可打开APP,看看参数是否传递过来：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/scheme2.png" alt="scheme2" /></p>

<p>最后我们看一下打印：</p>

<pre><code>2015-07-15 22:38:25.655 iOSStrongDemo[9983:2894855] sourceApplication: com.apple.mobilesafari
2015-07-15 22:38:28.664 iOSStrongDemo[9983:2894855] URL scheme:iosdevtip
2015-07-15 22:38:28.665 iOSStrongDemo[9983:2894855] URL query: name=ligang&amp;phone=13888888888
</code></pre>

<p>sourceApplication打印出来是com.apple.mobilesafari，从这里可以看出来，是从Safari启动我们的APP的。</p>

<p>我们虽然自定义了URL Scheme，但是我们不能阻止别人通过自定义的URL Scheme来打开我们的应用。怎么解决呢？</p>

<p>我们可以指定相应的sourceApplication，也就是相应的Bundle ID，通过Bundle ID来决定是否可以打开我们的APP：</p>

<pre><code>- (BOOL)application:(UIApplication *)application
        openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation
{
    NSLog(@"sourceApplication: %@", sourceApplication);
    NSLog(@"URL scheme:%@", [url scheme]);
    NSLog(@"URL query: %@", [url query]);

    if ([sourceApplication isEqualToString:@"com.3Sixty.CallCustomURL"]){
        // 接受传过来的参数
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"打开啦"
                                                            message:[url query]
                                                           delegate:nil
                                                  cancelButtonTitle:@"OK"
                                                  otherButtonTitles:nil];
        [alertView show];

        return YES;
    }else{
        return NO;
    }

}
</code></pre>

<p>这样我们就可以通过Bundle ID来决定是否允许打开我们的APP，demo下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
</feed>
