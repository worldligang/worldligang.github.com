<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://worldligang.github.io/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://worldligang.github.io/"/>
  <updated>2015-03-11T18:52:02+08:00</updated>
  <id>http://worldligang.github.io/</id>
  <author>
    <name><![CDATA[刚刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS开发下载文件速度计算]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/29/ioskai-fa-xia-zai-wen-jian-su-du-ji-suan/"/>
    <updated>2015-01-29T10:40:38+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/29/ioskai-fa-xia-zai-wen-jian-su-du-ji-suan</id>
    <content type="html"><![CDATA[<p>当我们写下载界面的时候，需要向用户展示每秒下载多少KB，这个时候就需要计算速度。如下：</p>

<p><img src="http://mmbiz.qpic.cn/mmbiz/8RTSPr4mlykfVEtYcoETGMzCaNgWWfvvjjxmJYIj9ibjNHHmn7f1oOTgEbcTstj44G2EjdqRjeMxSqdJfVaAibPA/640" /></a></p>

<p>我用的是AFNetworking来做下载的，我们拿AFHTTPRequestOperation来举列，AFHTTPRequestOperation中有个方法：</p>

<pre><code>- (void)setDownloadProgressBlock:(void (^)(NSUInteger bytesRead, long long totalBytesRead, long long totalBytesExpectedToRead))block
</code></pre>

<p>这个方法读取导数据之后通过block回调。计算速度就是在这个block里面完成的。</p>

<p>需要定义一个下载对象：DownTask。DownTask需要有的属性：totalRead（一秒读取的数据）、speed（速度）、date（记录上一秒计算之后的时间）。注意：这里的一秒不是严格意义上的一秒，有可能大于一秒，我们计算的是平均速度，所以不会误差太大。</p>

<pre><code>        //计算一秒中的速度
        downTask.totalRead += bytesRead;

        //获取当前时间
        NSDate *currentDate = [NSDate date];

        //当前时间和上一秒时间做对比，大于等于一秒就去计算
        if ([currentDate timeIntervalSinceDate:downTask.date] &gt;= 1) {
            //时间差
            double time = [currentDate timeIntervalSinceDate:downTask.date];

            //计算速度
            long long speed = downTask.total/time;

            //把速度转成KB或M
            downTask.speed = [downTask formatByteCount:speed];

            //维护变量，将计算过的清零
            downTask.totalRead = 0.0;

            //维护变量，记录这次计算的时间

            downTask.date = currentDate;
</code></pre>

<p>其中， downTask.speed = [downTask formatByteCount:speed];是用来将字节转化成我们需要的KB或M。用到的是：NSByteCountFormatter，具体实现如下：</p>

<pre><code>- (NSString*)formatByteCount:(long long)size
{
    return [NSByteCountFormatter stringFromByteCount:size countStyle:NSByteCountFormatterCountStyleFile];
}
</code></pre>

<p>这个方法是放在下载对象DownTask里面的。</p>

<p>以上就是我计算下载速度的方法。希望能给你带来帮助。</p>

<p>更多iOS开发相关技术请关注iOS开发微信公众号 iOS开发 ：</p>

<pre><code>iOSDevTip
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/22/jie-jue-mwphotobrowserzhong-de-sdwebimagejia-zai-da-tu-dao-zhi-de-nei-cun-jing-gao-wen-ti/"/>
    <updated>2015-01-22T11:23:21+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/22/jie-jue-mwphotobrowserzhong-de-sdwebimagejia-zai-da-tu-dao-zhi-de-nei-cun-jing-gao-wen-ti</id>
    <content type="html"><![CDATA[<p>MWPhotoBrowser是一个非常不错的照片浏览器，在github的star接近3000个，<a href="https://github.com/mwaterfall/MWPhotoBrowser.git"target="_blank"title="进入官网">MWPhotoBrowser下载</a></p>

<p>MWPhotoBrowser来加载小图1M以下的都应该不会有内存警告的问题。如果遇到大图，3M、4M、5M的大图，很有可能导致内存警告。最近我就遇到这个问题，很是头疼。来回滑动查看照片内存飙到100M以上：</p>

<p><img src="http://mmbiz.qpic.cn/mmbiz/8RTSPr4mlykHge8gs1dCibkoTYXiatCCTMGicKA3aLRCFW6HzgMFvlzGiagwGrEN6hSw6Lt8y13WuFZORDic4hWbRsg/640" /></a></p>

<p>网上查了很多资料，都没有解决问题。</p>

<p>我们来看一下MWPhotoBrowser，其实MWPhotoBrowser用的是SDWebImage来下载图片的。<a href=" https://github.com/rs/SDWebImage.git"target="_blank"title="进入官网">SDWebImage下载</a></p>

<p>在github看到SDWebImage的介绍，后面说到：</p>

<pre><code>Future Enhancements

    LRU memory cache cleanup instead of reset on memory warning
</code></pre>

<p>看到这个真是欲哭无泪啊。</p>

<p>再去看看SDWebImage的，有个人提问了：</p>

<pre><code>How to disable "memory cache"?  I don't want memory cache,  it used a lot of memory and got memory waring easily,  disk is enough for me...
</code></pre>

<p>有人回答：</p>

<pre><code>There is no way to disable the memory cache. But the cache is designed to flush itself when you get a memory warning, so you shouldn't need to worry it.
</code></pre>

<p>说的是SDWebImage遇到内存警告会自动释放内存，但是这还是解决不了问题，加载大图的时候，内存会突然蹦到100多M，在4s及以下的手机上跑，再就挂了。</p>

<p>还是没有解决内存警告的问题。怎么办呢？</p>

<p>我是这么解决的：</p>

<p>SDWebImage有一个SDWebImageDownloaderOperation类来执行下载操作的。里面有个下载完成的方法：</p>

<pre><code>- (void)connectionDidFinishLoading:(NSURLConnection *)aConnection {
   SDWebImageDownloaderCompletedBlock completionBlock = self.completedBlock;
   @synchronized(self) {
       CFRunLoopStop(CFRunLoopGetCurrent());
       self.thread = nil;
       self.connection = nil;
       [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:nil];
   }

   if (![[NSURLCache sharedURLCache] cachedResponseForRequest:_request]) {
       responseFromCached = NO;
   }

   if (completionBlock)
   {
       if (self.options &amp; SDWebImageDownloaderIgnoreCachedResponse &amp;&amp; responseFromCached) {
           completionBlock(nil, nil, nil, YES);
       }
       else {
           UIImage *image = [UIImage sd_imageWithData:self.imageData];
           NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:self.request.URL];
           image = [self scaledImageForKey:key image:image];

           // Do not force decoding animated GIFs
           if (!image.images) {
               image = [UIImage decodedImageWithImage:image];
           }
           if (CGSizeEqualToSize(image.size, CGSizeZero)) {
               completionBlock(nil, nil, [NSError errorWithDomain:@"SDWebImageErrorDomain" code:0 userInfo:@{NSLocalizedDescriptionKey : @"Downloaded image has 0 pixels"}], YES);
           }
           else {
               completionBlock(image, self.imageData, nil, YES);
           }
       }
   }
   self.completionBlock = nil;
   [self done];
}
</code></pre>

<p>其中，UIImage *image = [UIImage sd_imageWithData:self.imageData];就是将data转换成image。</p>

<p>再看看sd_imageWithData:这个方法：</p>

<pre><code>+ (UIImage *)sd_imageWithData:(NSData *)data {
   UIImage *image;
   NSString *imageContentType = [NSData sd_contentTypeForImageData:data];
   if ([imageContentType isEqualToString:@"image/gif"]) {
       image = [UIImage sd_animatedGIFWithData:data];
   }
#ifdef SD_WEBP
   else if ([imageContentType isEqualToString:@"image/webp"])
   {
       image = [UIImage sd_imageWithWebPData:data];
   }
#endif
   else {
       image = [[UIImage alloc] initWithData:data];
       UIImageOrientation orientation = [self sd_imageOrientationFromImageData:data];
       if (orientation != UIImageOrientationUp) {
           image = [UIImage imageWithCGImage:image.CGImage
                                       scale:image.scale
                                 orientation:orientation];
       }
   }


   return image;
}
</code></pre>

<p>这个方法在UIImage+MultiFormat里面，是UIImage的一个类别处理。这句话很重要image = [[UIImage alloc] initWithData:data]; SDWebImage把下载下来的data直接转成image，然后没做等比缩放直接存起来使用。所以，我们只需要在这边做处理即可：</p>

<p>UIImage+MultiFormat添加一个方法：</p>

<pre><code>+(UIImage *)compressImageWith:(UIImage *)image
{
   float imageWidth = image.size.width;
   float imageHeight = image.size.height;
   float width = 640;
   float height = image.size.height/(image.size.width/width);

   float widthScale = imageWidth /width;
   float heightScale = imageHeight /height;

   // 创建一个bitmap的context
   // 并把它设置成为当前正在使用的context
   UIGraphicsBeginImageContext(CGSizeMake(width, height));

   if (widthScale &gt; heightScale) {
       [image drawInRect:CGRectMake(0, 0, imageWidth /heightScale , height)];
   }
   else {
       [image drawInRect:CGRectMake(0, 0, width , imageHeight /widthScale)];
   }

   // 从当前context中创建一个改变大小后的图片
   UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
   // 使当前的context出堆栈
   UIGraphicsEndImageContext();

   return newImage;

}
</code></pre>

<p>然后在：image = [[UIImage alloc] initWithData:data];下面调用以下：</p>

<pre><code>if (data.length/1024 &gt; 1024) {
           image = [self compressImageWith:image];
       }
</code></pre>

<p>当data大于1M的时候做压缩处理。革命尚未成功，还需要一步处理。在SDWebImageDownloaderOperation的connectionDidFinishLoading方法里面的：</p>

<pre><code>  UIImage *image = [UIImage sd_imageWithData:self.imageData];

  //将等比压缩过的image在赋在转成data赋给self.imageData
  NSData *data = UIImageJPEGRepresentation(image, 1);
  self.imageData =  [NSMutableData dataWithData:data];
</code></pre>

<p>大工告成，我们来看一下效果吧：</p>

<p><img src="http://mmbiz.qpic.cn/mmbiz/8RTSPr4mlykHge8gs1dCibkoTYXiatCCTMekY5MbfNibjW49ibygpHP440kOuxIVngeEXZLnYCUlSfIhW61x7T6OHQ/640" /></a>
​</p>

<p>果然问题得以解决。</p>

<p>更多iOS开发相关技术请关注iOS开发微信公众号 iOS开发 ：</p>

<pre><code>iOSDevTip
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之UISearchBar初探]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/19/ioskai-fa-zhi-uisearchbarchu-tan/"/>
    <updated>2015-01-19T09:56:52+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/19/ioskai-fa-zhi-uisearchbarchu-tan</id>
    <content type="html"><![CDATA[<p>UISearchBar也是iOS开发常用控件之一，点进去看看里面的属性barStyle、text、placeholder等等。但是这些属性显然不足矣满足我们的开发需求。比如：修改placeholder的颜色、修改UISearchBar上面的UITextfield的背景颜色、修改UITextfield上面的照片等等。</p>

<p>为了实现上述的需求，最好写一个UISearchBar的子类就叫LSSearchBar吧</p>

<p>LSSearchBar.h如下：</p>

<pre><code>#import &lt;UIKit/UIKit.h&gt;

@interface LSSearchBar : UISearchBar

@end
</code></pre>

<p>LSSearchBar.m如下：</p>

<pre><code>#import "LSSearchBar.h"

@implementation LSSearchBar

- (void)layoutSubviews {

    [super layoutSubviews];

    //通过遍历self.subviews找到searchField
    UITextField *searchField;
    NSUInteger numViews = [self.subviews count];
    for(int i = 0; i &lt; numViews; i++) {
        if([[self.subviews objectAtIndex:i] isKindOfClass:[UITextField class]]) {
            searchField = [self.subviews objectAtIndex:i];
        }
    }

    //如果上述方法找不到searchField，那就试试下面的方法吧

    if (searchField ==  nil) {
        NSArray *arraySub = [self subviews];
        UIView *viewSelf = [arraySub objectAtIndex:0];
        NSArray *arrayView = [viewSelf subviews];
        for(int i = 0; i &lt; arrayView.count; i++) {
            if([[arrayView objectAtIndex:i] isKindOfClass:[UITextField class]]) {
                searchField = [arrayView objectAtIndex:i];
            }
        }
    }


    if(!(searchField == nil)) {
        //设置颜色
        searchField.textColor = [UIColor whiteColor];

        //设置背景颜色
        [searchField setBackground: [UIImage imageNamed:@"searchbar"] ];
        [searchField setBorderStyle:UITextBorderStyleNone];

        //设置placeholder的颜色
        [searchField setValue:[UIColor whiteColor] forKeyPath:@"_placeholderLabel.textColor"];

        //设置searchField上的照片
        UIImage *image = [UIImage imageNamed:@"search"];
        UIImageView *iView = [[UIImageView alloc] initWithImage:image];
        iView.frame = CGRectMake(0, 0, 15, 15);
        searchField.leftView = iView;
    }

}

@end
</code></pre>

<p>更多iOS开发相关技术请关注iOS开发微信公众号 iOS开发 ：</p>

<pre><code>iOSDevTip
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之手势识别汇总]]></title>
    <link href="http://worldligang.github.io/blog/2015/01/14/ioskai-fa-zhi-shou-shi-shi-bie-hui-zong/"/>
    <updated>2015-01-14T10:40:02+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/01/14/ioskai-fa-zhi-shou-shi-shi-bie-hui-zong</id>
    <content type="html"><![CDATA[<p>iOS开发中手势识别有六种：</p>

<p>轻击手势（TapGestureRecognizer）,</p>

<p>轻扫手势 （SwipeGestureRecognizer）,</p>

<p>长按手势（LongPressGestureRecognizer）,</p>

<p>拖动手势（PanGestureRecognizer）,</p>

<p>捏合手势（PinchGestureRecognizer）,</p>

<p>旋转手势（RotationGestureRecognizer）,</p>

<h3>1，轻击手势（TapGestureRecognizer）</h3>

<pre><code>UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapGesture:)];
tapGesture.numberOfTapsRequired = 1; //点击次数
tapGesture.numberOfTouchesRequired = 1; //点击手指数
[self.view addGestureRecognizer:tapGesture];

//轻击手势触发方法
-(void)tapGesture:(UITapGestureRecognizer *)sender
{
    //your code
}
</code></pre>

<h3>2，长按手势（LongPressGestureRecognizer）</h3>

<pre><code>UILongPressGestureRecognizer *longPressGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressGesture:)];
//设置长按时间
longPressGesture.minimumPressDuration = 0.5;
[self.view addGestureRecognizer:longPressGesture];

//长按手势触发方法
-(void)longPressGesture:(id)sender
{
    UILongPressGestureRecognizer *longPress = sender;
    if (longPress.state == UIGestureRecognizerStateBegan)
    {
       //your code
    }
}

说明：长按手势的常用状态如下

开始：UIGestureRecognizerStateBegan

改变：UIGestureRecognizerStateChanged

结束：UIGestureRecognizerStateEnded

取消：UIGestureRecognizerStateCancelled

失败：UIGestureRecognizerStateFailed
</code></pre>

<h3>3，轻扫手势（SwipeGestureRecognizer）</h3>

<pre><code>UISwipeGestureRecognizer *swipeGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeGesture:)];
//设置轻扫的方向
swipeGesture.direction = UISwipeGestureRecognizerDirectionRight; //向右
[self.view addGestureRecognizer:swipeGesture];

UISwipeGestureRecognizer *swipeGestureLeft = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeGesture:)];
//设置轻扫的方向
swipeGestureLeft.direction = UISwipeGestureRecognizerDirectionLeft; //向左
[self.view addGestureRecognizer:swipeGestureLeft];

//轻扫手势触发方法
-(void)swipeGesture:(id)sender
{

    UISwipeGestureRecognizer *swipe = sender;

    if (swipe.direction == UISwipeGestureRecognizerDirectionLeft)
    {
        //向左轻扫
    }

    if (swipe.direction == UISwipeGestureRecognizerDirectionRight)
    {
        //向右轻扫
    }
}
</code></pre>

<h3>4，捏合手势（PinchGestureRecognizer）</h3>

<pre><code>UIPinchGestureRecognizer *pinchGesture = [[UIPinchGestureRecognizer alloc] initWithTarget:self action:@selector(pinchGesture:)];
[self.view addGestureRecognizer:pinchGesture];

    ////捏合手势触发方法
-(void) pinchGesture:(id)sender
{
    UIPinchGestureRecognizer *gesture = sender;
    //手势改变时
    if (gesture.state == UIGestureRecognizerStateChanged)
    {
         //捏合手势中scale属性记录的缩放比例
        _imageView.transform = CGAffineTransformMakeScale(gesture.scale, gesture.scale);
    }

    //结束后恢复
    if(gesture.state==UIGestureRecognizerStateEnded)
    {
        [UIView animateWithDuration:0.5 animations:^{
            _imageView.transform = CGAffineTransformIdentity;//取消一切形变
        }];
    }
}
</code></pre>

<h3>5，拖动手势（PanGestureRecognizer）</h3>

<pre><code>UIPanGestureRecognizer *panGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(panGesture:)];
[self.view addGestureRecognizer:panGesture];

//拖动手势触发方法
-(void) panGesture:(id)sender
{
    UIPanGestureRecognizer *panGesture = sender;
    CGPoint movePoint = [panGesture translationInView:self.view];
    //your code
}
</code></pre>

<h3>6，旋转手势（RotationGestureRecognizer）</h3>

<pre><code>UIRotationGestureRecognizer *rotationGesture = [[UIRotationGestureRecognizer alloc] initWithTarget:self action:@selector(rotationGesture:)];
[self.view addGestureRecognizer:rotationGesture];

//旋转手势触发方法
-(void)rotationGesture:(id)sender
{
    UIRotationGestureRecognizer *gesture = sender;
    if (gesture.state==UIGestureRecognizerStateChanged)
    {
        _imageView.transform=CGAffineTransformMakeRotation(gesture.rotation);
    }
    if(gesture.state==UIGestureRecognizerStateEnded)
    {
        [UIView animateWithDuration:1 animations:^{
            _imageView.transform=CGAffineTransformIdentity;//取消形变
        }];
    }
}
</code></pre>

<p>更多iOS开发相关技术请关注iOS开发微信公众号 iOS开发 ：</p>

<pre><code>iOSDevTip
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发中的gcd多线程tips]]></title>
    <link href="http://worldligang.github.io/blog/2014/12/27/ioskai-fa-zhong-de-gcdduo-xian-cheng-tips/"/>
    <updated>2014-12-27T16:48:27+08:00</updated>
    <id>http://worldligang.github.io/blog/2014/12/27/ioskai-fa-zhong-de-gcdduo-xian-cheng-tips</id>
    <content type="html"><![CDATA[<p>本篇文章会持续更新：</p>

<p><div class="entry-content"><h4>我们经常用到的：</h3></p>

<pre><code>dispatch_async(dispatch_get_global_queue(0, 0), ^{  
    // 处理耗时操作的代码块 

    //通知主线程刷新  
    dispatch_async(dispatch_get_main_queue(), ^{  
        //回调或者说是通知主线程刷新  
    });  

});  
</code></pre>

<p>其中main_queue是系统默认的串行队列，global_queue是系统默认的并行队列。</p>

<p><div class="entry-content"><h5>什么是串行队列（Serial）？</h3></p>

<p>创建任意个数的串行队列，每个队列依次执行添加的任务，一个队列同一时刻只能执行一个任务（串行），但是各个队列之间不影响，可以并发执行。每个队列中的任务运行在一个由各自串行队列维护的独立线程上，一个队列中只有一个线程。</p>

<p><div class="entry-content"><h5>什么是并行队列（Concurrent）？</h3></p>

<p>并行队列是不允许自己创建的，系统中存在三个不同优先级的并行队列。并行队列依旧按照任务添加的顺序启动任务，但是，后一个任务无须等待前一个任务执行完毕，而是启动第一个任务后，立即启动下一个任务。至于同一时刻允许同时运行多少个任务有系统决定。任务各自运行在并行队列为他们提供的独立线程上，并行队列中同时运行多少个任务，就必须维护多少个线程。</p>

<p>gcd中还有一个概念叫做主调度队列</p>

<p><div class="entry-content"><h5>主调度队列（main dispatch queue）</h3>
主调度队列中的任务运行在应用程序主线程上，所以，如果你要修改应用程序的界面，他是唯一的选择。</p>

<p>如下：</p>

<pre><code> dispatch_async(dispatch_get_main_queue(), ^{

        //跟新界面的操作

    });
</code></pre>

<p><div class="entry-content"><h4>只执行一次：</h3></p>

<pre><code>static dispatch_once_t onceToken;  
dispatch_once(&amp;onceToken, ^{  
    // 这里写的代码只会被执行一次
}); 
</code></pre>

<p>如果你收集有实用的关于gcd的用法，欢迎分享给我，直接在文章下面评论即可</p>

<p>我的微信公众号：</p>

<pre><code>iOSDevTip
</code></pre>

<p>转载请注明：<a href="http://www.superqq.com/blog/2014/12/27/ioskai-fa-zhong-de-gcdduo-xian-cheng-tips/">iOS开发中的gcd多线程tips</a></p>
]]></content>
  </entry>
  
</feed>
