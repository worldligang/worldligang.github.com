<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-06-20T06:59:23+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 设计模式系列：Memento – 备忘录模式]]></title>
    <link href="http://www.superqq.com/blog/2015/06/19/ios-she-ji-mo-shi-xi-lie-:memento-bei-wang-lu-mo-shi/"/>
    <updated>2015-06-19T06:31:19+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/19/ios-she-ji-mo-shi-xi-lie-:memento-bei-wang-lu-mo-shi</id>
    <content type="html"><![CDATA[<p><strong>备忘录模式</strong>是捕获和具体化当前对象的内部状态。换句话说，就是在某个地方存储个东西。稍后，在不违反封装的情况下能够恢复这个具体化的状态；就是说，一些私有数据被私下存储下来了。</p>

<h3>如何使用备忘录模式</h3>

<p>添加下面两个方法到 ViewController.m 文件：</p>

<pre><code>- (void)saveCurrentState
{
    // 当用户退出应用之后再重新打开，他想要跟他之前退出时一样的状态
    // 退出应用，这个时候我们需要做的是把当前显示的专辑存储下来
    // 因为只有一小片信息，我们可用 NSUserDefaults 来存储信息
    [[NSUserDefaults standardUserDefaults] setInteger:currentAlbumIndex forKey:@“currentAlbumIndex”];
}

- (void)loadPreviousState
{
    currentAlbumIndex = [[NSUserDefaults standardUserDefaults] integerForKey@“currentAlbumIndex”];
    [self showDataForAlbumAtIndex:currentAlbumIndex];
}
</code></pre>

<p>saveCurrentState 存储当前专辑的索引到 NSUserDefaults ─ NSUserDefaults 是一个标准数据存储，iOS 用来专门存放程序设置和数据。</p>

<p>loadPreviousState 加载这之前存储的专辑索引。这不是备忘录模式的全部，不过你已经达到目的了。</p>

<p>现在，在 ViewController.m 里，滚动视图初始化之前，在 viewDidLoad 里添加下面一行：</p>

<pre><code>[self loadPreviousState];
</code></pre>

<p>当程序启动的时候加载上一次存储的状态。但是你在哪里存储程序的当前状态呢？你需要使用通知来做这样的事情。当程序进入后台时，iOS 会发送一个 UIApplicationDidEnterBackgroundNotification 通知。你可利用这个通知调用 saveCurrentState。就这么方便？</p>

<p>在 viewDidLoad: 最后面添加下面一行</p>

<pre><code>[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(saveCurrentState) name:UIApplicationDidEnterBackgroundNotification object:nil];
</code></pre>

<p>现在，当你的 app 进入后台运行后，ViewController 会自动调用 saveCurrentState 存储当前的状态。</p>

<p>现在，添加下面代码：</p>

<pre><code>- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}
</code></pre>

<p>这里是确保当 ViewController 被释放时，移除类的 <a href="http://www.superqq.com/blog/2015/06/05/ios-kvogai-shu-yu-shi-jian/">Observer</a>。</p>

<p>构建和运行你的 app，点击到一个专辑，用 Command+Shift+H（如果你使用的是模拟器的话） 将程序在后台运行，然后关掉 app。重启 app，检查之前选择的专辑是不是居中显示：</p>

<p><img src="http://cdn3.raywenderlich.com/wp-content/uploads/2013/09/2013-09-02_10-51-27-214x320.png" alt="1" /></p>

<p>专辑数据看起来是对的，但是正确的专辑封面确没有居中，哪出问题了？</p>

<p>这就是可选方法 initialViewIndexForHorizontalScroller 的用处！因为这个方法没有被委托执行，ViewController 在这种情况下总是会显示默认的第一个专辑封面。</p>

<p>修复这个问题，在 ViewController.m 中添加如下代码：</p>

<pre><code>- (NSInteger)initialViewIndexForHorizontalScroller:(HorizontalScroller *)scroller
{
    return currentAlbumIndex;
}
</code></pre>

<p>现在 HorizontalScroller 的第一个视图总是会被设置成 currentAlbumIndex 索引的图片。这种方法能够确保你的 app 有一个非常棒的用户体验，并且它是可恢复的。</p>

<p>重新运行你的 app，滚动专辑封面，关闭 app，然后重启确保问题已经得到解决：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/09/2013-09-02_10-56-59-214x320.png" alt="2" /></p>

<p>如果你查看 PersistencyManger 的初始化方法，你会注意到专辑的数据是一种硬编码，PersistencyManger 每次创建，数据也会重复创建一次。有没有一种更好的方法当专辑列表被创建的时候就存储它们呢。那么如何把专辑数据存储到文件里呢？</p>

<p>一种选择就是循环访问 Album 的属性，然后把它存储在一个 plist 文件里，当需要它们的时候重新创建一个 Album 的实例。这不是最好的选择，这需要你在每一个类里根据不同的数据或属性写特定的代码。例子，如果稍后你需要一个电影的类，里面有一些不同的属性，存储和加载这些数据你就需要写一些新的代码。</p>

<p>此外，你不能在每一个类的实例里存储私有变量，因为他们是不可访问的外部类。这就是为什么苹果要创建归档 (Archiving) 机制。</p>

<p><strong>设计模式系列文章</strong>：</p>

<p><a href="http://www.superqq.com/blog/2015/06/10/ios-she-ji-mo-shi-xi-lie-:kai-pian/">iOS 设计模式系列：开篇</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/11/ios-she-ji-mo-shi-xi-lie-:mvc-she-ji-mo-shi-zhong-de-guo-wang/">iOS 设计模式系列：MVC – 设计模式中的国王</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/">iOS 设计模式系列：Singleton – 单例模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/15/ios-she-ji-mo-shi-xi-lie-:facade-wai-guan-mo-shi/">iOS 设计模式系列：Facade – 外观模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/16/ios-she-ji-mo-shi-xi-lie-:decorator-zhuang-shi-qi-mo-shi/">iOS 设计模式系列：Decorator – 装饰器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/17/ios-she-ji-mo-shi-xi-lie-:adapter-gua-pei-qi-mo-shi/">iOS 设计模式系列：Adapter – 适配器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/19/ios-she-ji-mo-shi-xi-lie-:memento-bei-wang-lu-mo-shi/">iOS 设计模式系列：Memento – 备忘录模式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 设计模式系列：Observer – 观察者模式]]></title>
    <link href="http://www.superqq.com/blog/2015/06/18/ios-she-ji-mo-shi-xi-lie-:observer-guan-cha-zhe-mo-shi/"/>
    <updated>2015-06-18T10:14:51+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/18/ios-she-ji-mo-shi-xi-lie-:observer-guan-cha-zhe-mo-shi</id>
    <content type="html"><![CDATA[<p>在<strong>观察者模式</strong>中，当状态发生改变的时候，一个对象会通知另一个对象。这个对象不需要知道另一个对象发生了什么改变─因此非常鼓励这种分离式的设计。这种模式经常用于，当一个属性发生改变时通知跟它相关的对象。</p>

<p>它通常需要一个观察者(observer)注册跟踪另外一个对象的状态。当状态发生改变的时候，所有的观察对象都会被通知改变。苹果的推送通知服务就是一个这样的例子。</p>

<p>如果你想要一直使用 <a href="http://www.superqq.com/blog/2015/06/11/ios-she-ji-mo-shi-xi-lie-:mvc-she-ji-mo-shi-zhong-de-guo-wang/">MVC 模式</a>（你确实需要），你如果想在模型和视图之间，不直接相互引用的情况下还要有通信。这时候就要用到观察者模式了。</p>

<p>Cocoa 有两个常用的方法来执行观察者模式：Notifications 和 Key-Value Observing (KVO)。</p>

<h3>通知 Notifications</h3>

<p>不要把它和推送、本地通知弄混淆了，通知是基于一个对象（信息发布者）发信息给另一个对象（订阅/监听）的订阅-发布模式的。信息发布者不需要知道任何关于订阅者的信息。</p>

<p>苹果大量的使用了通知。例子，当键盘打开/关闭的时候，系统会分别发送一个 UIKeyboardWillShowNotification/UIKeyboardWillHideNotification。当你的程序要退出的时候，系统会发送一个 UIApplicationDidEnterBackgroundNotification 通知。</p>

<pre><code>提示：打开 UIApplication.h，在文件最后你会看见系统能发送的通知列表有 20 个之多。
</code></pre>

<h3>如何使用通知 Notifications</h3>

<p>打开 AlbumView.m 文件，在 initWithFrame:albumCover: 里面的 [self addSubview:indicator] 后面插入下面代码：</p>

<pre><code>[[NSNotificationCenter defaultCenter] postNotificationName:@“BLDownloadImageNotification” object:self userInfo:@{@“imageView”:coverImage, @“coverUrl”:albumCover}];
</code></pre>

<p>这行代码是通过 NSNotificationCenter 单例来发送一个通知。通知内容包括 coverImage 图片视图 和下载封面图片的 URL。这是执行下载专辑封面所需的所有信息。</p>

<p>在 LibraryAPI.m 的 init 方法里，isOnline = NO; 后面添加下面代码：</p>

<pre><code>[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(downImage:) name:@“BLDownloadImageNotification” object:nil];
</code></pre>

<p>这是等式另一边的观察者对象。任何时候只要 AlbumView 类发送一个 BLDownloadImageNotification 通知，系统就会通知 LibraryAPI，因为 LibraryAPI 已经注册了一个相同的观察者通知。qLibraryAPI 执行 downloadImage:。</p>

<p>不管任何时候，在你执行 downloadImage: 之前，一定要记住在你释放这个类的时候一定要取消这个通知的订阅。如果你不正确的取消一个通知的订阅，这个通知可能发送一个已经释放的实例。这会造成你的程序崩溃。</p>

<p>在 LibraryAPI.m 里添加下面代码：</p>

<pre><code>- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removerObserver:self];
}
</code></pre>

<p>当这个类释放后，移除一个观察者自己已经注册的所有通知。</p>

<p>这里还有一件事情要做。它可以把下载过的封面图片存在本地，这样 app 就不用一次又一次的下载同一个图片了。</p>

<p>打开 PersistencyManger.h 添加下面两个方法：</p>

<pre><code>- (void)saveImage:(UIImage*)image filename:(NSString*)filename;
- (UIImage*)getImage:(NSString*)filename;
</code></pre>

<p>在 PersistencyManger.m 中实现：</p>

<pre><code>- (void)saveImage:(UIImage*)image filename:(NSString*)filename
{
    filename = [NSHomeDirectory() stringByAppendingFormat:@“/Documents/%@”, filename];
    NSData *data = UIImagePNGRepresentation(image);
    [data writeToFile:filename atomically:YES];
}

- (UIImage*)getImage:(NSString*)filename 
{
    filename = [NSHomeDirectory() stringByAppendingFormat:@“/Documents/%@“, filename];
    NSData *data = [NSData dataWithContentsOfFile:filename];
    return [UIImage imageWithData:data];
}
</code></pre>

<p>这里的代码很简单。下载完成的图片会被存储进 Documents 文件夹中，如果没有跟 filename 相匹配的文件，getImage: 会返回 nil。</p>

<p>现在在 LibraryAPI.m 里面添加下面方法：</p>

<pre><code>- (void)downImage:(NSNotification*)notification
{
    // 1 
    UIImageView *imageView = notification.userInfo[@“imageView”];
    NSString *coverUrl   = notification.userInfo[@“coverUrl”];

    // 2
    imageView.image = [persistencyManger getImage:[coverUrl lastPathComponent];

    if (imageView.image == nil) {
        // 3 
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            UIImage *image = [httpClient downloadImage:coverUrl];
            dispatch_sync(dispatch_get_main_queue(), ^{
                imageView.image = image;
                [persistencyManger saveImage:image filename:[coverUrl lastPathComponent];
            });
        });
    }
}
</code></pre>

<p>现在来分析上面的代码：</p>

<ol>
<li>通知执行 downloadImage 方法，方法接受这个这个通知对象，就像它是一个变量一样。通知里会传递 UIImageView 和图片的 URL。</li>
<li>如果以前已经下载过，就从 PersistencyManger 里取出图片。</li>
<li>如果图片没有下载过，使用 HTTPClient 开始下载图片。</li>
<li>当下载完成的时候，在图片视图中显示图片，用 PersistencyManger 存储它到本地。</li>
</ol>


<p>此外，你用外观模式(Facade pattern)隐藏了另外一个下载图片的复杂类。通知发送者不关心图片的来源，不管是从网上下载的还是本地存储的。</p>

<p>构建和运行你的 app，可以看到漂亮的封面已经出现在 HorizontalScroller 里面了：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/08/design-patterns-4-297x320.png" alt="1" /></p>

<p>停止你的 app，然后再运行它。注意这里显示封面已经没有延时了，因为它们已经下载到本地了。你可断开网络试试，你的 app 同样可以完美的运行。虽然已经很完美了，但是仍然有一个小问题：就是下载提示的小菊花仍然一直在转动，从来没有停止过！哪里出问题了？</p>

<p>当你开始下载图片的时候，你运行了下载提示符，但当图片下载完成的时候，你没有停止下载提示符的方法。你也可以当每个图片下载完成的时候再发送一个通知，当然另一个代替方案，你可以使用另一种观察者模式，KVO。</p>

<h3>键 – 值 观察 (Key-Value Observing KVO)</h3>

<p>在 <a href="http://www.superqq.com/blog/2015/06/05/ios-kvogai-shu-yu-shi-jian/">KVO</a>  里，一个对象的任何一个特别的属性改变后都可以请求一个通知；不管是它自己的还是其它的对象。如果你感兴趣，你可以在这里读到更多的信息：Apple’s KVO Programming Guide.</p>

<h3>如何使用 KVO 模式</h3>

<p>如上所述，<a href="http://www.superqq.com/blog/2015/06/05/ios-kvogai-shu-yu-shi-jian/">KVO</a> 的原理是允许一个对象观察一个属性的改变。你所要关心的是，使用 KVO 观察 UIImageView 的 image 属性是否已经改变，就是它是否已经存储了图片。</p>

<p>打开 AlbumView.m，在 initWithFrame:albumCover: 里的 [self addSubview:indicator]; 后面添加下面代码：</p>

<pre><code>[coverImage addObserver:self forKeyPath:@“image” options:0 context:nil];
</code></pre>

<p>不添加在自己上面(self)，在当前的类里，观察 coverImage 的 image 属性。</p>

<p>当你使用过后，你同样需要注销这个观察(observer)。继续在当前文件里面添加下面代码：</p>

<pre><code>- (void)dealloc
{
    [coverImage removerObserver:self forKeyPath:@“image”];
}
</code></pre>

<p>最后，添加下面方法：</p>

<pre><code>- (void)observerValueForKeyPath:(NSString*)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
    if ([KeyPath isEqualToString:@“image”])
    {
        [indicator stopAnimating];
    }
}
</code></pre>

<p>你必须在每个类里执行这个方法。如果观察的属性改变了，系统每次都会执行这个方法。上面的代码里，当 image 的属性发生改变时，你停止下载提示符的运行。这种方法，当图片下载完成，下载提示转动的小菊花将会停止转动。</p>

<p>构建个运行你的项目。你会看到小菊花已经不在了：</p>

<p><img src="http://cdn3.raywenderlich.com/wp-content/uploads/2013/08/design-pattern-stage3-287x320.png" alt="2" /></p>

<pre><code>提示：永远记住，当你释放内存，你一定要移除这些观察(observers)，或者是当你的程序发送这些不存的观察对象时会造成程序崩溃。
</code></pre>

<p>如果你玩弄一会你的 app，然后关闭它，你程序的当前状态并没有被存储下来。当程序启动的时候你看到的视图并不是上次退出时的样子。</p>

<p>为了更正这些，你需要使用下一项设计模式：备忘录 (Memento)。</p>

<p><strong>设计模式系列文章</strong>：</p>

<p><a href="http://www.superqq.com/blog/2015/06/10/ios-she-ji-mo-shi-xi-lie-:kai-pian/">iOS 设计模式系列：开篇</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/11/ios-she-ji-mo-shi-xi-lie-:mvc-she-ji-mo-shi-zhong-de-guo-wang/">iOS 设计模式系列：MVC – 设计模式中的国王</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/">iOS 设计模式系列：Singleton – 单例模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/15/ios-she-ji-mo-shi-xi-lie-:facade-wai-guan-mo-shi/">iOS 设计模式系列：Facade – 外观模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/16/ios-she-ji-mo-shi-xi-lie-:decorator-zhuang-shi-qi-mo-shi/">iOS 设计模式系列：Decorator – 装饰器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/17/ios-she-ji-mo-shi-xi-lie-:adapter-gua-pei-qi-mo-shi/">iOS 设计模式系列：Adapter – 适配器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/19/ios-she-ji-mo-shi-xi-lie-:memento-bei-wang-lu-mo-shi/">iOS 设计模式系列：Memento – 备忘录模式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 设计模式系列：Adapter – 适配器模式]]></title>
    <link href="http://www.superqq.com/blog/2015/06/17/ios-she-ji-mo-shi-xi-lie-:adapter-gua-pei-qi-mo-shi/"/>
    <updated>2015-06-17T14:24:04+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/17/ios-she-ji-mo-shi-xi-lie-:adapter-gua-pei-qi-mo-shi</id>
    <content type="html"><![CDATA[<p>注：本节有点长，并且有些难度，希望大家有毅力看下去。</p>

<p>一个适配器允许接口不兼容的类在一起工作。它把它自己包裹成一个对象，公开一个与这个对象相互作用的标准接口。</p>

<p>如果你熟习<strong>适配器模式</strong>，你会注意到苹果实施它的时候有一点不同的习惯─苹果使用协议 (protocols)。你可能熟习像 UITableViewDelegate, UIScrollViewDelegate, NSCoding 和 NSCopying 这样的协议。例子，NSCopying 的协议 (protocol)，任何类都可以提供这样一个标准的复制方法。</p>

<h3>如何使用适配器模式</h3>

<p>我们提到的滚动区域是这样的：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/08/protocol1.png" alt="1" /></p>

<p>现在开始，在项目导航的 View 文件夹上右击鼠标，选择 New File…，用 iOS\Cocoa Touch\Object-C class 模板创建一个新类。新类的名字叫 HorizontalScroller，选择它的子类为 UIView。</p>

<p>打开 HorizontalScroller.h 文件在 @end 后面插入如下代码：</p>

<pre><code>@protocol HorizontalScrollerDelegate &lt;NSObject&gt;
// methods declaration goes in here
@end
</code></pre>

<p>这里定义一个 HorizontalScrollerDelegate 名字的协议，它继承于 NSObject 协议，同样的这是继承它父类的一个 Objective-C 类。符合 NSObject 协议，这是一个很好的做法─或者遵照 NSObject 协议。这能使你从定义的 NSObject 发送消息到 HorizontalScroller 的代理。你将会看到为什么这很重要。</p>

<p>定义个代理执行的方法，要在 @protocol 和 @end 之间，它们分为必要方法和可选方法。添加下面协议方法：</p>

<pre><code>@required
// 询问 delegate 在滚动区域里有多少个视图要被显示
- (NSInteger)numberOfViewsForHorizontalScroller:    (HorizontalScroller*)scroller;

// 返回索引是 index 的视图
- (UIView*)horizontalScroller:(HorizontalScroller*)scroller viewAtIndex:(int)index;

// 当索引是 index 的视图被点击了，通知 delegate 
- (void)horizontalScroller:(HorizontalScroller*)scroller clickedViewAtIndex:(int)index;

@optional
// 通知 delegate，显示初始化时索引是 Index 的视图。这个方法是可选的
// ask the delegate for the index of the initial view to display. this method is optional
// 如果没有被 delegate 执行，默认值是 0
- (NSInteger)initialViewIndexForHorizontalScroller:(HorizontalScroller*)scroller;
</code></pre>

<p>这里我们必选的和可选的方法我们都定义了。必选方法一定要被代理执行，它通常包含一些类必须要执行的数据。这里，必选方法是获取视图的数量，当前显示视图的索引和当视图被点击的时候执行的操作。可选方法这里是初始化视图；如果没有执行 HorizontalScroller 将会显示第一个索引的视图。</p>

<p>接下来，你需要在 HorizontalScroller 内部定义你的新代理。但是协议的定义在类的定义下面，因此在这点上它是不可见的。你该怎么办？</p>

<p>解决办法就是在前面声明协议以便于编译器（和Xcode）知道这个协议是可用的。好了，在 @interface 上面加入下面代码：</p>

<pre><code>@protocol HorizontalScrollerDelegate;
</code></pre>

<p>还是 HorizontalScroller.h，在 @interface 和 @end 之间加入下面代码：</p>

<pre><code>@property (weak) id&lt;HorizontalScrollerDelegate&gt; delegate;
- (void)reload;
</code></pre>

<p>这个属性被定义成为一个 weak。这是为了防止循环 retain。如果一个类保持一个强指针(strong pointer)指向它的委托(delegate)，同时委托也保持一个强指针指向这个类，在释放类所占用的内存时会造成 app 内存泄漏。</p>

<p>id 的意思是把这个代理指定给一个类，它遵照 HorizontalScrollerDelegate，给你一些类型安全。</p>

<p>reload 方法是模仿 UITableView 类的 relaodData；它重新加载所有数据用来创建一个水平移动视图。</p>

<p>用下面代码替换 HorizontalScroller.m 的内容：</p>

<pre><code>#import “HorizontalScroller.m”

#define VIEW_PADDING 10
#define VIEW_DIMENSIONS 100
#define VIEW_OFFSET 100

@interface HorizontalScroller () &lt;UIScrollViewDelegate&gt;
@end

@implementation HorizontalScroller
{
    UIScrollView *scroller;
}
@end
</code></pre>

<p>来解释下每块代码：</p>

<ol>
<li>常量定义，在设计时间可以方便修改布局。在滚动视图内，每个图片的大小在一个 100×100 内边距为 10 点(point) 的矩形内。</li>
<li>HorizontalScroller 遵照 UIScrollViewDelegate 协议。因为 HorizontalScroller 使用一个 UIScrollView 来滚动专辑封面，它需要知道用户什么时候停止滚动。</li>
<li>创建一个包含图片的滚动视图。</li>
</ol>


<p>接下来你需要执行初始化。添加下面的方法：</p>

<pre><code>- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        scroller = [[UIScrollerView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
        scroller.delegate = self;
        UITapGestureRecognizer *tapRecognizer = [[UITapGestureRecognizer alloc] initWithTarger:self action:@select(scrollerTapped:)];
        [scroller addGestureRecognizer:tapRecognizer];
    }
    return self;
}
</code></pre>

<p>HorizontalScroller 将被滚动视图整个填充。如果一个专辑封面被点击，UITapGestureRecognizer 将会监听它上面的事件。如果有，它会通知 HorizontalScroller 的代理。</p>

<p>现在添加下面方法：</p>

<pre><code>- (void)scrollerTapped:(UITapGestureRecognizer*)gesture
{
    CGPoint location = [gesture locationInView:gesture.view];
    // we can’t use an enumerator here, because we don’t want to enumerate over ALL of the UIScrollView subviews.
    // we want to enumerate only the subview that we added
    for (int index=0; index&lt;[self.delegate numberOfViewForHorizontalScroller:self]; index++) {
        UIView *view = scroller.subviews[index];
        if (CGRectContainsPoint(view.frame, location)) {
            [self.delegate horizontalScroller:self clickedViewAtIndex:index];
            [scroller setContentOffset:CGPointMake(view.frame.origin.x - self.frame.size.width/2 + view.frame.size.width/2, 0) animated:YES];
            break;
        }
    }
}
</code></pre>

<p>手势操作就如同传入的一个参数，可以从 locationInView: 获取定位信息。</p>

<p>接下来，调用委托的 numberOfViewForHorizontalScroller: 方法。它必须遵照 HorizontalScrollerDelegate 的协议安全发送消息，否则 HorizontalScroller 实例的代理是没法使用这些信息。</p>

<p>滚动视图里的每个视图，用 CGRectContainsPoint 执行一个点击测试，找到那个被点击的视图。当视图被找到，发送给委托一个消息 horizontalScroller:clickedViewAtIndex:。当你跳出这个循环后，设置被点击的视图滚动到视图中间。</p>

<p>现在添加下面的代码，用来刷新滚动视图(scroller):</p>

<pre><code>- (void)reload
{
    // 1 - nothing to load if there’s no delegate
    if (self.delegate == nil) return;

    // 2 - remover all subviews
    [scroller.subviews enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        [obj removeFromSuperview];
    }

    // 3 - xValue is the starting point of the views inside the scroller
    CGFloat xValue = VIEWS_OFFSET;
    for (int i=0; i&lt;[self.delegate numberOfViewsForHorizontalScroller:self]; i++) {
        // 4 - add a view at the right position
        xValue += VIEW_PADDING;
        UIView *view = [self.delegate horizontalScroller:self viewAtIndex:i]
        view.frame = CGRectMake(xValue, VIEW_PADDING, VIEW_DIMENSIONS, VIEW_DIMENSIONS);
        xValue += VIEW_DIMENSIONS + VIEW_PADDING;
    }

    // 5
    [scroller setContentSize:CGSizeMake(xValue+VIEWS_OFFSET, self.frame.size.height)];

    // 6 - if an initial view is defined, center the scroller on it
    if (self.delegate respondsToSelector:@select(initialViewIndexForHorizontalScroller:)]) {
        int initialView = [self.delegate initialViewIndexForHorizontalScroller:self];
        [scroller setContentOffset:CGPointMake(initialView*(VIEW_DIMENSIONS+(2*VIEW_PADDING)), 0) animated:YES];
    }
}
</code></pre>

<p>能过代码一步步来讨论：</p>

<ol>
<li>如果没有代理，这里什么事情也不做。</li>
<li>移除之前添加的所有的子视图。</li>
<li>给所有视图设置一个偏移(offset)位置。现在的是 100，但是通过顶部的 #define，它很容易修改。</li>
<li>HorizontalScroller 通过它的委托一次请求一个视图，用之前定义的 padding 值把它们依次的一个个放置下来。</li>
<li>当所有的视图都生成好，通过设置滚动视图内容的偏移量以达到用户能过滚动可以看到所有专辑封面的目的。</li>
<li>HorizontalScroller 的委托需要验证是否响应了 initialViewIndexForHorizontalScroller: 方法。这个验证是必需的，因为这个特别的协议方法是可选性的。如果代理没有执行这个方法，它的默认值会是 0。最终，通过委托，这块代码会在滚动视图中间设置一个初始化好的视图。</li>
</ol>


<p>当数据发生改变的时候执行 reload 方法。当添加 HorizontalScroller 到别个一个视图时，你同样可以执行这个方法。在 HorizontalScroller.m 添加下面的代码替换后面的方案：</p>

<pre><code>- (void)didMoveToSuperview
{
    [self reload];
} 
</code></pre>

<p>当它要添加一个子视图的时候，didMoveToSuperview 会发送消息给视图。这时正好可以更新滚动视图的内容。</p>

<p>HorizontalScroller 的最后一个难题就是，如何设置你看到的专辑总是在滚动视图的中间。为了这些，当用户通过他们的手指拖动滚动视图的时候你就需要做一些计算了。</p>

<p>添加下面方法（同样在 HorizontalScroller.m）：</p>

<pre><code>- (void)centerCurrentView {
    int xFinal = scroller.contentOffset.x + (VIEWS_OFFSET/2) + VIEW_PADDING;
    int viewIndex = xFinal / (VIEW_DIMENSIONS + (2*VIEW_PADDING));
    xFinal = viewIndex * (VIEW_DIMENSIONS+(2*VIEW_PADDING));
    [scroller setContentOffset:CGPointMake(xFinal, 0) animated:YES];
    [self.delegate horizontalScroller:self clickedViewAtIndex:viewIndex];
}
</code></pre>

<p>上面的代码通过滚动视图的当前偏移量，外观尺寸，内边距来计算当前视图离中心的距离。最后一行非常重要：当一个视图居中后，你需要通知委托你选择的视图改变了。</p>

<p>为了侦测用户在滚动视图内完成拖拽的动作，你需要添加 UIScrollViewDelegate 方法：</p>

<pre><code>- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate
{
    if (!decelerate)
    {
        [self centerCurrentView];
    }
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    [self centerCurrentView];
}
</code></pre>

<p>当用户完成拖拽的时候 scrollViewDidEndDragging:willDecelerate: 通知委托。如果滚动视图没有停止滚动， decelerate 参数会返回 true。当滚动结束，系统将会调用 scrollViewDidEndDecelerating。当用户拖动滚动当前视图后，两种情况，我们都需要调用一个新方法来使当前视图居中。</p>

<p>HorizontalScroller 现在可以使用了。浏览你刚刚写的代码；这里没有一处提到 Album 和 AlbumView 类。这非常棒，说明这个新的滚动视图是真正的完全独立的和可重用的。</p>

<p>Build 项目，确保所有的代码编译正确。</p>

<p>现在 HorizontalScroller 完成了，是时候在你的 APP 中使用了。打开 ViewController.m 添加如下引用：</p>

<pre><code>#import “HorizontalScroller.h”
#import “AlbumView.h”
</code></pre>

<p>给 ViewController 添加 HorizontalScrollerDelegate：</p>

<p>@interf<!---->ace ViewController () &lt;UITableViewDataSource, UITableViewDelegate, HorizontalScroller></p>

<p>在类的扩展里为水平滚动视图添加如下实例变量：</p>

<p>Horizonta<!---->lScroller *scroller;</p>

<p>现在你可以执行代理方法了；你会惊奇的发现只需要几行代码你就能实现很多功能。</p>

<p>在 ViewController.m 添加如下代码：</p>

<pre><code>#pragma mark - HorizontalScrollerDelegate methods
- (void)horizontalScroller:(HorizontalScroller *)scroller clickedViewAtIndex:(int)index
{
    currentAlbumIndex = index;
    [self showDataForAlbumAtIndex:index];
}
</code></pre>

<p>这里设置一个变量用来存储当前的专辑，然后调用 showDataForAlbumAtIndex: 显示一个新专辑的数据。</p>

<p>提示：一般在方法代码的前面放置 #pragma mark 指示符。编译器会忽略这一行，当你在使用 Xcode 的跳转工具栏(Xcode’s jump bar)查看你的方法列表时，你会看到一个分隔符和个加粗的指示标题。在 Xcode 里，这可以帮助你很容易的组织代码。</p>

<p>下面，添加如下代码：</p>

<pre><code>- (NSInteger)numberOfViewsForHorizontalScroller:(HorizontalScroller *)scroller
{
    return allAlbums.count;
}
</code></pre>

<p>这里，协议方法返回滚动视图里的视图数量。因为滚动视图需要显示所有的专辑封面，这个 count 是所有专辑的数目。</p>

<p>现在，添加这些代码：</p>

<pre><code>- (UIView *)horizontalScroller:(HorizontalScroller *)scroller viewAtIndex:(ini)index
{
    Album *album = allAlbums[index];
    return [[Album alloc] initWithFrame:CGRectMake(0, 0, 100, 100) albumCover:album.coverUrl];
}
</code></pre>

<p>这里你创建了一个新 AlbumView，然后交给 HorizontalScroller 使用。</p>

<p>就是这样，通过三个这么短的方法就可以显示一个漂亮的滚动视图。</p>

<p>实际上，你仍需要创建一个真正的滚动视图，然后添加到你的主视图上，但是在这之前，先添加下面的方法：</p>

<pre><code>- (void)reloadScroller
{
    allAlbums = [[LibraryAPI sharedInstance] getAlbums];
    if (currentAlbumIndex &lt; 0) currentAlbumIndex = 0;
    else if (currentAlbumIndex &gt;=allAlbum.count) currentAlbumIndex = allAlbum.count - 1;
    [scroller reload];

    [self showDataFroAlbumAtIndex:currentAlbumIndex;
}
</code></pre>

<p>这个方法从 LibraryAPI 加载专辑数据，然后以当前视图的索引值为基础设置显示当前的图片。 如果当前视图的索引小于零，意味着当前没有选择视图，显示列表里的第一张专辑。否则显示最后一张专辑。</p>

<p>现在，在 viewDidLoad 里 [self showDataForAlbumIndex:0] 前面添加下面代码来初始化滚动视图：</p>

<pre><code>scroller  = [[HorizontalScroller alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 120)];
scroller.backgroundColor = [UIColor colorWithRed:0.24f greed:0.35f blue:0.49f alpha:1];
scroller.delegate = self;
[self.view addSubview:scroller];

[self reloadScroller];
</code></pre>

<p>上面的代码创建了一个 HorizontalScroller 的实例，设置了它的背景颜色和委托，添加滚动视图到主视图上，在滚动视图的子视图上加载专辑数据。</p>

<pre><code>提示：如果一个协议变得很大，里面有很多方法，你应该考虑把它们分散到几个小的协议里去。UITableViewDelegate 和 UITableViewDataSource 就是一个很好的例子，因为它们都是 UITablveView 的协议。设计协议的时候，最好一个名称引导一个功能。
</code></pre>

<p>构建和运行你的项目，你会看到一个新的很了不起的水平滚动视图：</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/08/design-patterns-3-298x320.png" alt="2" /></p>

<p>啊嗯，等等。水平滚动的视图已经有了，可是专辑封面在哪里？</p>

<p>对了，你还没有代码来执行下载图片的功能。你需要添加一个下载图片的方法。查检 LibraryAPI 服务的所有接口，这里需要添加一个新的方法。不管怎样，现在还有几件事情需要考虑：</p>

<ol>
<li>AlbumView 并没没有通过 LibraryAPI 立即工作。你没有给视图添加通信逻辑。</li>
<li>相同的原因，LibraryAPI 并不认识 AlbumView。</li>
<li>LibraryAPI 需要通知 AlbumView，一旦封面下载完成，AlbumView 就会显示它。</li>
</ol>


<p>听起来这是一个难题？不用害怕，你将要学习如何使用观察者模式 (Observer pattern)。</p>

<p><strong>设计模式系列文章</strong>：</p>

<p><a href="http://www.superqq.com/blog/2015/06/10/ios-she-ji-mo-shi-xi-lie-:kai-pian/">iOS 设计模式系列：开篇</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/11/ios-she-ji-mo-shi-xi-lie-:mvc-she-ji-mo-shi-zhong-de-guo-wang/">iOS 设计模式系列：MVC – 设计模式中的国王</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/">iOS 设计模式系列：Singleton – 单例模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/15/ios-she-ji-mo-shi-xi-lie-:facade-wai-guan-mo-shi/">iOS 设计模式系列：Facade – 外观模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/16/ios-she-ji-mo-shi-xi-lie-:decorator-zhuang-shi-qi-mo-shi/">iOS 设计模式系列：Decorator – 装饰器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/17/ios-she-ji-mo-shi-xi-lie-:adapter-gua-pei-qi-mo-shi/">iOS 设计模式系列：Adapter – 适配器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/19/ios-she-ji-mo-shi-xi-lie-:memento-bei-wang-lu-mo-shi/">iOS 设计模式系列：Memento – 备忘录模式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 设计模式系列：Decorator – 装饰器模式]]></title>
    <link href="http://www.superqq.com/blog/2015/06/16/ios-she-ji-mo-shi-xi-lie-:decorator-zhuang-shi-qi-mo-shi/"/>
    <updated>2015-06-16T13:38:15+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/16/ios-she-ji-mo-shi-xi-lie-:decorator-zhuang-shi-qi-mo-shi</id>
    <content type="html"><![CDATA[<p><strong>装饰器模式</strong>可以在不修改代码的情况下灵活的为一对象添加行为和职责。当你要修改一个被其它类包含的类的行为时，它可以代替子类化方法。</p>

<p>在 Object-C 里有两个种非常常见的实现模式：分类(Category)和委托(Delegation)。</p>

<h3>分类 Category</h3>

<p>分类是一种非常强大的机制，它允许你在一个已存在的类里添加新方法，而不需要去为他添加一个子类。新方法在编译的时候添加，它能像这个类的扩展方法一样正常执行。一个装饰器跟类的定义稍微有点不同的就是，因为装饰器不能被实例化，它只是一个扩展。</p>

<pre><code>提示：除了你自己类的扩展，你还可在任何 Cocoa 类里的扩展添加方法。
</code></pre>

<h3>如何使用分类</h3>

<p>现在你有一个 Album 对象，你需要把它显示在一个表单视图里(table view)：</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2013/08/design-patterns-category1.png" alt="1" /></p>

<p>专辑的标题从哪里来？Album 只是一个模型对象，它才不会去关心你如果去显示这些数据。为了这些，你需要给 Album 类添加一些额外的代码，但是请不要直接修改这个类。</p>

<p>你现在就需要为 Album 添加一个分类 (category) 的扩展；它将定义一个新地方法用来返回一个数据结构，这个数据结构可以很容易的被 UITableViews 使用。</p>

<p>这个数据结构看起来如下：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/08/delegate2-480x67.png" alt="2" /></p>

<p>为 Album 添加一个分类，导航 File\New\File… 选择 Object-C category 模版─不要习惯的去选择 Object-C class，在 Category 后面输入 TableRepresentation，Category to 后面输入 Album。</p>

<pre><code>提示：你有没有注意这个新文件的名字？Album+TableRepresentation 说明它是 Album 类的一个扩展。这个习惯很重要，因为第一这很容易读，第二防止你或者其他人创建的分类跟其冲突。
</code></pre>

<p>打开 Album+TableRepresentation，加入下面的方法原型：</p>

<pre><code>- (NSDictionary*)tr_tableRepresentation;
</code></pre>

<p>注意，这是一个 tr_ 开头的方法名，就像是这个分类名字的缩写一样：TableRepresentation。其次，这个习惯会避免这个方法跟其它方法重名！</p>

<pre><code>提示：如果分类 (Category) 声明的一个方法跟原始类的一个方法重名，或者跟同类里的的另一个分类名字重复（或者是它的父类），当它在运行的时候，它就不知道要执行哪个方法。如果是在你自己类的分类里，它不太可能出现大的问题，但是如果一个标准 Cocoa 或者 Cocoa Touch 类里面添加这个分类的方法，就可能会引起严重的问题。
</code></pre>

<p>打开 Album+TableRepersentation.m 文件添加下面的方法：</p>

<pre><code>- (NSDictionary*)tr_TableRepersentation
{
    return @{@"titles":@[@"Artist", @"Album", @"Genre", @"Year"],
            @"values":@[self.artist, self.title, self.genre, self.year]};
};
</code></pre>

<p>考虑一会，为什么这种模式如些强大：</p>

<ul>
<li>你能够直接使用 Album 的属性。</li>
<li>你已经添加在 Album 类里，但它并不是它的子类。如果子类需要，你同样也可以这样做。</li>
<li>这样一个简单的添加，Album 类的数据返回一个 UITableView 可用的数据结构，但并不需要修改 Album 的代码。</li>
</ul>


<p>苹果在基础类里大量的使用了分类设计模式。去看看他们是怎么做的，打开 NSString.h。找到 @interface NSString，你将会看到这个类定义了三个分类：NSStringExtensionMethods, NSExtendedStringPropertyListParsing 和 NSStingDeprecated。在代码片里，分类将帮助你保持方法的组织性和分离必。</p>

<h3>委托 Delegation</h3>

<p>另外一种装饰器的设计模式是，委托 (Delegation)，它是一种机制，一个对象代表另外一个对象或者其相互合作。例子，当你使用 UITableView 的时候，其中一个方法是你必需要执行的，tableView:numberOfRowsInSection:。</p>

<p>你可能并不期望 UITableView 知道每个 section 中有多少行，这是程序的特性。因此，计算每个 section 有多少行的工作就交给了 UITableView 的委托 (delegate)。它允许 UITableView 类不依赖它显示的数据。</p>

<p>当你创建了一个新的 UITableView 的时候，这里有一个类似的解释：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/08/delegate-480x252.png" alt="3" /></p>

<p>UITableView 对象的工作就是显示一个表单视图。然而，最终它都需要一些它信息，它并不拥有这些信息。然后，它会转向它的委托，发送一个添加信息的消息。在 Object-C 中实现委托模式，一个类可以通过协议 (protocol) 来声明一个可选和必选的方法。稍后，在这个教程你将覆盖一个协议 (protocols)。</p>

<p>它看起来比子类更容易，覆盖需要的方法，但是考虑如果是单类的话你只能创建子类。如果你想一个对象委托两个或者多个对象的时候，子类化的方法是不能实现的。</p>

<pre><code>提示：这是一个很重要的模式。苹果在 UIKit 类中大量的使用了此方法：UITableView, UITextView, UITextField, UIWebView, UIAlert, UIActionSheet, UICollectionView, UIPickerView, UIGestureRecognizer, UIScrollView。这个列表还可以有很多。
</code></pre>

<h3>如何使用委托模式</h3>

<p>打开 ViewController.m，在顶部引入如下文件</p>

<pre><code>#import "LibraryAPI.h"
#import "Album+TableRepresentation.h"
</code></pre>

<p>现在，在类的扩展里的添加一些私有变量，它们看起来如下：</p>

<pre><code>@interface ViewController (){
    UITableView *dataTable;
    NSArray *allAlbums;
    NSDictionary *currentAlbumData;
    int currentAlbumIndex;
}
@end
</code></pre>

<p>现在，替换类扩展里的 @interface 这一行，完成后如下：</p>

<pre><code>@interface ViewController () &lt;UITableViewDataSoure, UITableViewDelegate&gt; {
</code></pre>

<p>这就是如何设置一个正确的委托─把它相象成允许一个委托来履行一个方法的合同。这里，表明 ViewController 将会遵照 UITableViewDataSource 和 UITableViewDelegate 协议。这种方法下 UITableView 必须执行它自己的委托方法。</p>

<p>下面，用下面的代码替换 viewDidLoad:</p>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    // 1
    self.view.backgroundColor = [UIColor colorWithRed:0.76f green:0.81f blue:0.87f alpha:1];
    currentAlbumIndex = 0;

    //2
    allAlbums = [[LibraryAPI sharedInstance] getAlbums];

    // 3
    // the uitableview that presents the album data
    dataTable = [[UITableView alloc] initWithFrame:CGRectMake(0, 120, self.view.frame.size.width, self.view.frame.size.height-120) style:UITableViewStyleGrouped];
    dataTable.delegate = self;
    dataTable.dataSource = self;
    dataTable.backgroundView = nil;
    [self.view addSubview:dataTable];
}
</code></pre>

<p>这里分析下上面的代码：</p>

<ol>
<li>把背景色改为漂亮的深蓝色。</li>
<li>从 API 获取一个列表，它包含所有的专辑数据。不能直接使用 PersistencyManager。</li>
<li>创建一个 UITableView。你声明了视图控制器是 UITableView delegate/data source；因此，UITableView 将会提供视图控制器需要的所有信息。</li>
</ol>


<p>现在，在 ViewController.m 里面添加如下方法：</p>

<pre><code>- (void)showDataForAlbumAtIndex:(int)albumIndex{
    // defensive code: make sure the requested index is lower than the amount of albums
    if (albumIndex &lt; allAlbums.count) {
        // fetch the album
        Album *album = allAlbums[albumIndex];
        // save the albums data to present it later in the tableview
        currentAlbumData = [album tr_tableRepresentation];
    } else {
        currentAlbumData = nil;
    }

    // we have the data we need, let's refresh our tableview
    [dataTable reloaddata];
}
</code></pre>

<p>showDataForAlbumAtIndex: 从专辑数组中取出需要的专辑数据。当你需要显示新数据的时候，你只需要重载数据 (relaodData)。这是因为 UITableView 需要请求它的委托代理，像有多少 sections 将会在表单视图中显示，每个 section 中有多少行，每行看起来是什么样的。</p>

<p>在 viewDidLoad 中添加下面代码</p>

<pre><code>[self showDataForAlbumAtIndex:currentAlbumIndex];
</code></pre>

<p>当程序运行的时候它会加载当前的专辑信息。由于 currentAlbumIndex 的预设值为 0，所以会显示收藏中的第一张专辑信息。</p>

<p>构建并运行你的项目，你的程序会崩溃掉，在控制台会输入如下的异常：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/09/2013-09-01_15-57-32-700x112.png" alt="4" /></p>

<p>出现什么问题了？你已经声明了 ViewController 中的 UItableView 的委托(delegate)和数据源(data source)。但是在这种情况下，你必需执行所有的必需方法─包含 tableView:numberOfRowsInsection:─你现在还没有它。</p>

<p>在 ViewContrller.m 的 @implementation 和 @end 的任何地方添加如下代码：</p>

<pre><code>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [currentAlbumData[@"titles"] count];
}

- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"cell"];
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"cell"];
    }

    cell.textLabel.text = currentAlbumData[@"titles"][indexPath.row];
    cell.detailTextLabel.text = currentAlbumData[@"values"][indexPath.row];

    return cell;
}
</code></pre>

<p>tableView:numberOfRowsIndexSection: 返回表单视图显示的行数，匹配数据结构中标题的数目。</p>

<p>tableView:cellForRowAtIndexPath: 创建并返回一个带标题和信息的 cell。</p>

<p>现在构建并运行你的项目。你的程序开始运行并显示出下图的界面：</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2013/08/design-pattern-stage1.png" alt="5" /></p>

<p>这目前为止事情看起来很不错。但是如果你回过去看第一张图片的时候，你会发现在屏幕的顶端有一个可以水平滚动的视图，用于切换专辑。它只是简单的水平滚动，为什么不做一个可以重复使用的视图来代替它呢。</p>

<p><img src="%E8%BF%99%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%E4%BA%8B%E6%83%85%E7%9C%8B%E8%B5%B7%E6%9D%A5%E5%BE%88%E4%B8%8D%E9%94%99%E3%80%82%E4%BD%86%E6%98%AF%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%9B%9E%E8%BF%87%E5%8E%BB%E7%9C%8B%E7%AC%AC%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%8F%91%E7%8E%B0%E5%9C%A8%E5%B1%8F%E5%B9%95%E7%9A%84%E9%A1%B6%E7%AB%AF%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%B0%B4%E5%B9%B3%E6%BB%9A%E5%8A%A8%E7%9A%84%E8%A7%86%E5%9B%BE%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%88%87%E6%8D%A2%E4%B8%93%E8%BE%91%E3%80%82%E5%AE%83%E5%8F%AA%E6%98%AF%E7%AE%80%E5%8D%95%E7%9A%84%E6%B0%B4%E5%B9%B3%E6%BB%9A%E5%8A%A8%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%81%9A%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E9%87%8D%E5%A4%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%86%E5%9B%BE%E6%9D%A5%E4%BB%A3%E6%9B%BF%E5%AE%83%E5%91%A2%E3%80%82" alt="6" /></p>

<p>这个可以重复使用的视图 (view)，它所有的内容都由另一个对象来管理：委托 (delegate)。这个水平滚动区域需要声明一个方法，一个为滚动区域工作的代理工具，就像 UITableView 代理方法如何工作一样。当我讨论下一个设计模式时将会实施它。</p>

<p><strong>设计模式系列文章</strong>：</p>

<p><a href="http://www.superqq.com/blog/2015/06/10/ios-she-ji-mo-shi-xi-lie-:kai-pian/">iOS 设计模式系列：开篇</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/11/ios-she-ji-mo-shi-xi-lie-:mvc-she-ji-mo-shi-zhong-de-guo-wang/">iOS 设计模式系列：MVC – 设计模式中的国王</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/">iOS 设计模式系列：Singleton – 单例模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/15/ios-she-ji-mo-shi-xi-lie-:facade-wai-guan-mo-shi/">iOS 设计模式系列：Facade – 外观模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/16/ios-she-ji-mo-shi-xi-lie-:decorator-zhuang-shi-qi-mo-shi/">iOS 设计模式系列：Decorator – 装饰器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/17/ios-she-ji-mo-shi-xi-lie-:adapter-gua-pei-qi-mo-shi/">iOS 设计模式系列：Adapter – 适配器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/19/ios-she-ji-mo-shi-xi-lie-:memento-bei-wang-lu-mo-shi/">iOS 设计模式系列：Memento – 备忘录模式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 设计模式系列：Facade – 外观模式]]></title>
    <link href="http://www.superqq.com/blog/2015/06/15/ios-she-ji-mo-shi-xi-lie-:facade-wai-guan-mo-shi/"/>
    <updated>2015-06-15T10:06:20+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/15/ios-she-ji-mo-shi-xi-lie-:facade-wai-guan-mo-shi</id>
    <content type="html"><![CDATA[<p>目前你有 PersistencyManager 来在本地存储专辑数据，HTTPClient 处理远程通信。项目中其它的类跟这些逻辑都没关。</p>

<p>执行这个<a href="http://www.superqq.com/blog/2015/03/21/dan-li-mo-shi-de-xie-fa/">模式</a>，只有 LibraryAPI 来保存 PersistencyManager 和 HTTPClient 的实例。之后，LibraryAPI 将会公开一个简单的 API 来访问这些服务。</p>

<pre><code>提示：通常，单例存在 app 的整个生命周期。不需一直使用很多指针指向其它对象，因为她们直到程序关闭后才会被释放。   
</code></pre>

<p>这个设计就像下图：</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/08/design-patterns-facade-uml-480x71.png" alt="icon" /></p>

<p>LibraryAPI 将会公开给其它代码，但是它隐藏了 APP 中 HTTPClient 和 PersistencyManager 的复杂部分。</p>

<p>打开 LibraryAPI.h，在顶部引入面文件：</p>

<pre><code>#import "Album.h"
</code></pre>

<p>接下来，在 LibraryAPI.h下面添加如下方法：</p>

<pre><code>- (NSArray*)getAlbums;
- (void)addAlbum:(Album*)album atIndex:(int)index;
- (void)deleteAlbumAtIndex:(int)index;
</code></pre>

<p>现在，这些方法都公开给了其它类。</p>

<p>在 LibraryAPI.m 文件引入如下两个文件：</p>

<pre><code>#import "PersistencyManager.h"
#import "HTTPClient.h"
</code></pre>

<p>只有在这个地方你才会需要引入这些类。记住：你的 API 将会是你「复杂」系统的唯一的接入点。</p>

<p>现在添加一些私有属性在你的类的扩展里（在 @implementation 上面）</p>

<pre><code>@interface LibraryAPI () {
    PersistencyManager *persistencyManager;
    HTTPClient *httpClient;
    BOOL isOnline;
}
@end
</code></pre>

<p>isOnline 用来判断，如果专辑列表数据发生变化是否能够更新到服务器，例如添加或者删除专辑。</p>

<p>你现在需要在 init 方法中初始化这些变量，在 LibraryAPI.m 中添加下面代码：</p>

<pre><code>- (id)init
{
    self = [super init];
    if (self) {
        persistencyManager = [[PersistencyManager alloc] init];
        httpClient = [[HTTPClient alloc] init];
        isOnline = NO;
    }
    return self;
}
</code></pre>

<p>这个 HTTP 客户端在这里并不真正的工作，它只是在外观设计里面起一个示范用法的作用，所以 isOnline 永远是 NO 了。</p>

<p>接下来，在 LibraryAPI.m 里面添加下面三个方法：</p>

<pre><code>- (NSArray*)getAlbums
{
    return [persistencyManager getAlbums];
}

- (void)addAlbum:(Album*)album atIndex:(int)index
{
    [persistencyManager addAlbum:album atIndex:index];
    if (isOnline)
    {
        [httpClient postRequest:@"/api/addAlbum" body:[album description]];
    }
}

- (void)deleteAlbumAtIndex:(int)index
{
    [persistencyManager deleteAlbumAtIndex:index];
    if (isOnline)
    {
        [httpClient postRequest:@"/api/deleteAlbum" body:[@(index) description]];
    }
}
</code></pre>

<p>看一下 addAlbum:atIndex:。这个类首先更新本地数据，如果联网，它再更新远端服务器。这就是外观设计的长处；当一些系统外的类添加了一个新专辑，它不知道─也不需要知道─复杂的内部系统。</p>

<pre><code>提示：当在你的子系统里设计一个外观类的时候，记住没有任何东西可能阻止客户访问这些「隐藏」类。要多写些防御性的代码，不要想当然的认为所有客户都会用同样的方式使用你的外观类。
</code></pre>

<p>运行你的程序，你会看一个黑底空白内容的屏幕，像下面这样：</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2013/09/2013-09-01_12-08-44-211x320.png" alt="icon1" /></p>

<p>你需要在屏幕上显示一些专辑数据─这就需要使用到下面一个设计模式：装饰器 (Decorator)。</p>

<p><strong>设计模式系列文章</strong>：</p>

<p><a href="http://www.superqq.com/blog/2015/06/10/ios-she-ji-mo-shi-xi-lie-:kai-pian/">iOS 设计模式系列：开篇</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/11/ios-she-ji-mo-shi-xi-lie-:mvc-she-ji-mo-shi-zhong-de-guo-wang/">iOS 设计模式系列：MVC – 设计模式中的国王</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/">iOS 设计模式系列：Singleton – 单例模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/15/ios-she-ji-mo-shi-xi-lie-:facade-wai-guan-mo-shi/">iOS 设计模式系列：Facade – 外观模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/16/ios-she-ji-mo-shi-xi-lie-:decorator-zhuang-shi-qi-mo-shi/">iOS 设计模式系列：Decorator – 装饰器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/17/ios-she-ji-mo-shi-xi-lie-:adapter-gua-pei-qi-mo-shi/">iOS 设计模式系列：Adapter – 适配器模式</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/19/ios-she-ji-mo-shi-xi-lie-:memento-bei-wang-lu-mo-shi/">iOS 设计模式系列：Memento – 备忘录模式</a></p>
]]></content>
  </entry>
  
</feed>
