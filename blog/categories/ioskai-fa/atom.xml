<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-07-18T00:25:06+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSString的八条实用技巧]]></title>
    <link href="http://www.superqq.com/blog/2015/07/16/nsstringde-ba-tiao-shi-yong-ji-qiao/"/>
    <updated>2015-07-16T23:07:57+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/16/nsstringde-ba-tiao-shi-yong-ji-qiao</id>
    <content type="html"><![CDATA[<p>有一篇文章写了：<a href="http://www.superqq.com/blog/2015/07/11/ioskai-fa-zhi-nsstringde-ji-tiao-shi-yong-ji-qiao/">iOS开发之NSString的几条实用技巧</a> ， 今天这篇，我们讲讲NSString的八条实用技巧。大家可以收藏起来，方便开发随时可以复制粘贴。</p>

<h2>0.首字母大写</h2>

<p>代码：</p>

<pre><code>//首字母大写
NSString *string = @"ligang";
NSLog(@"string: %@",[string capitalizedString]);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 23:06:11.652 iOSStrongDemo[10279:3062010] string: Ligang
</code></pre>

<h2>1.分割字符串</h2>

<p>代码：</p>

<pre><code>//分割字符串
NSString *string = @"This is a iOSDevTip";
NSArray *array = [string componentsSeparatedByString:@"a"];
NSString *string1 = [array objectAtIndex:0];
NSString *string2 = [array objectAtIndex:1];
NSLog(@"string1:%@  string2:%@",string1,string2);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:40:39.559 iOSStrongDemo[10165:3055448] string1:This is   string2: iOSDevTip
</code></pre>

<h2>2.追加字符串</h2>

<p>代码：</p>

<pre><code>//追加字符串
NSMutableString *string = [[NSMutableString alloc] initWithString:@"I Love "];
[string appendString:@"China"];
NSLog(@"string:%@",string);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:42:32.305 iOSStrongDemo[10189:3056410] string:I Love China
</code></pre>

<h2>3.插入字符串</h2>

<p>代码：</p>

<pre><code>//插入字符串
NSMutableString *string = [[NSMutableString alloc] initWithString:@"I China"];
[string insertString:@"Love " atIndex:2];
NSLog(@"string: %@",string);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:44:10.706 iOSStrongDemo[10206:3057014] string: I Love China
</code></pre>

<h2>4.删除字符串</h2>

<p>代码：</p>

<pre><code>//删除字符串
NSMutableString *string = [[NSMutableString alloc] initWithString:@"I love China"];
[string deleteCharactersInRange:NSMakeRange(2, 4)];
NSLog(@"String1: %@",string);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:46:58.437 iOSStrongDemo[10219:3057749] String1: I  China
</code></pre>

<h2>5.判断是否包含前后缀</h2>

<p>代码：</p>

<pre><code>//判断是否包含前后缀
NSString *string = @"I love China";
BOOL isHasI = [string hasPrefix:@"I"];
BOOL isHasChina = [string hasSuffix:@"China"];
</code></pre>

<h2>6.替换字符串</h2>

<p>代码：</p>

<pre><code>//替换字符串
NSString *string = @"I love China";
NSString *replaceString = [string stringByReplacingOccurrencesOfString:@"love" withString:@"like"];
NSLog(@"replaceString:  %@",replaceString);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 22:56:07.405 iOSStrongDemo[10236:3059503] replaceString:  I like China
</code></pre>

<h2>7.去除字符串首尾的空格和换行符</h2>

<p>代码：</p>

<pre><code>//去除字符串首尾的空格和换行符
NSString *string = @" I love China ";
NSString *text = [string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
NSLog(@"text:%@",text);
</code></pre>

<p>打印：</p>

<pre><code>2015-07-16 23:00:47.845 iOSStrongDemo[10265:3061013] text:I love China
</code></pre>

<p>代码已经更新，demo下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过URL Scheme传递参数]]></title>
    <link href="http://www.superqq.com/blog/2015/07/15/tong-guo-url-schemechuan-di-can-shu/"/>
    <updated>2015-07-15T22:50:21+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/15/tong-guo-url-schemechuan-di-can-shu</id>
    <content type="html"><![CDATA[<p>有这么一个段子特别火：实体店终于翻身了，他们用铁一样的事实告诉淘宝和京东，互联网+再牛逼也干不过实体店。你再便宜，你有试衣间吗？百年修得同船渡，千年修得优衣库。众里寻他千百度，三里屯优衣库。最美的不是下雨天，而是和你在试衣间。</p>

<p>优衣库火了，你的朋友圈有没有被优衣库刷屏呀？据说还有视频传出来，各种版本的。有人竟然从我要视频，我是给还是不给呢？不知道优衣库的童鞋，赶紧百度一下吧！</p>

<h2>这会是优衣库的炒作吗？</h2>

<p>优衣库事件让优衣库狠狠的火了一把。不禁发问：这会是优衣库的炒作吗？不得而知。事件一经各大媒体报道出来之后，优衣库立刻发出声明。此事和我们没有半毛钱关系。</p>

<p>如果这真是一次炒作。那么优衣库的营销未免太低俗了，这将会大大降低优衣库在消费者心里的地位。以后来优衣库的人可能不是买衣服而是约炮。</p>

<p>如果这不是一次炒作。那么，这段视频上传的目的是什么呢？是男女主角想借此出名吗？可能性不是特别高，借此出名有什么好的呢！真正的目的也许只有当事人心里最清楚。</p>

<p>我问了北京的朋友，是否知道优衣库事件。朋友说，何止知道，天天从那里路过。现在有很多人在那里合影呢，三里屯优衣库俨然成了一个景点。</p>

<p><strong>热点总是一时的，借此炒作的人或许已达成目的。</strong>作为一名iOS开发程序员，我们只能继续写代码，改变世界。</p>

<p>上一篇文章讲到：<a href="http://www.superqq.com/blog/2015/07/14/xcode6-dot-4zhu-ce-url-schemebu-zou-xiang-jie/">Xcode6.4注册URL Scheme步骤详解</a>，这一篇继续来看看URL Scheme传递参数。</p>

<h2>通过注册的URL Scheme向目标APP传递参数</h2>

<p>通过URL Scheme启动APP很简单就可以做到，但有时候我们想在启动APP的时候传递一些参数，这个时候我们就可以通过URL Scheme自定义URL来传递参数了。</p>

<p>昨天我们在AppDelegate调用了UIApplicationDelegate的代理方法：</p>

<pre><code>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL*)url
{
    // 接受传过来的参数
    NSString *text = [[url host] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"打开啦"
                                           message:text
                                          delegate:nil
                                 cancelButtonTitle:@"OK"
                                 otherButtonTitles:nil];
    [alertView show];
    return YES;
}
</code></pre>

<p>我们来看看苹果给这个方法的注释：</p>

<pre><code>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url;  // Will be deprecated at some point, please replace with application:openURL:sourceApplication:annotation:
</code></pre>

<p>这个方法在未来将被废弃，可以用application:openURL:sourceApplication:annotation:来代替。</p>

<h2>URL传参格式</h2>

<p>昨天我们在<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a>注册的URL Scheme还记得是什么吗？你应该还有印象的就是iOS开发的ID：<strong>iOSDevTip</strong>。</p>

<p>假设我们想要传递两个参数分别是名字name和手机号phone，格式如下：</p>

<pre><code>iOSDevTip://?name=ligang&amp;phone=13888888888
</code></pre>

<p>有没有似曾相识的感觉。我们用get方式请求一个接口是不是就是这样的。</p>

<h2>被启动的APP处理传过来的参数</h2>

<pre><code>- (BOOL)application:(UIApplication *)application
        openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation
{
    NSLog(@"sourceApplication: %@", sourceApplication);
    NSLog(@"URL scheme:%@", [url scheme]);
    NSLog(@"URL query: %@", [url query]);

    // 接受传过来的参数
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"打开啦"
                                                        message:[url query]
                                                       delegate:nil
                                              cancelButtonTitle:@"OK"
                                              otherButtonTitles:nil];
    [alertView show];

    return YES;
}
</code></pre>

<p>当APP被启动是，会调用代理方法application:openURL:sourceApplication:annotation:。参数URL就是启动APP的URL，参数sourceApplication就是来源APP的Bundle ID。</p>

<p>我们依然通过Safari来测试，在Safari的地址栏中输入：iOSDevTip://?name=ligang&amp;phone=13888888888</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/scheme1.png" alt="scheme1" /></p>

<p>即可打开APP,看看参数是否传递过来：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/scheme2.png" alt="scheme2" /></p>

<p>最后我们看一下打印：</p>

<pre><code>2015-07-15 22:38:25.655 iOSStrongDemo[9983:2894855] sourceApplication: com.apple.mobilesafari
2015-07-15 22:38:28.664 iOSStrongDemo[9983:2894855] URL scheme:iosdevtip
2015-07-15 22:38:28.665 iOSStrongDemo[9983:2894855] URL query: name=ligang&amp;phone=13888888888
</code></pre>

<p>sourceApplication打印出来是com.apple.mobilesafari，从这里可以看出来，是从Safari启动我们的APP的。</p>

<p>我们虽然自定义了URL Scheme，但是我们不能阻止别人通过自定义的URL Scheme来打开我们的应用。怎么解决呢？</p>

<p>我们可以指定相应的sourceApplication，也就是相应的Bundle ID，通过Bundle ID来决定是否可以打开我们的APP：</p>

<pre><code>- (BOOL)application:(UIApplication *)application
        openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation
{
    NSLog(@"sourceApplication: %@", sourceApplication);
    NSLog(@"URL scheme:%@", [url scheme]);
    NSLog(@"URL query: %@", [url query]);

    if ([sourceApplication isEqualToString:@"com.3Sixty.CallCustomURL"]){
        // 接受传过来的参数
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"打开啦"
                                                            message:[url query]
                                                           delegate:nil
                                                  cancelButtonTitle:@"OK"
                                                  otherButtonTitles:nil];
        [alertView show];

        return YES;
    }else{
        return NO;
    }

}
</code></pre>

<p>这样我们就可以通过Bundle ID来决定是否允许打开我们的APP，demo下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6.4注册URL Scheme步骤详解]]></title>
    <link href="http://www.superqq.com/blog/2015/07/14/xcode6-dot-4zhu-ce-url-schemebu-zou-xiang-jie/"/>
    <updated>2015-07-14T23:34:16+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/14/xcode6-dot-4zhu-ce-url-schemebu-zou-xiang-jie</id>
    <content type="html"><![CDATA[<p>好消息：微信团队邀请我的iOS开发（id：<strong>iOSDevTip</strong>）微信公众号开通赞赏功能，以后我就可以光明正大的通过文章要饭啦。你的赞赏就是我最大的动力。</p>

<p>这是今天下午15：30收到的邀请：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/zanshang.png" alt="zanshang1" /></p>

<h2>微信赞赏功能</h2>

<p>为什么推出赞赏功能？微信公众号自2012年推出以来，一直成爆发式的增长。微信推出赞赏功能最重要的目的就是为了鼓励原创，鼓励创新。</p>

<p>之前，原创功能、赞赏功能和评论功能是一起邀请开通的。现在微信团队分三次邀请。现在我的iOS开发公众号，已经被邀请开通了原创和赞赏功能，下一步争取开通评论功能。</p>

<p>如果开通评论功能，我就可以更方便的和大家交流。一经邀请，我会第一时间告诉大家的。好消息，大家也知道啦。接下来继续回到正题，我们来谈谈iOS中的URL Scheme。</p>

<h2>URL Scheme的作用</h2>

<p>我们都知道苹果手机中的APP都有一个沙盒，APP就是一个信息孤岛，相互是不可以进行通信的。但是iOS的APP可以注册自己的URL Scheme，URL Scheme是为方便app之间互相调用而设计的。我们可以通过系统的OpenURL来打开该app，并可以传递一些参数。</p>

<p>例如：你在Safari里输入www.alipay.com，就可以直接打开你的支付宝app，前提是你的手机装了<a href="http://www.superqq.com/blog/2015/07/10/zhi-fu-bao-he-wei-xin-zai-chao-xi-shang-shui-geng-sheng-%5B%3F%5D-chou/">支付宝</a>。如果你没有装支付宝，应该显示的是支付宝下载界面，点击会跳到AppStore的支付宝下载界面。</p>

<p>URL Scheme必须能唯一标识一个APP，如果你设置的URL Scheme与别的APP的URL Scheme冲突时，你的APP不一定会被启动起来。因为当你的APP在安装的时候，系统里面已经注册了你的URL Scheme。</p>

<p>一般情况下，是会调用先安装的app。但是iOS的系统app的URL Scheme肯定是最高的。所以我们定义URL Scheme的时候，尽量避开系统app已经定义过的URL Scheme。</p>

<h2>注册URL Scheme</h2>

<h3>1.在info.plist里添加URL types</h3>

<p>每一个项目里面都会有一个info.plist配置文件。找到info.plist，右键选择Add Row，然后选择URL types。如图所示：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/url1.jpg" alt="url1" /></p>

<h3>2.添加URL Schemes</h3>

<p>添加完URL types，点击展开。右键选择Add Row，添加URL Schemes：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/url2.jpg" alt="url2" /></p>

<h3>3.设置URL Schemes</h3>

<p>设置URL Schemes为iOSDevTip</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/url3.jpg" alt="url3" /></p>

<h3>4.设置URL Identifier</h3>

<p>URL Identifier是自定义的 URL scheme 的名字，一般采用反转域名的方法保证该名字的唯一性，比如 com.iOSStrongDemo.www</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/url4.jpg" alt="url4" /></p>

<h2>添加成功启动提示</h2>

<p>为了方便测试，我们在AppDelegate里面添加一个UIAlertView，当app被成功打开时，会提出提示：</p>

<pre><code>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL*)url
{
    // 接受传过来的参数
    NSString *text = [[url host] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"打开啦"
                                           message:text
                                          delegate:nil
                                 cancelButtonTitle:@"OK"
                                 otherButtonTitles:nil];
    [alertView show];
    return YES;
}
</code></pre>

<h2>Safari启动自定义的URL Schemes APP</h2>

<p>既然已经配置好URL Schemes，那么我们可以来款速测试一下，我们设置的URL Schemes是否有效。打开Safari，在地址栏里输入：iOSDevTip://</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/url6.png" alt="url6" /></p>

<p>果然成功打开：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/url5.png" alt="url5" /></p>

<p>也可以在地址栏中输入：iOSDevTip://com.iOSStrongDemo.www。也是可以打开注册了URL Schemes的APP的。</p>

<h2>通过另一个APP启动注册了URL Schemes的APP</h2>

<pre><code> NSString *url = @"iOSDevTip://";
//    NSString *url = @"iOSDevTip://com.iOSStrongDemo.www";
if ([[UIApplication sharedApplication]
     canOpenURL:[NSURL URLWithString:url]])
{
    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];
}
else
{
    NSLog(@"can not open URL scheme iOSDevTip");
}
</code></pre>

<p>打开注册iOSDevTip的APP格式为: URL Scheme://URL identifier，直接调用URL Scheme也可打开程序, URL identifier是可选的。</p>

<p>注册URL Scheme就是这么简单。下一篇会分享如何通过URL Scheme传递参数。demo下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从app跳到设置界面]]></title>
    <link href="http://www.superqq.com/blog/2015/07/13/cong-apptiao-dao-she-zhi-jie-mian/"/>
    <updated>2015-07-13T23:50:45+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/13/cong-apptiao-dao-she-zhi-jie-mian</id>
    <content type="html"><![CDATA[<p>这次去郑州主要是参加大学同学的婚礼。匆匆而来，匆匆而回。时间安排的好紧，还没有来得及多看两眼我的大好中原。</p>

<p>来参加婚礼的还有其他几位同学，有的真是多年不见。见面之后相互虚寒一番，一起讨论讨论各自的近况。时间飞逝，让这样的相遇变得非常珍贵。</p>

<p>这次的婚礼，别有一番风味。</p>

<h2>第一次在教堂里参加婚礼</h2>

<p>我的这位同学，他是一位虔诚的基督徒，他们的婚礼也理所当然的在教堂举行。教堂是一个神圣庄严的地方，虽然我不是一名基督徒，但是我依然怀有一颗虔诚的心。</p>

<p>婚礼还是相当热闹的。有牧师为他们证婚，真的是很幸福。新娘也感动的眼泪都留下来了。</p>

<p>婚礼结束之后，抽空拉着另外一个同学，加上新郎，我们三兄弟合了一张影。这张照片可以发给大家欣赏一下：</p>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/hunli.png" alt="1" /></p>

<p>看到这张我不由得说一句：又长胖了！好吧，闲话就絮叨这里。今天给大家分享一个小功能：从app跳到设置界面。</p>

<h2>从app跳到设置界面</h2>

<p>直接上代码：</p>

<pre><code> NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
 if ([[UIApplication sharedApplication] canOpenURL:url]) {
     [[UIApplication sharedApplication] openURL:url];
 }
</code></pre>

<p>上面这段代码要在iOS 8以上的系统使用。一般做智能家居app的，需要到设置界面连接wifi，但是苹果没有提供这样的接口。所以可以退而求其次，跳到系统的设置界面。</p>

<p>想测试的童鞋请下载demo：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>

<h2>回复关键词获取相应文章</h2>

<p>公众号iOS开发：<strong>iOSDevTip</strong>，已经发展一年多的时间，已经积累了很多优秀的文章。也许能帮到一些小忙。</p>

<p>我告诉大家，如何找到这些优秀的文章：</p>

<ol>
<li>查看历史消息</li>
<li>关键词回复，先回复“m”，获取目录。目录里面详细讲解了，哪些关键词对应哪些文章。</li>
</ol>


<p>有什么不懂得可以随时联系我，直接在后台回复就可以，也可以加我的微信：<strong>chinaligang</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之NSString的几条实用技巧]]></title>
    <link href="http://www.superqq.com/blog/2015/07/11/ioskai-fa-zhi-nsstringde-ji-tiao-shi-yong-ji-qiao/"/>
    <updated>2015-07-11T22:57:21+08:00</updated>
    <id>http://www.superqq.com/blog/2015/07/11/ioskai-fa-zhi-nsstringde-ji-tiao-shi-yong-ji-qiao</id>
    <content type="html"><![CDATA[<p>这两天上海台风“灿鸿”来袭，又是刮风，又是下雨。这雨已经连下好多天了，再不出太阳人都发霉了。不过无论再怎么样，也不要让天气破坏了心情。</p>

<p>台风来了，刚好我要走了。周六一大早5点就爬起来，雨下的不小，风也特别大。我是7点多的动车。从我家过去大概需要一个半小时的时间。所以得提前起来，省的匆匆忙忙。</p>

<h2>使用Uber的感受</h2>

<p>我还一直担心，这天气可能连车都打不到。抱着尝试的心态，我打开了Uber，为什么打开的是Uber，而不是滴滴，也不是快的呢。因为我的Uber上还有优惠劵，而且还有一个重要的原因，Uber上面的人民优步，不仅价格比出租车便宜，而且服务态度那也是相当好的。</p>

<p>看来我的担心是多余的。我打开Uber点了打车，不到10s，就有司机抢单成功。我连目的地都没有来得及输入，这也是滴滴和快的不具备的。这一点我觉得真的比较人性。因为很多司机都是看距离抢单的，Uber这样做估计就是杜绝这样的事情发生。</p>

<p>我并不说给Uber打广告的，再说了Uber也没给我钱。我之前一直用的都是滴滴和快的。我说的都是事实，大家可以自己尝试尝试。</p>

<p>写这篇文章时，我刚到郑州，在同学安顿的宾馆里。虽然奔波了一天，有些疲惫。还是要给大家准备一些NSString的小技巧。希望你能把iOS开发：<strong>iOSDevTip</strong> 介绍给更多你身边的朋友，这就是对我最大的支持。</p>

<h2>NSString的几条小技巧</h2>

<h3>创建字符串</h3>

<p><strong>常量字符串</strong></p>

<pre><code>NSString *string = @"i am an iOSDevTip!";
</code></pre>

<p><strong>常用创建方法</strong></p>

<pre><code>NSString *string = [[NSString alloc] init];

string = @"i am an iOSDevTip too!";
</code></pre>

<p><strong>用initWithString创建字符串</strong></p>

<pre><code>NSString *string = [[NSString alloc] initWithString:@"iOSDevTip is here!"];
</code></pre>

<h3>格式化创建字符串</h3>

<p><strong>int格式化字符串</strong></p>

<pre><code>int age = 20;
NSString *personAge = [NSString stringWithFormat:@"this person age is %d",age];
</code></pre>

<p>既然int格式化字符串，那么float、double等，也可以格式化字符串。</p>

<p><strong>NSString格式化字符串</strong></p>

<pre><code>NSString *name = @"iOSDevTip";
NSString *personName = [NSString stringWithFormat:@"this person name is %@",name];
</code></pre>

<h3>字符串比较</h3>

<p><strong>isEqualToString方法比较</strong></p>

<pre><code>//比较字符串
NSString *stingOne = @"This is an iOSDevTip!";
NSString *stringTwo = @"This is an iOSDevTip!";
BOOL result = [stingOne isEqualToString:stringTwo];
</code></pre>

<p><strong>compare方法比较</strong></p>

<pre><code>BOOL result = [stingOne compare:stringTwo] == NSOrderedSame;
</code></pre>

<p>compare:方法返回值类型为NSComparisonResult。而NSComparisonResult有下面几个枚举值。</p>

<pre><code>typedef NS_ENUM(NSInteger, NSComparisonResult) {NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending};
</code></pre>

<h3>字符串大小写转换</h3>

<p><strong>小写转大写</strong></p>

<pre><code> NSString *string = @"This is an iOSDevTip!";
[string lowercaseString];
</code></pre>

<p><strong>大写转小写</strong></p>

<pre><code>NSString *string = @"This is an iOSDevTip!";
[string uppercaseString];
</code></pre>

<h3>截取字符串</h3>

<p><strong>substringToIndex截取字符串</strong></p>

<pre><code>NSString *string = @"This is a operation string!";
NSString *subToString = [string substringToIndex:6];
</code></pre>

<p>截取的subToString为This i</p>

<p><strong>substringFromIndex截取字符串</strong></p>

<pre><code>NSString *subFromString = [string substringFromIndex:6];
</code></pre>

<p>截取的subFromString为s a operation string!</p>

<p><strong>substringWithRange截取字符串</strong></p>

<pre><code>NSString *rangeString = [string substringWithRange:NSMakeRange(6, 3)];
</code></pre>

<p>截取的rangeString为s a!</p>

<h3>判断字符串是否包含另一个字符串</h3>

<p><strong>rangeOfString判断</strong></p>

<pre><code>NSString *string1 = @"This is a iOSDevTip";
NSString *string2 = @"iOSDevTip";
NSRange range = [string1 rangeOfString:string2];
NSInteger location = range.location;
NSInteger leight = range.length;
NSString *logString = [[NSString alloc] initWithString:[NSString stringWithFormat:@"Location:%ld,Leight:%ld",location,leight]];
NSLog(@"logString:%@",logString);
</code></pre>

<p>打印出来：</p>

<pre><code>iOSStrongDemo[8837:2221170] logString:Location:10,Leight:9
</code></pre>

<p>如果Leight为0，说明不包含。还有更多关于NSString的用法，大家一起探索吧。代码下载地址：<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>
]]></content>
  </entry>
  
</feed>
