<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2016-03-09T21:43:22+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[刚刚在线-让学习iOS开发更简单]]></title>
    <link href="http://www.superqq.com/blog/2016/03/02/ggteach-learn-ios-simply/"/>
    <updated>2016-03-02T20:49:56+08:00</updated>
    <id>http://www.superqq.com/blog/2016/03/02/ggteach-learn-ios-simply</id>
    <content type="html"><![CDATA[<p>非常兴奋的告诉大家一个好消息：刚刚在线官网正式上线啦！欢迎大家访问！官网地址：</p>

<pre><code>www.ggteach.com
</code></pre>

<p>刚刚在线的使命-让学习iOS开发更简单！我们的团队有30多位实战讲师，将为大家提供更多的技术分享、视频直播、实战项目等等。</p>

<h2>本周六技术分享</h2>

<p>好消息接连不断，技术分享说来就来！本周六晚上8点，注意时间噢！可以提前关注<strong>刚刚在线教育</strong>直播间，以免到时候找不到。</p>

<h3>技术分享简介：</h3>

<pre><code>斗鱼技术分享课程
主题：《App Thinng》
时间：2016-03-5（周六）晚8：00 至 9：00
斗鱼房间：刚刚在线教育
地址：http://www.douyutv.com/ggteach
大家可以提前关注。 
</code></pre>

<p>&mdash;&mdash;美丽的分割线&mdash;&mdash;&ndash;</p>

<h2>编程是一种生活方式</h2>

<p>今天在回来的路上看到一个好朋友分享了一篇文章《美国监狱新趋势&ndash;学编程》</p>

<p><img src="http://www.superqq.com/images/ggteach01.jpg" alt="1" /></p>

<p>是的，不可思议。有网友表示：想去美国监狱，包吃住还免费学编程！令人震惊的是：“他们中没有人因再次犯罪而重返监狱，他们走了一条正确的路。”</p>

<p>很多美国人已经意识到编程的重要性！编程不再是一项找工作的技能，而是一种生活方式，每个人都多少应该懂一点编程。</p>

<p><img src="http://www.superqq.com/images/ggteach02.jpg" alt="2" /></p>

<p>为了呼吁美国人民学习编程知识，奥巴马甚至还亲自挽起袖子写了一段javascript代码，这也让他成为美国历史上第一位会写代码的总统。（虽然写得不怎么样）</p>

<h2>国内编程现状</h2>

<p>在中国的大学里面，计算机课程只是讲一些理论知识。很多大学生（包括计算机系）毕业之后，很难靠自己掌握的编程知识找到一份工作。这是一件何其可悲的事情。</p>

<p>很多同学无奈之下，会选择线下的培训班，但是培训班的费用高的让人望而却步。有的同学因为昂贵的费用，这一生可能就与编程无缘；</p>

<p>有的同学可能会咬牙坚持贷款2万甚至更多，来学习一项编程的技能。还未入社会，就要背负着为银行打工的重担。</p>

<h2>刚刚在线的诞生</h2>

<p>刚刚在线的诞生就是为了帮助广大iOS开发爱好者，让学习iOS开发更简单！</p>

<p>刚刚在线推出iOS开发技术直播课程，直播课程将免费开放，直播课程涉及iOS开发常用的控件、网络请求、第三方类库等。</p>

<p>同时，刚刚在线推出iOS开发社群。为社群成员提供高级进阶、在线答疑、实战项目、面试技巧、独立博客、职位推荐等服务。</p>

<p>刚刚在线团队成员来自北京、上海、广州、美国、日本等地方，每一位讲师都是实战派！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐：iOS开发面试题整理（一）]]></title>
    <link href="http://www.superqq.com/blog/2015/12/15/ios-dev-interview/"/>
    <updated>2015-12-15T23:09:50+08:00</updated>
    <id>http://www.superqq.com/blog/2015/12/15/ios-dev-interview</id>
    <content type="html"><![CDATA[<p>年底了估计有朋友已经坐不住了，前面有一篇文章介绍<a href="http://mp.weixin.qq.com/s?__biz=MzA3NzM0NzkxMQ==&amp;mid=402358456&amp;idx=1&amp;sn=0494a7313998527e7950f936a24e9ce7#rd">《 年底程序猿迁徙的5大理由，你占了几个？ 》</a>。你是不是也占几个呢？</p>

<p>跳槽不可避免会遇到面试，有些公司会找一些奇葩的面试题来坑我们。所以我们不得不做好防备、提前备战，怎么感觉跟备考一样呢？</p>

<p>我不得不遗憾的告诉你，这比备考重要多了。面试题做不好，很有可能错过一次大好机会。很早之前我收集了很多面试题，以后都分享出来。大家如果手里有不错的面试题目，可以直接发给我，我的邮箱：<strong>worldligang@163.com</strong>，我也会分享给大家！</p>

<p>本文挡会持续更新，欢迎关注公众号iOS开发：iOSDevTip 关注之后回复：面试</p>

<p><img src="http://images.90159.com/icon/newteiba.png" alt="newteiba.png" /></p>

<h2>1. Object-C有多继承吗？没有的话用什么代替？</h2>

<p>cocoa 中所有的类都是NSObject 的子类</p>

<p>多继承在这里是用protocol 委托代理 来实现的 你不用去考虑繁琐的多继承 ,虚基类的概念. ood的多态特性 在 obj-c 中通过委托来实现.</p>

<h2>2. Object-C有私有方法吗？私有变量呢？</h2>

<p>objective-c – 类里面的方法只有两种, 静态方法和实例方法. 这似乎就不是完整的面向对象了,按照OO的原则就是一个对象只暴露有用的东西. 如果没有了私有方法的话, 对于一些小范围的代码重用就不那么顺手了.</p>

<p>在类里面声名一个私有方法</p>

<pre><code>@interface Controller : NSObject { NSString *something; } 
+ (void)thisIsAStaticMethod; – (void)thisIsAnInstanceMethod;
 @end

@interface Controller (private) 
- (void)thisIsAPrivateMethod; 
- @end
</code></pre>

<p>@private可以用来修饰私有变量</p>

<p>在Objective‐C中，所有实例变量默认都是私有的，所有实例方法默认都是公有的</p>

<h2>3. #import和#include的区别，@class代表什么？</h2>

<p>@class一般用于头文件中需要声明该类的某个实例变量的时候用到，在m文件中还是需要使用#import‘</p>

<p>而#import比起#include的好处就是不会引起重复包含</p>

<h2>4. 线程和进程的区别？</h2>

<p>进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。</p>

<p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p>

<h2>5. 堆和栈的区别？</h2>

<p>管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。 申请大小：</p>

<p>栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</p>

<p>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>

<p>碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出</p>

<p>分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。 分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的。</p>

<h2>6. Object-C的内存管理？</h2>

<p>1.当你使用new,alloc和copy方法创建一个对象时,该对象的保留计数器值为1.当你不再使用该对象时,你要负责向该对象发送一条release或autorelease消息.这样,该对象将在使用寿命结束时被销毁.</p>

<p>2.当你通过任何其他方法获得一个对象时,则假设该对象的保留计数器值为1,而且已经被设置为自动释放,你不需要执行任何操作来确保该对象被清理.如果你打算在一段时间内拥有该对象,则需要保留它并确保在操作完成时释放它.</p>

<p>3.如果你保留了某个对象,你需要(最终)释放或自动释放该对象.必须保持retain方法和release方法的使用次数相等.</p>

<h2>7 浅复制和深复制的区别？</h2>

<p>答案：浅层复制：只复制指向对象的指针，而不复制引用对象本身。</p>

<p>深层复制：复制引用对象本身。</p>

<p>意思就是说我有个A对象，复制一份后得到A_copy对象后，对于浅复制来说，A和A_copy指向的是同一个内存资源，复制的只不过是是一个指针，对象本身资源
还是只有一份，那如果我们对A_copy执行了修改操作,那么发现A引用的对象同样被修改，这其实违背了我们复制拷贝的一个思想。深复制就好理解了,内存中存在了
两份独立对象本身。</p>

<p>用网上一哥们通俗的话将就是：</p>

<p>浅复制好比你和你的影子，你完蛋，你的影子也完蛋</p>

<p>深复制好比你和你的克隆人，你完蛋，你的克隆人还活着。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果公司即将放假8天暂停APP提交审核]]></title>
    <link href="http://www.superqq.com/blog/2015/12/12/apple-commit-7-day/"/>
    <updated>2015-12-12T19:52:50+08:00</updated>
    <id>http://www.superqq.com/blog/2015/12/12/apple-commit-7-day</id>
    <content type="html"><![CDATA[<p>圣诞节对于美国人来说是一个重要的节日。每年的圣诞节苹果公司都会全员放假8天时间，时间2015年12月22日之2015年12月29日。今年也不例外。</p>

<p>昨天登录苹果开发者平台: <a href="http://developer.apple.com">http://developer.apple.com</a> 就有提示：</p>

<p><img src="http://images.90159.com/12/AppStore.png" alt="dev" /></p>

<p>提示的很清楚：</p>

<pre><code>我们将于这段时间休假。在此期间，我们会停用一些功能，如 APP 提交等...
</code></pre>

<p>在放假这段时间里，苹果将会暂停AppStore推荐、审核、提交、更新等工作。所以这段时间内更新、上架都会受到影响。</p>

<p>元旦之前，想要上架的朋友，必须得抓紧时间啦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9横竖屏设置的处理方法和实例讲解]]></title>
    <link href="http://www.superqq.com/blog/2015/12/07/ios9-interface-orientation/"/>
    <updated>2015-12-07T23:30:03+08:00</updated>
    <id>http://www.superqq.com/blog/2015/12/07/ios9-interface-orientation</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://www.superqq.com/blog/2015/12/07/ios9-interface-orientation/">http://www.superqq.com/blog/2015/12/07/ios9-interface-orientation/</a></p>

<p>在一般的视频类APP播放的时候都会支持横屏，这样做的好处就是便于观看。你的项目中支持横屏吗？我们一起了解一下，在iOS9中横竖屏设置的处理方法吧！</p>

<h2>支持横竖屏配置</h2>

<p>在iOS6以后，如果APP需要支持横屏，需要在xcode设置中General里面进行勾选配置：</p>

<!--more-->


<p><img src="http://images.90159.com/12/orientation1.png" alt="orientation1" /></p>

<p>配置完成之后，我们可以看一下Info.plist里面的Supported interface orientations选项也相应的改变了。如下图：</p>

<p><img src="http://images.90159.com/12/orientation2.png" alt="orientation2" /></p>

<p>当然，我们也可以直接在Info.plist进行配置。</p>

<h2>支持横竖屏方法</h2>

<p>在iOS6之前我们可以直接用这个方法进行配置：</p>

<pre><code>- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation NS_DEPRECATED_IOS(2_0, 6_0) __TVOS_PROHIBITED;
</code></pre>

<p>在iOS6之后，这个方法被NS_DEPRECATED_IOS，也就是废弃掉了。废弃了这个方法，苹果相应的也给出了新的方法来代替：</p>

<pre><code>// New Autorotation support.
- (BOOL)shouldAutorotate NS_AVAILABLE_IOS(6_0) __TVOS_PROHIBITED;
- (UIInterfaceOrientationMask)supportedInterfaceOrientations NS_AVAILABLE_IOS(6_0) __TVOS_PROHIBITED;
</code></pre>

<p>我们可以看到iOS6之前是一个方法，在iOS6之后变成两个方法了，一个是是否旋转的方法，一个是支持的方向的方法。</p>

<h2>实例一：</h2>

<p>假设：我们ViewController是直接加载window的self.window.rootViewController上面的。代码如下：</p>

<pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    ViewController *vc = [[ViewController alloc] init];
    self.window.rootViewController = vc;
    [self.window makeKeyAndVisible];
    return YES;
}
</code></pre>

<p>如果我们要是想支持上面General里勾选的方向（竖屏、横屏向左已经横屏向右）该如何实现呢？首先，我们应该设置让他支持旋转，然后在设置支持的方向。代码如下：</p>

<pre><code>//支持旋转
-(BOOL)shouldAutorotate{
   return YES;
}
//支持的方向
- (UIInterfaceOrientationMask)supportedInterfaceOrientations {
    return UIInterfaceOrientationMaskAllButUpsideDown;
}
</code></pre>

<p>其中UIInterfaceOrientationMask是一个枚举：</p>

<pre><code>typedef NS_OPTIONS(NSUInteger, UIInterfaceOrientationMask) {
    UIInterfaceOrientationMaskPortrait = (1 &lt;&lt; UIInterfaceOrientationPortrait),
    UIInterfaceOrientationMaskLandscapeLeft = (1 &lt;&lt; UIInterfaceOrientationLandscapeLeft),
    UIInterfaceOrientationMaskLandscapeRight = (1 &lt;&lt; UIInterfaceOrientationLandscapeRight),
    UIInterfaceOrientationMaskPortraitUpsideDown = (1 &lt;&lt; UIInterfaceOrientationPortraitUpsideDown),
    UIInterfaceOrientationMaskLandscape = (UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight),
    UIInterfaceOrientationMaskAll = (UIInterfaceOrientationMaskPortrait | UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight | UIInterfaceOrientationMaskPortraitUpsideDown),
    UIInterfaceOrientationMaskAllButUpsideDown = (UIInterfaceOrientationMaskPortrait | UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight),
} __TVOS_PROHIBITED;    
</code></pre>

<p>可以根据自己的需求来选择。上面我们说了假设这个条件，如果rootViewController上导航，我们直接在ViewController里面设置，这个方法就不灵了。（大家可以自己测试一下）</p>

<h2>实例二：</h2>

<p>为什么是导航上面的方法就不灵了呢？原因很简单，我们没有设置导航支持的方向。别忘了UINavigationController也是UIViewController的子类。需要受到同样的待遇的。</p>

<p>如何设置呢？我们可以创建一个UINavigationController的子类，假设叫GGPublicNavigationViewController。然后，我们在GGPublicNavigationViewController.m文件里面也实现着两个方法：</p>

<pre><code>//支持旋转
-(BOOL)shouldAutorotate{
   return YES;
}
//支持的方向
- (UIInterfaceOrientationMask)supportedInterfaceOrientations {
    return UIInterfaceOrientationMaskAllButUpsideDown;
}
</code></pre>

<p>这样设置之后，即使我们push进去的UIViewController没有实现上面的连个方法，也是可以支持横屏的。也就是说，我们push的所有都支持横屏。这个做法是不是很暴力！</p>

<h2>实例三：</h2>

<p>有些童鞋会问了，如何控制每个界面支持的方向呢？这也是可以办到的，在GGPublicNavigationViewController不能写死支持哪个。我们可以这么写：</p>

<pre><code>-(BOOL)shouldAutorotate{
    return [self.topViewController shouldAutorotate];
}
//支持的方向
- (UIInterfaceOrientationMask)supportedInterfaceOrientations {
    return [self.topViewController supportedInterfaceOrientations];;
}
</code></pre>

<p>self.topViewController是当前导航显示的UIViewController，这样就可以控制每个UIViewController所支持的方向啦！</p>

<p>好啦，关于iOS9中横竖屏的处理就说这么多吧！（其实iOS7、iOS8也是这么设置的）如果你觉得文章还不错，分享一下吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIP群福利：Git使用教程（视频+PPT）]]></title>
    <link href="http://www.superqq.com/blog/2015/12/05/git-use-video-ppt/"/>
    <updated>2015-12-05T20:07:12+08:00</updated>
    <id>http://www.superqq.com/blog/2015/12/05/git-use-video-ppt</id>
    <content type="html"><![CDATA[<p>天才帝一步应用源代码分享到<a href="http://www.superqq.com/blog/2015/11/19/create-high-efficiency-ios-group/">iOS开发实战交流VIP群</a>，已经有不少朋友下载。这个APP也是一个小小的想法，希望能激发大家的灵感，做出更多有意义的属于自己的APP。</p>

<p>iOS开发实战交流VIP群已经有几百位朋友加入，这里是一个非常不错的交流平台，欢迎更多朋友加入！详情点击这里。</p>

<p>愿大家除了思维上、技术上有所提高，更能成为网络上无话不谈的知心朋友！</p>

<p>今天给大家分享Git使用教程：</p>

<h2>Git是什么？</h2>

<!--more-->


<p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。作为一名iOS开发者，应该掌握！当然，也有朋友用SVN来管理，SVN也是有相应的命令。</p>

<p>在使用Git之前，我还用过最笨的办法通过手动来管理代码。管理起来相当不便，尤其是团队多人开发时，根本无法用手动来管理代码。</p>

<p>直到接触的Git，才感受到它的强大。Git其实没有大家想象的那么难，刚开始接触的时候，可能不知道如何下手。当你真正的用一段时间之后，你会掌握一些常用的命令，比如：git status、git commit -m “message”、也会理解里面的一些术语，比如仓库、分支等等。</p>

<h2>Git视频教程</h2>

<p>为了帮助大家快速上手Git，上周录制了一期视频教程《Git使用教程》已经上传到iOS开发实战交流VIP群。欢迎大家到群文件里面下载。</p>

<p>视频里面有讲到用Homebrew来安装Git，大家电脑上如果没有装Homebrew，可以通过下面的命令来安装：</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre>

<p>Homebrew的官方：</p>

<pre><code>http://brew.sh/
</code></pre>

<p>如果在看视频教程中，遇到问题，可以到VIP群里讨论。来吧，一起征服Git！</p>

<h2>PPT截图</h2>

<p>PPT里面整理了Git的常用命令、别名设置、一些资料网站等等，我把PPT里面的内容整理出来，大家一起学习：</p>

<p><img src="http://images.90159.com/git/1.png" alt="1" />
<img src="http://images.90159.com/git/2.png" alt="1" />
<img src="http://images.90159.com/git/3.png" alt="1" />
<img src="http://images.90159.com/git/4.png" alt="1" />
<img src="http://images.90159.com/git/5.png" alt="1" />
<img src="http://images.90159.com/git/6.png" alt="1" />
<img src="http://images.90159.com/git/7.png" alt="1" />
<img src="http://images.90159.com/git/8.png" alt="1" />
<img src="http://images.90159.com/git/9.png" alt="1" />
<img src="http://images.90159.com/git/10.png" alt="1" />
<img src="http://images.90159.com/git/11.png" alt="1" />
<img src="http://images.90159.com/git/12.png" alt="1" />
<img src="http://images.90159.com/git/13.png" alt="1" />
<img src="http://images.90159.com/git/14.png" alt="1" />
<img src="http://images.90159.com/git/15.png" alt="1" />
<img src="http://images.90159.com/git/16.png" alt="1" />
<img src="http://images.90159.com/git/17.png" alt="1" />
<img src="http://images.90159.com/git/18.png" alt="1" />
<img src="http://images.90159.com/git/19.png" alt="1" />
<img src="http://images.90159.com/git/20.png" alt="1" />
<img src="http://images.90159.com/git/21.png" alt="1" />
<img src="http://images.90159.com/git/22.png" alt="1" />
<img src="http://images.90159.com/git/23.png" alt="1" />
<img src="http://images.90159.com/git/24.png" alt="1" />
<img src="http://images.90159.com/git/25.png" alt="1" />
<img src="http://images.90159.com/git/26.png" alt="1" />
<img src="http://images.90159.com/git/27.png" alt="1" />
<img src="http://images.90159.com/git/28.png" alt="1" /></p>
]]></content>
  </entry>
  
</feed>
