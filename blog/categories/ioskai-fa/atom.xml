<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-10-29T10:52:26+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIViewController的edgesForExtendedLayout属性]]></title>
    <link href="http://www.superqq.com/blog/2015/10/09/uiviewcontroller-rectedge/"/>
    <updated>2015-10-09T16:36:41+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/09/uiviewcontroller-rectedge</id>
    <content type="html"><![CDATA[<p>想必大家都遇到一种情况，明明y坐标设置的是0，但是总是被讨厌的导航栏给遮住。比如下面这个情况：</p>

<pre><code>UILabel *label = [[UILabel alloc] init];
label.frame = CGRectMake(10, 0, SCREEN.width - 20, 88);
label.backgroundColor = [UIColor redColor];
label.text = @"关注公众号iOS开发：iOSDevTip";
label.textColor = [UIColor whiteColor];
label.textAlignment = NSTextAlignmentCenter;
[self.view addSubview:label];
</code></pre>

<p>一起来看看效果：</p>

<p><img src="http://images.90159.com/10/RectEdge2.png" alt="RectEdge2" /></p>

<p>是不是很讨厌！其实，在iOS 7中，UIViewController引入了一个新的属性：edgesForExtendedLayout。 这个属性的默认值是UIRectEdgeAll。当你的容器是UINavigationController的shih，默认的布局就是从状态栏的顶部开始的。这就是为什么你设置的控件都往上漂移了66ot的原因。</p>

<pre><code>@property(nonatomic,assign) UIRectEdge edgesForExtendedLayout NS_AVAILABLE_IOS(7_0); // Defaults to UIRectEdgeAll
</code></pre>

<p>那么如何解决这个问题呢？有两种方法。</p>

<h2>方法一：改变edgesForExtendedLayout</h2>

<pre><code>self.edgesForExtendedLayout = UIRectEdgeNone;
</code></pre>

<p>将edgesForExtendedLayout属性设置为UIRectEdgeNone，这样布局就是从导航栏下面开始了。设置之后，再来看看效果：</p>

<p><img src="http://images.90159.com/10/RectEdge1.png" alt="RectEdge1" /></p>

<h2>方法二：导航栏半透明属性设置为NO</h2>

<pre><code>@property(nonatomic,assign,getter=isTranslucent) BOOL translucent NS_AVAILABLE_IOS(3_0) UI_APPEARANCE_SELECTOR; // Default is NO on iOS 6 and earlier. Always YES if barStyle is set to UIBarStyleBlackTranslucent
</code></pre>

<p>在iOS 6之前（包括iOS 6）translucent默认就是NO，在iOS 7就默认是YES了。</p>

<pre><code>self.navigationController.navigationBar.translucent = NO;
</code></pre>

<p>将导航栏的半透明属性关闭掉，布局也是从导航栏下面开始了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[报错：You Must Rebuild It With Bitcode Enabled (Xcode Setting ENABLE_BITCODE)（解决方案）]]></title>
    <link href="http://www.superqq.com/blog/2015/09/29/rebuild-bitcode-enable/"/>
    <updated>2015-09-29T15:08:00+08:00</updated>
    <id>http://www.superqq.com/blog/2015/09/29/rebuild-bitcode-enable</id>
    <content type="html"><![CDATA[<p>马上就要十一放假啦！大家是不是都很期待这一天到来，哈哈。相信有不少人跟我一样，早就请三天假回家了吧。希望大家十一都玩的开心噢！</p>

<p>今天在家里闲来无事，我就用Xcode7.0建一个项目。然后，引入一个第三方库，竟然运行不起来。报错如下：</p>

<p><img src="http://images.90159.com/09/error1.png" alt="1" /></p>

<p>我把错误提示复制出来，方便大家搜索：</p>

<pre><code>ld: 'XXX' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
</code></pre>

<p>Xcode7.0默认是开启Enable Bitcode的，如果你导入的一些第三方库在编译的时候没有Enable Bitcode 的话，就会导致报错。</p>

<p>解决方法有两种：</p>

<p>方法一：使用Enable Bitcode的第三方库</p>

<p>方法二：将工程中的Enable Bitcode设置为NO</p>

<p><img src="http://images.90159.com/09/error2.png" alt="1" /></p>

<p>如果你有更好的解决方法，记得告诉我噢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITablView上下滑动控制底部按钮的出现和消失]]></title>
    <link href="http://www.superqq.com/blog/2015/09/01/uitablview-up-down-slide/"/>
    <updated>2015-09-01T00:49:19+08:00</updated>
    <id>http://www.superqq.com/blog/2015/09/01/uitablview-up-down-slide</id>
    <content type="html"><![CDATA[<p>今天我们一起来做一个好玩的功能，通过UITablView上下滑动控制底部按钮的出现和消失。先来看看效果：</p>

<p><img src="http://images.90159.com/09/bottombutton.gif" alt="1" /></p>

<h2>需求分析</h2>

<p>要做一个这样的功能，对你来说应该不难，实现的方式也有很多。我们来分析一下要实现那几个小功能点：</p>

<ul>
<li>UITablView向上滑动，底部按钮消失</li>
<li>UITablView向下滑动，底部按钮出现</li>
<li>UITablView滑动到底部，底部按钮出现</li>
</ul>


<p>主要就是这三个小功能点。那么很简单，我们只需要判断UITablView是往上滑动，还是往下滑动，以及判断UITablView是否滑动到底部即可。</p>

<h2>代码实现</h2>

<h3>创建一个底部按钮</h3>

<pre><code>self.bottomButton = [UIButton buttonWithType:UIButtonTypeCustom];
self.bottomButton.frame = CGRectMake(SCREEN.width / 2 - 25, SCREEN.height - 50, 50, 50);
[self.bottomButton setBackgroundImage:[UIImage imageNamed:@"bottom"] forState:UIControlStateNormal];
[self.view addSubview:self.bottomButton];
</code></pre>

<p>既然是控制按钮的出现和消失，首先要创建一个底部按钮。SCREEN是个宏定义：</p>

<pre><code>#define SCREEN [UIScreen mainScreen].bounds.size
</code></pre>

<h3>判断UITablView上下滑动</h3>

<p>我们都知道，UITablView是继承UIScrollView的。所以UIScrollView的代理方法在UITablView是可以使用的。要判断UITablView上下滑动，我们需要实现UIScrollView的scrollViewDidScroll:代理方法：</p>

<pre><code>-(void)scrollViewDidScroll:(UIScrollView *)scrollView{
    if (scrollView.contentOffset.y &gt; self.offsetY &amp;&amp; scrollView.contentOffset.y &gt; 0) {//向上滑动

    }else if (scrollView.contentOffset.y &lt; self.offsetY ){//向上滑动

    }
    self.offsetY = scrollView.contentOffset.y;//将当前位移变成缓存位移
}
</code></pre>

<!--more-->


<h3>判断UITablView滑动到底部</h3>

<p>也是在scrollViewDidScroll:这个方法里面判断：</p>

<pre><code> //判断滑动到底部
if (scrollView.contentOffset.y == scrollView.contentSize.height - self.tableView.frame.size.height) {

}
</code></pre>

<h3>按钮消失和出现</h3>

<pre><code>//按钮消失
[UIView transitionWithView:self.bottomButton duration:0.1 options:UIViewAnimationOptionTransitionNone animations:^{
            self.bottomButton.frame = CGRectMake(SCREEN.width / 2 - 25, SCREEN.height, 50, 50);
        } completion:NULL];

//按钮出现        
[UIView transitionWithView:self.bottomButton duration:0.1 options:UIViewAnimationOptionTransitionNone animations:^{
  self.bottomButton.frame = CGRectMake(SCREEN.width / 2 - 25, SCREEN.height - 50, 50, 50);
  } completion:NULL];
</code></pre>

<p>按钮消失其实就是移除屏幕，这里我加了一个旋转的过度动画，需要什么动画效果都可以选择。按钮出现就是把按钮的frame设置到初始化时候的frame即可。</p>

<p>这样我们就实现了通过UITablView上下滑动控制底部按钮的出现和消失。代码我已经上传的github，下载地址还是<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>

<p>如果你觉得文章还不错，请分享给你的同学和朋友，欢迎推荐他们关注iOS开发：iOSDevTip 公众号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发征稿启示（打赏归作者所有）]]></title>
    <link href="http://www.superqq.com/blog/2015/08/22/development-ios-reward/"/>
    <updated>2015-08-22T00:45:26+08:00</updated>
    <id>http://www.superqq.com/blog/2015/08/22/development-ios-reward</id>
    <content type="html"><![CDATA[<h2>iOS开发订阅用户突破10000人</h2>

<p>首先，非常感谢您的支持和一路陪伴！经过一年多的发展，iOS开发（iOSDevTip）微信公众号的订阅用户越来越多，已经超过10000人。这是一件好事，也是对iOS开发公众号价值的体现。</p>

<p>这一年多的时间里，我每天都在为寻求一篇好的iOS开发文章而努力。这个过程有快乐也有艰辛。每天做一件事，说起来不难，真要坚持下来，不是那么容易的一件事情。我说这些，并不是要证明自己有多厉害。为了寻求好的文章，我会经常阅读大量的博文，上各大程序员门户网站。有时，会因为发现一篇好的文章而庆幸不已；有时，也会因为找不到文章而心里焦急。</p>

<p>后来，我建立了自己的博客<a href="http://www.superqq.com/">刚刚在线</a>：www.superqq.com 。有时间，我就会写一些技术文章分享在上面。也会把文章同步到iOS开发公众号上。</p>

<p>随着订阅用户的增多，大家对文章内容的需求也越来越高。由于我一个人的力量毕竟有限，可能无法满足所有人的需求。订阅iOS开发的用户不乏一些大牛，所以我想发动大家的力量，一起来为优质的iOS开发文章而努力。</p>

<h2>毕洪博投稿文章情况</h2>

<p>七夕那天，作者毕洪博投稿<a href="http://www.superqq.com/blog/2015/08/21/sina-animation/"> 一句代码添加新浪弹出框动画 </a>得到了不错的反响，我把主数据给大家看看：</p>

<pre><code>图文阅读：1695
原文阅读：19   
转发+收藏：193
文章发布日期：2015-08-20
评论人数：5
赞赏人数：3
赞赏金额：9元
</code></pre>

<p>从阅读量上来看，还是挺不错的。虽然赞赏金额不多吧，但也算是有一点点回报。七夕那天夜里，我找到作者毕洪博给他发了一个红包。哈哈！</p>

<p>如果您是一名iOS开发者，如果您有自己的博客，如果您喜欢分享，那就快行动吧！把您的优秀文章投稿给我，我将会把您的文章推送在iOS开发微信公众号上，分享给更多的iOS开发者。</p>

<!--more-->


<h2>投稿方式</h2>

<pre><code>投稿邮箱：worldligang@163.com
个人微信：chinaligang
投稿格式：markdown格式
博主联盟群：364679270
</code></pre>

<p>因为微信上面不方便阅读代码，但是支持markdown语法转换。所以投稿的时候，最好是markdown格式的。投稿之后，请记得加我的个人微信，以便我将打赏的钱转账给您。如果你有自己的博客，欢迎加入博主联盟群。</p>

<h2>版权申明</h2>

<ul>
<li><p>微信公众号规定打赏必须是原创文章，所以希望您能将你的文章在微信公众平台的发表权「独家代理」iOS开发（ iOSDevTip ） 微信公众号。这样我就可以对您的文章申明原创和开通打赏功能。文章的版权依然归您所有，你可以将文章发布在你的博客、微博上。</p></li>
<li><p>为了证明我得到您的授权，您需要在您的文章底部加上如下申明：</p>

<p>  版权声明：我已将本文在微信公众平台的发表权「独家代理」给 iOS开发（ iOSDevTip ） 微信公众号。扫下方二维码即可关注「iOS 开发」：</p>

<p>  <img src="http://images.90159.com/icon/iOSDevTip.jpg" alt="iOSDevTip" /></p></li>
</ul>


<p>申明markdown格式为：</p>

<pre><code>    版权声明：我已将本文在微信公众平台的发表权「独家代理」给 iOS开发（ iOSDevTip ） 微信公众号。扫下方二维码即可关注「iOS 开发」：

    ![iOSDevTip](http://images.90159.com/icon/iOSDevTip.jpg)    
</code></pre>

<p>如果对投稿有什么疑问，欢迎加我微信：chinaligang，详细了解一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发小技巧：刷新UITableView]]></title>
    <link href="http://www.superqq.com/blog/2015/08/18/ios-development-refresh-uitableview/"/>
    <updated>2015-08-18T15:25:58+08:00</updated>
    <id>http://www.superqq.com/blog/2015/08/18/ios-development-refresh-uitableview</id>
    <content type="html"><![CDATA[<blockquote><p>我创建了iOS开发博主联盟群：<strong>364679270</strong>，有博客的朋友欢迎加入。一起打造一个优质的iOS技术分享社群。</p></blockquote>

<p>UITableView对于iOS开发者来说一定不会陌生，很有可能你的APP很多界面都用到它。关于UITableView的文章，想必已经不计其数，没事可以多看看。特别是UITableView优化的文章，非常值得仔细琢磨一番。</p>

<p>今天我们来看看如何刷新UITableView的，一般情况下，刷新UITableView，我们会直接调用reloadData方法。</p>

<h2>刷新UITableView</h2>

<pre><code>[self.tableView reloadData];
</code></pre>

<p>reloadData是刷新整个UITableView，有时候，我们可能需要局部刷新。比如：只刷新一个cell、只刷新一个section等等。这个时候在调用reloadData方法，虽然用户看不出来，但是有些浪费资源。</p>

<h2>刷新局部cell</h2>

<pre><code> NSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
 [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:indexPath,nil] withRowAnimation:UITableViewRowAnimationFade];
</code></pre>

<p>这样就可以很方便的刷新第一个section的第一个cell。虽然看起来代码多了，但是确实比较节省资源。尽量少的刷新，也是UITableView的一种优化。</p>

<h2>局部刷新section</h2>

<pre><code>NSIndexSet *indexSet = [[NSIndexSet alloc] initWithIndex:0];
[self.tableView reloadSections:indexSet withRowAnimation:UITableViewRowAnimationFade];
</code></pre>

<p>上面这段代码是刷新第0个section。</p>

<!--more-->


<h2>刷新动画</h2>

<p>刷新UITableView还有几个动画：</p>

<pre><code>typedef NS_ENUM(NSInteger, UITableViewRowAnimation) {
    UITableViewRowAnimationFade,   //淡入淡出
    UITableViewRowAnimationRight,  //从右滑入         // slide in from right (or out to right)
    UITableViewRowAnimationLeft,   //从左滑入
    UITableViewRowAnimationTop,     //从上滑入
    UITableViewRowAnimationBottom,  //从下滑入
    UITableViewRowAnimationNone,            // available in iOS 3.0
    UITableViewRowAnimationMiddle,          // available in iOS 3.2.  attempts to keep cell centered in the space it will/did occupy
    UITableViewRowAnimationAutomatic = 100  // available in iOS 5.0.  chooses an appropriate animation style for you
};
</code></pre>
]]></content>
  </entry>
  
</feed>
