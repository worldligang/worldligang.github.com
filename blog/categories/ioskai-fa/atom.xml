<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios开发 | 刚刚在线]]></title>
  <link href="http://worldligang.github.io/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://worldligang.github.io/"/>
  <updated>2015-06-04T10:34:25+08:00</updated>
  <id>http://worldligang.github.io/</id>
  <author>
    <name><![CDATA[刚刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mac下.gitconfig配置别名alias]]></title>
    <link href="http://worldligang.github.io/blog/2015/05/29/macxia-dot-gitconfigpei-zhi-bie-ming-alias/"/>
    <updated>2015-05-29T13:01:00+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/05/29/macxia-dot-gitconfigpei-zhi-bie-ming-alias</id>
    <content type="html"><![CDATA[<p>在多人协作开发时，一般用git来进行代码管理。git有一些命令如：git pull 、 git push等等，这些命令可以设置alias，也就是缩写。如：git pull 是 git pl， git push 是 git ps。可以根据个人习惯进行修改。</p>

<p>修改别名alias步骤如下：</p>

<h4>1,进入根目录</h4>

<pre><code>$ cd
</code></pre>

<h4>2,查看根目录下面的文件</h4>

<pre><code>$ ls -la
</code></pre>

<p>查看一下有没有.gitconfig文件。</p>

<h4>3，编辑.gitconfig</h4>

<pre><code>$ vi .gitconfig
</code></pre>

<p>添加如下：</p>

<pre><code>[alias]
co = checkout
ci = commit
st = status
pl = pull
ps = push
dt = difftool
l = log --stat
cp = cherry-pick
ca = commit -a
b = branch
</code></pre>

<p>具体可以根据个人习惯进行添加修改。</p>

<blockquote><p>关注公众号iOS开发：iOSDevTip</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS协议里面可以定义成员变量和属性吗？]]></title>
    <link href="http://worldligang.github.io/blog/2015/05/22/iosxie-yi-li-mian-ke-yi-ding-yi-cheng-yuan-bian-liang-he-shu-xing-ma-%3F/"/>
    <updated>2015-05-22T11:08:18+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/05/22/iosxie-yi-li-mian-ke-yi-ding-yi-cheng-yuan-bian-liang-he-shu-xing-ma-?</id>
    <content type="html"><![CDATA[<blockquote><p>关注iOS开发：iOSDevTip</p></blockquote>

<p>在CSDN上看到有人提的问题，觉得很有价值，先看代码：</p>

<pre><code>@protocol CAMediaTiming

/* The begin time of the object, in relation to its parent object, if
 * applicable. Defaults to 0. */

@property CFTimeInterval beginTime;

/* The basic duration of the object. Defaults to 0. */

@property CFTimeInterval duration;

/* The rate of the layer. Used to scale parent time to local time, e.g.
 * if rate is 2, local time progresses twice as fast as parent time.
 * Defaults to 1. */

@property float speed;

/* Additional offset in active local time. i.e. to convert from parent
 * time tp to active local time t: t = (tp - begin) * speed + offset.
 * One use of this is to "pause" a layer by setting `speed' to zero and
 * `offset' to a suitable value. Defaults to 0. */

@property CFTimeInterval timeOffset;

/* The repeat count of the object. May be fractional. Defaults to 0. */

@property float repeatCount;

/* The repeat duration of the object. Defaults to 0. */

@property CFTimeInterval repeatDuration;

/* When true, the object plays backwards after playing forwards. Defaults
 * to NO. */

@property BOOL autoreverses;

/* Defines how the timed object behaves outside its active duration.
 * Local time may be clamped to either end of the active duration, or
 * the element may be removed from the presentation. The legal values
 * are `backwards', `forwards', `both' and `removed'. Defaults to
 * `removed'. */

@property(copy) NSString *fillMode;

@end
</code></pre>

<h3>问题：</h3>

<p>上面那个协议时苹果自带的，为什么里面定义了成员变量呢？</p>

<h3>网友回答：</h3>

<p>这只是在头文件中声明，编译器是不会自动生成实例变量的，也就是说你可以用一个对象去实现这个协议，但是你不自己存储的话实例变量的话，访问同样会崩溃：
self.fillModel = @&ldquo;test&rdquo;; // unrecognized selector</p>

<h3>追问</h3>

<p>你好，也就是说我需要这样：</p>

<pre><code>@interface MyClass : NSObject &lt; CAMediaTiming &gt;
@property CFTimeInterval beginTime;
@end
</code></pre>

<p>这样才可以么？
也就是@protocol能声明，不能定义变量么？</p>

<h3>网友回答</h3>

<p>协议声明出来的是方法，虽然看起来是属性，其实只有 getter、setter 这两个方法，内部是没有实例变量的，并且你不能去重定义它，只能在 getter、setter 里处理
​</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS地图定位使用几个小功能]]></title>
    <link href="http://worldligang.github.io/blog/2015/05/14/iosdi-tu-ding-wei-shi-yong-xiao-ji-qiao/"/>
    <updated>2015-05-14T10:16:30+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/05/14/iosdi-tu-ding-wei-shi-yong-xiao-ji-qiao</id>
    <content type="html"><![CDATA[<p>iOS系统自带的定位服务可以实现很多需求。比如：获取当前经纬度，获取当前位置信息等等。</p>

<h4>获取当前经纬度</h4>

<p>首先导入#import &lt;CoreLocation/CoreLocation.h>，定义CLLocationManager的实例，实现CLLocationManagerDelegate。</p>

<pre><code>@interface ViewController ()&lt;CLLocationManagerDelegate&gt;
{
    CLLocationManager *_locationManager;
}

@end
</code></pre>

<p>开始定位的方法：</p>

<pre><code>- (void)startLocating
{
    if([CLLocationManager locationServicesEnabled])
    {
        _locationManager = [[CLLocationManager alloc] init];
        //设置定位的精度
        [_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
        _locationManager.distanceFilter = 100.0f;
        _locationManager.delegate = self;
        if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt; 8.0)
        {
            [_locationManager requestAlwaysAuthorization];
            [_locationManager requestWhenInUseAuthorization];
        }
        //开始实时定位
        [_locationManager startUpdatingLocation];
    }
}
</code></pre>

<p>实现代理方法：</p>

<pre><code>-(void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{
    NSLog(@"Longitude = %f", manager.location.coordinate.longitude);
    NSLog(@"Latitude = %f", manager.location.coordinate.latitude);
    [_locationManager stopUpdatingLocation];
}
</code></pre>

<h4>获取当前位置信息</h4>

<p>在上面的代理方法中</p>

<pre><code>-(void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{
    NSLog(@"Longitude = %f", manager.location.coordinate.longitude);
    NSLog(@"Latitude = %f", manager.location.coordinate.latitude);
    [_locationManager stopUpdatingLocation];

    CLGeocoder * geoCoder = [[CLGeocoder alloc] init];
    [geoCoder reverseGeocodeLocation:manager.location completionHandler:^(NSArray *placemarks, NSError *error) {
        for (CLPlacemark * placemark in placemarks) {
            NSDictionary *test = [placemark addressDictionary];
            //  Country(国家)  State(城市)  SubLocality(区)
            NSLog(@"%@", [test objectForKey:@"Country"]);
            NSLog(@"%@", [test objectForKey:@"State"]);
            NSLog(@"%@", [test objectForKey:@"SubLocality"]);
            NSLog(@"%@", [test objectForKey:@"Street"]);
        }
    }];

}
</code></pre>

<p>这样就很简单获取了当前位置的详细信息。</p>

<h4>获取某一个地点的经纬度</h4>

<pre><code>- (void)getLongitudeAndLatitudeWithCity:(NSString *)city
{
    //city可以为中文
    NSString *oreillyAddress = city;
    CLGeocoder *myGeocoder = [[CLGeocoder alloc] init];
    [myGeocoder geocodeAddressString:oreillyAddress completionHandler:^(NSArray *placemarks, NSError *error) {
        if ([placemarks count] &gt; 0 &amp;&amp; error == nil)
        {
            NSLog(@"Found %lu placemark(s).", (unsigned long)[placemarks count]);
            CLPlacemark *firstPlacemark = [placemarks objectAtIndex:0];
            NSLog(@"Longitude = %f", firstPlacemark.location.coordinate.longitude);
            NSLog(@"Latitude = %f", firstPlacemark.location.coordinate.latitude);
        }
        else if ([placemarks count] == 0 &amp;&amp; error == nil)
        {
            NSLog(@"Found no placemarks.");
        }
        else if (error != nil)
        {
            NSLog(@"An error occurred = %@", error);
        }
    }];
}
</code></pre>

<h4>计算两个地点之间的距离</h4>

<pre><code>- (double)distanceByLongitude:(double)longitude1 latitude:(double)latitude1 longitude:(double)longitude2 latitude:(double)latitude2{
    CLLocation* curLocation = [[CLLocation alloc] initWithLatitude:latitude1 longitude:longitude1];
    CLLocation* otherLocation = [[CLLocation alloc] initWithLatitude:latitude2 longitude:longitude2];
    double distance  = [curLocation distanceFromLocation:otherLocation];//单位是m
    return distance;
}
</code></pre>

<p>首先我们可以用上面的getLongitudeAndLatitudeWithCity方法获取某一个地点的经纬度。比如我们获取北京和上海的经纬度分别为：北京Longitude = 116.405285，Latitude = 39.904989 上海Longitude = 121.472644， Latitude = 31.231706, 那么北京和上海之间的距离就是：</p>

<pre><code>double distance = [self distanceByLongitude:116.405285 latitude:39.904989 longitude:121.472644 latitude:31.231706];
NSLog(@"Latitude = %f", distance);
</code></pre>

<p>计算的是大概的距离，可能没有那么精准。输入结果为：</p>

<pre><code>distance = 1066449.749194
</code></pre>

<p>代码下载地址:<a href="https://github.com/worldligang/MapDistanceMaster.git"target="_blank"title="MapDistanceMaster">MapDistanceMaster</a></p>

<p>更多iOS技术请关注微信iOS开发</p>

<pre><code>iOSDevTip
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS调用系统发短信功能详解]]></title>
    <link href="http://worldligang.github.io/blog/2015/04/25/iosdiao-yong-xi-tong-fa-duan-xin-gong-neng-xiang-jie/"/>
    <updated>2015-04-25T11:36:33+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/04/25/iosdiao-yong-xi-tong-fa-duan-xin-gong-neng-xiang-jie</id>
    <content type="html"><![CDATA[<p>iOS调用系统的发短信功能可以分为两种：1，程序外调用系统发短信。2，程序内调用系统发短信。第二种的好处是用户发短信之后还可以回到app。这对app来说非常重要。</p>

<h3>程序外调用系统发短信</h3>

<p>这个方法其实很简单，直接调用openURL即可：</p>

<pre><code>[[UIApplication sharedApplication]openURL:[NSURL URLWithString:@"sms://13888888888"]];
</code></pre>

<h3>程序内调用系统发短信</h3>

<h5>1）导入MessageUI.framework，并引入头文件：</h5>

<pre><code>#import &lt;MessageUI/MessageUI.h&gt;
</code></pre>

<h5>2）实现代理方法MFMessageComposeViewControllerDelegate</h5>

<pre><code>    -(void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result
{
    [self dismissViewControllerAnimated:YES completion:nil];
    switch (result) {
        case MessageComposeResultSent:
            //信息传送成功

            break;
        case MessageComposeResultFailed:
            //信息传送失败

            break;
        case MessageComposeResultCancelled:
            //信息被用户取消传送

            break;
        default:
            break;
    }
}
</code></pre>

<h5>3）发送短信</h5>

<pre><code>    -(void)showMessageView:(NSArray *)phones title:(NSString *)title body:(NSString *)body
{
    if( [MFMessageComposeViewController canSendText] )
    {
        MFMessageComposeViewController * controller = [[MFMessageComposeViewController alloc] init];
        controller.recipients = phones;
        controller.navigationBar.tintColor = [UIColor redColor];
        controller.body = body;
        controller.messageComposeDelegate = self;
        [self presentViewController:controller animated:YES completion:nil];
        [[[[controller viewControllers] lastObject] navigationItem] setTitle:title];//修改短信界面标题
    }
    else
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示信息"
                                                        message:@"该设备不支持短信功能"
                                                       delegate:nil
                                              cancelButtonTitle:@"确定"
                                              otherButtonTitles:nil, nil];
        [alert show];
    }
}
</code></pre>

<p>参数phones：发短信的手机号码的数组，数组中是一个即单发,多个即群发。</p>

<h5>4）调用发短信的方法</h5>

<pre><code>    [self showMessageView:[NSArray arrayWithObjects:@"13888888888",@"13999999999", nil] title:@"test" body:@"你是土豪么，么么哒"];
</code></pre>

<p>我的微信iOS开发：iOSDevTip</p>

<p>代码下载地址:<a href="https://github.com/worldligang/SendMsgMaster.git"target="_blank"title="SendMsgMaster">SendMsgMaster</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hitTest和pointInside如何响应用户点击事件]]></title>
    <link href="http://worldligang.github.io/blog/2015/04/23/iosyong-hu-dian-ji-shi-jian-chu-li/"/>
    <updated>2015-04-23T16:05:20+08:00</updated>
    <id>http://worldligang.github.io/blog/2015/04/23/iosyong-hu-dian-ji-shi-jian-chu-li</id>
    <content type="html"><![CDATA[<h3>处理机制</h3>

<p>iOS事件处理，首先应该是找到能处理点击事件的视图，然后在找到的这个视图里处理这个点击事件。</p>

<p>处理原理如下：</p>

<p>• 当用户点击屏幕时，会产生一个触摸事件，系统会将该事件加入到一个由UIApplication管理的事件队列中</p>

<p>• UIApplication会从事件队列中取出最前面的事件进行分发以便处理，通常，先发送事件给应用程序的主窗口(UIWindow)</p>

<p>• 主窗口会调用hitTest:withEvent:方法在视图(UIView)层次结构中找到一个最合适的UIView来处理触摸事件</p>

<p>(hitTest:withEvent:其实是UIView的一个方法，UIWindow继承自UIView，因此主窗口UIWindow也是属于视图的一种)</p>

<p>• hitTest:withEvent:方法大致处理流程是这样的：</p>

<p>首先调用当前视图的pointInside:withEvent:方法判断触摸点是否在当前视图内：</p>

<p>▶ 若pointInside:withEvent:方法返回NO，说明触摸点不在当前视图内，则当前视图的hitTest:withEvent:返回nil</p>

<p>▶ 若pointInside:withEvent:方法返回YES，说明触摸点在当前视图内，则遍历当前视图的所有子视图(subviews)，调用子视图的hitTest:withEvent:方法重复前面的步骤，子视图的遍历顺序是从top到bottom，即从subviews数组的末尾向前遍历，直到有子视图的hitTest:withEvent:方法返回非空对象或者全部子视图遍历完毕：</p>

<p>▷ 若第一次有子视图的hitTest:withEvent:方法返回非空对象,则当前视图的hitTest:withEvent:方法就返回此对象，处理结束</p>

<p>▷ 若所有子视图的hitTest:withEvent:方法都返回nil，则当前视图的hitTest:withEvent:方法返回当前视图自身(self)</p>

<p>• 最终，这个触摸事件交给主窗口的hitTest:withEvent:方法返回的视图对象去处理。我的微信号iOS开发：iOSDevTip</p>

<h3>案列分析</h3>

<p>在UIViewController的self.view上加载一个LGFirstView</p>

<p>LGFirstView上面有一个UIButton我们叫它buttonFirst</p>

<p>然后，self.view上加载一个LGSecondView，刚好盖在LGFirstView上面</p>

<p>LGSecondView上面也有一个UIButton我们叫它buttonSecond</p>

<h5>正常情况下：</h5>

<p>用户点击LGSecondView（点击的点不在buttonSecond上，但是在buttonFirst撒很难过吗），事件处理流程如下：</p>

<p>1）调用UIWindow的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在UIWindow上面。</p>

<p>2）去遍历UIWindow上面的子视图，也就是self.view。同样也是调用self.view的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在self.view上面。</p>

<p>3）去遍历self.view上的子视图，也就是LGFirstView和LGSecondView。（注意：子视图的遍历顺序是从top到bottom，即从subviews数组的末尾向前遍历）。</p>

<p>4）所以先调用LGSecondView的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在LGSecondView上面。（此时不会再去遍历LGFirstView，所以正如你所愿buttonFirst的点击事件也不会被调用）</p>

<p>5）还没有结束，接着回去遍历LGSecondView上的所有子视图，结果所有子视图的hitTest:withEvent:方法都返回nil，因为LGSecondView上面只有secondButton，而点击的点不在secondButton。</p>

<p>6）最终hitTest:withEvent:方法返回当前视图自身(self)，而LGSecondView没有事件要处理。整个过程结束。</p>

<h5>如果我们想让buttonFirst也响应点击事件怎么办？</h5>

<h5>方法一：</h5>

<p>我们在LGSecondView加入如下代码：</p>

<pre><code>#pragma mark - 方法一
-(id)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
    UIView *hitView = [super hitTest:point withEvent:event];
    if (hitView == self)
    {
        return nil;
    }
    else
    {
        return hitView;
    }
}
</code></pre>

<p>我们再来分析一下：</p>

<p>还是这个场景，用户点击LGSecondView（点击的点不在buttonSecond上，但是在buttonFirst撒很难过吗），事件处理流程如下：</p>

<p>1）调用UIWindow的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在UIWindow上面。</p>

<p>2）去遍历UIWindow上面的子视图，也就是self.view。同样也是调用self.view的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在self.view上面。</p>

<p>3）去遍历self.view上的子视图，也就是LGFirstView和LGSecondView。（注意：子视图的遍历顺序是从top到bottom，即从subviews数组的末尾向前遍历）。</p>

<p>4）所以先调用LGSecondView的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在LGSecondView上面。</p>

<p>5)但是，注意了，这里有个但是， UIView *hitView = [super hitTest:point withEvent:event];就是这句代码发挥了作用。如果hitView是LGSecondView的话，就不处理点击事件。（这跟userInteractionEnabled=NO是不一样的，userInteractionEnabled=NO，LGSecondView上的buttonSecond也不会响应点击事件了。）</p>

<p>6)这个时候会去调用LGFirstView的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在LGFirstView上面。</p>

<p>7）再去遍历LGFirstView上面的子视图，也就是buttonFirst，调用buttonFirst的hitTest:withEvent:方法，hitTest:withEvent:方法会调用pointInside:withEvent:方法。此时pointInside:withEvent:返回YES，说明触摸事件在buttonFirst上面。</p>

<p>8）再去遍历buttonFirst上的所有子视图，结果所有子视图的hitTest:withEvent:方法都返回nil，说明点击就在buttonFirst，buttonFirst就用响应的点击方法。</p>

<h5>方法二</h5>

<p>在LGSecondView.m</p>

<pre><code>@interface LGSecondView ()

@property (nonatomic, strong) NSMutableArray *subControlsArray;

@end

@implementation LGSecondView


- (id)initWithFrame:(CGRect)frame
{
    if (self = [super initWithFrame:frame]) {
        self.subControlsArray = [NSMutableArray array];
    }
    return self;
}


#pragma mark - 方法二

- (void)addSubview:(UIView *)view{
    [super addSubview:view];
    if ([view isKindOfClass:[UIControl class]]) {
        [self.subControlsArray addObject:view];
    }
}

//set self not response action and self subviews response action
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;
{
    BOOL toNext = YES;
    for (UIView *view in _subControlsArray) {
        if (CGRectContainsPoint(view.frame, point)) {
            toNext = NO;
            break;
        }
    }
    return !toNext;
}
</code></pre>

<p>具体原理就不在累述了，大家自己推一下，也可以把你的思路写下来发给我。</p>

<p>还有很多方法也欢迎你把思路写下来发给我。我的微信号iOS开发：iOSDevTip</p>

<p>代码下载地址:<a href="https://github.com/worldligang/HitTestMaster.git"target="_blank"title="HitTestMaster">HitTestMaster</a></p>
]]></content>
  </entry>
  
</feed>
