<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios面试 | 刚刚在线]]></title>
  <link href="http://www.superqq.com/blog/categories/iosmian-shi/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-06-26T07:41:02+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSDate和NSString相互转换]]></title>
    <link href="http://www.superqq.com/blog/2015/06/26/nsdatehe-nsstringxiang-hu-zhuan-huan/"/>
    <updated>2015-06-26T07:34:32+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/26/nsdatehe-nsstringxiang-hu-zhuan-huan</id>
    <content type="html"><![CDATA[<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/2NSDate.jpg" alt="1" /></p>

<p>不积小流无以成江海，不及硅步无以至千里。做<a href="http://www.superqq.com/blog/2015/01/14/ioskai-fa-zhi-shou-shi-shi-bie-hui-zong/">iOS开发</a>也是这样，平时写代码要多收集一些有用的代码，以免每次都从新来一遍，不仅浪费时间，也影响开发效率。</p>

<p>有人把做app形容成盖房子，码农就是搬砖的，真的是形象无比。随着时间的推移，手里积累的优秀代码就越来越多。这样，盖起房子来，效率肯定是杠杠的。</p>

<p>我也会收集一些有用的代码，有的会写在博客里，有的会写成demo放在<a href="http://www.superqq.com/blog/2014/11/19/ioskai-fa-zhong-gitfen-zhi-chuang-jian-he-guan-li/">github</a>上面，有的就很安静的躺在我的电脑里。每次我用到的时候，我都会顺手复制过来。</p>

<p>今天给大家分享一些关于NSDate和NSString相互转换。百度一下，有一大推相关的方法。每次都百度，不如自己收集起来方便。</p>

<h2>NSDate转NSString</h2>

<p>日期转成字符串。这个虽然简单，但是我相信很多朋友初次遇到肯定束手无策。脑子里蹦出四个字：这怎么转？直接上代码：</p>

<pre><code>//获取系统当前时间
NSDate *currentDate = [NSDate date];
//用于格式化NSDate对象
NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
//设置格式：zzz表示时区
[dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss zzz"];
//NSDate转NSString
NSString *currentDateString = [dateFormatter stringFromDate:currentDate];
//输出currentDateString
NSLog(@"%@",currentDateString);
</code></pre>

<p>NSDate对象包含两个部分，日期（Date）和时间（Time）。格式化的时间字符串主要也是针对日期和时间的。NSDateFormatter是一个很常用的类，用于格式化NSDate对象，支持本地化的信息。</p>

<p>NSDateFormatter常用的格式有：</p>

<pre><code>yyyy-MM-dd HH:mm:ss.SSS 
yyyy-MM-dd HH:mm:ss
yyyy-MM-dd
MM dd yyyy
</code></pre>

<p>NSDateFormatter格式化参数如下：</p>

<pre><code>G: 公元时代，例如AD公元
yy: 年的后2位
yyyy: 完整年
MM: 月，显示为1-12
MMM: 月，显示为英文月份简写,如 Jan
MMMM: 月，显示为英文月份全称，如 Janualy
dd: 日，2位数表示，如02
d: 日，1-2位显示，如 2
EEE: 简写星期几，如Sun
EEEE: 全写星期几，如Sunday
aa: 上下午，AM/PM
H: 时，24小时制，0-23
K：时，12小时制，0-11
m: 分，1-2位
mm: 分，2位
s: 秒，1-2位
ss: 秒，2位
S: 毫秒
</code></pre>

<h2>NSString转NSDate</h2>

<p>既然NSDate可以转成NSString，毫无疑问NSString也可以转成NSDate。代码如下：</p>

<pre><code>//需要转换的字符串
NSString *dateString = @"2015-06-26 08:08:08";
 //设置转换格式
NSDateFormatter *formatter = [[NSDateFormatter alloc] init] ;
[formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
//NSString转NSDate
NSDate *date=[formatter dateFromString:dateString];
</code></pre>

<p>NSDate和NSString相互转换就是这么简单。</p>

<h2>转换工具类</h2>

<p>在项目中，我们需要用到转换的地方可能不止一处，所以建议我们定义一个工具类。在工具类里实现如下两个方法：</p>

<pre><code>//NSDate转NSString
+ (NSString *)stringFromDate:(NSDate *)date
{
    //获取系统当前时间
    NSDate *currentDate = [NSDate date];
    //用于格式化NSDate对象
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    //设置格式：zzz表示时区
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss zzz"];
    //NSDate转NSString
    NSString *currentDateString = [dateFormatter stringFromDate:currentDate];
    //输出currentDateString
    NSLog(@"%@",currentDateString);
    return currentDateString;
}

//NSString转NSDate
+ (NSDate *)dateFromString:(NSString *)string
{
    //需要转换的字符串
    NSString *dateString = @"2015-06-26 08:08:08";
    //设置转换格式
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init] ;
    [formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    //NSString转NSDate
    NSDate *date=[formatter dateFromString:dateString];
    return date;
}
</code></pre>

<p>有了这个工具类，妈妈再也不用担心我的转换能力啦！</p>

<blockquote><p>作者李刚是刚刚在线（www.superqq.com）站长，百度百家专栏作者
iOS工程师非著名自媒体，微信公众号iOS开发：iOSDevTip运营者</p></blockquote>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/ios.png" alt="2" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何成为一名优秀的iOS开发工程师]]></title>
    <link href="http://www.superqq.com/blog/2015/06/25/ru-he-cheng-wei-%5B%3F%5D-ming-you-xiu-de-ioskai-fa-gong-cheng-shi/"/>
    <updated>2015-06-25T07:49:07+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/25/ru-he-cheng-wei-[?]-ming-you-xiu-de-ioskai-fa-gong-cheng-shi</id>
    <content type="html"><![CDATA[<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/1iOSkaifa.jpg" alt="1" /></p>

<p>如果你是一位专业的<strong>iOS开发工程师</strong>，你应该为自己感到自豪。因为你能在强大的iOS系统下，一展身手实现自己和他人的想法，这是一件令人无比激动的事情。</p>

<p>作为一名iOS开发工程师，你一定想成为行业的佼佼者。那么，如何成为一名优秀的iOS开发工程师呢？我觉得做到以下几点，你就离优秀越来越近了。</p>

<h3>提高英语水平</h3>

<p>作为码农，英语水平虽然不是一个硬指标，但是，如果你的英语水平足够好，那真是如虎添翼。在公司里面，糟糕的英语表达能力也掩盖了你在软件开发技术上的优势。</p>

<p>很多优秀的技术文章都是英文版本的，就像苹果官方文档一样，你看不懂你就比别人落后了一步。当这些文档被汉化，被翻译成中文，那是需要一段时间的。少则几天，多则几个月。所以与其被动等待，不如先把英语水平提上去。</p>

<p>英语的重要性，不言而喻，不仅仅有助于写代码。如果万一哪一天你成为公众人物了，你是想向刘强东一样讲英语，还是想向雷布斯一样讲英语呢？我觉得你应该更想像马云一样。</p>

<p>至于，如何提高英语水平，请问度娘。</p>

<h3>控制代码质量</h3>

<p>想成为优秀的iOS开发工程师，代码质量是很重要的一关。关于如何提高代码质量，推荐大家看一篇文章：<a href="http://www.90159.com/2015/06/17/Objective-C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A26%E4%B8%AA%E6%96%B9%E9%9D%A2%E8%A7%A3%E5%86%B3iOS%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/">Objective-C编码规范：26个方面解决iOS开发问题</a>，这篇文章详细的讲述了iOS开发方面的编码规范，建议大家多看一看。</p>

<p>如果你能按着上面的编码规范来规范自己，我觉得最起码你代码看起来就比较整洁。这样的话，哪怕你一个月回头再来看自己的代码，应该很快就可以理解。而且，当你离开现在的公司，不至于后来的人骂你。</p>

<p>没听人常说嘛：良好的习惯是成功的第一步，iOS开发者也不例外。</p>

<h3>写博客分享技术</h3>

<p>在csdn上看到有人问：不写博客的程序员是好程序员吗？这个问题问的其实挺好。不写博客的人也有进BAT的，BAT里面的程序员并不一定都写博客；写博客的人大部分都没有进BAT，比如像我这样的屌丝。</p>

<p>但是这并不能说明什么。且看，写博客的好处在哪里？</p>

<p><strong>写博客你可以交到一群志同道合的朋友</strong>。即使你们现实中从来没见过面，但是你们在互联网上有过思想的碰撞，这就已经足够了。</p>

<p><strong>书写就是很好的思考</strong>。当你想熟练掌握一项技能，请将你的技术分享出来吧。</p>

<p><strong>写的过程中也是学习</strong>。当你能把一项技术讲清楚，说明你已经完全理解了。</p>

<p><strong>你的博客将比简历更有价值</strong>。你在各大招聘网站写简历不如你有一个有价值的博客。</p>

<p>把技术分享出来，不仅帮助新人，更是提高自己，这是一种双赢。如果你写了技术文章没有好的地方可以发布，可以投稿给我：<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#119;&#111;&#x72;&#x6c;&#100;&#108;&#105;&#103;&#97;&#110;&#x67;&#64;&#x31;&#x36;&#51;&#46;&#99;&#x6f;&#109;">&#x77;&#111;&#114;&#x6c;&#100;&#x6c;&#105;&#103;&#97;&#110;&#x67;&#64;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#x6d;</a> 我将发布在我的公众号iOS开发（<strong>iOSDevTip</strong>）上，直接分享给上万名iOS开发者。</p>

<h3>看github开源项目</h3>

<p>github对于程序员来说，可谓是一个金库。很多优秀的人才，都在上面开源自己的项目。这些人都是伟大的。</p>

<p>当你想实现一个功能，很有可能有一些大牛已经实现了。与其我们写出蹩脚代码来实现，不如去阅读大牛们在github上的开源项目。去看大牛是怎么实现的？思路是什么？如果是你你会怎么写？经过这样的思考之后，比你自己去实现重要的多。</p>

<p>如果你自己就是大牛，那就另说了。你可以实现之后，把代码分享到github，帮助更多人。</p>

<h3>实现自己的想法</h3>

<p>一个不想当老板的程序员不是好程序员。谁不想成为马云呢，谁不想改变世界呢。所以，你要敢想，然后通过自己的技术去实现它。</p>

<p>有些人可能以为：在公司里上班，去想做个什么东西，就是对老板不忠。这是一个很严重的错误想法。</p>

<p>在大公司，都是支持内部创业的。如果你有好的想法，尽管去干吧。说不定第一个天使投资人就是你的老板。屌丝逆袭说不定从此开始。</p>

<p>行了，醒醒，有想法更要有行动。</p>

<p>按照我们老师的话说：成为一名优秀的iOS开发工程师任重而道远！这句话也送给你。</p>

<blockquote><p>作者李刚是刚刚在线（www.superqq.com）站长，百度百家专栏作者
iOS工程师非著名自媒体，微信公众号iOS开发：iOSDevTip运营者</p></blockquote>

<p><img src="http://7xjrlb.com1.z0.glb.clouddn.com/ios.png" alt="2" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上海iOS开发工资待遇如何？]]></title>
    <link href="http://www.superqq.com/blog/2015/06/17/shang-hai-ioskai-fa-gong-zi-dai-yu-ru-he-%3F/"/>
    <updated>2015-06-17T23:25:30+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/17/shang-hai-ioskai-fa-gong-zi-dai-yu-ru-he-?</id>
    <content type="html"><![CDATA[<p><strong>上海iOS开发</strong>工资待遇如何呢？一般来说，上海iOS开发的工资还算相对不错的，毕竟是一线城市的魔都，整体来说还算可以。</p>

<p>上海<a href="http://www.superqq.com/blog/2014/12/27/ioskai-fa-zhong-de-gcdduo-xian-cheng-tips/">iOS开发</a>起步薪资大概在5k~8k吧，如果你技术好，在大学里面就是学霸，对计算机也非常精通，超过8k，也不是完全没有可能的。5k~8k只是一个参考值，主要还是靠自己。</p>

<p>对于工作一两年的上海iOS开发者朋友们来说，工资应该在8k~15k。也就是说，上海iOS开发者有一两年工作经验，工资很轻松过五位数。</p>

<p>做一位一名程序员，工作过五位数很正常，尤其是上海iOS开发程序员。</p>

<p>当你在上海做iOS开发三四年以上，而且你的技术确实有牛C，这个时候，工资完全可以突破2万。2万对于程序员来说是一个重要的标志，上海iOS开发程序员也不例外。2万说明你应该是一名很不错的程序员了。</p>

<p>以上是上海iOS开发工资的一个参考，具体可以根据实际<a href="http://www.superqq.com/blog/2015/06/04/mian-shi-guan-wen-xian-zai-gong-zi-shi-duo-shao-gai-zen-yao-hui-da/">面试</a>情况来谈你的工资。</p>

<p>上海iOS开发需求量也很大，所以对于想进入iOS开发行业的人来说，上海iOS开发职位是一个很不错的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS KVC详细讲解]]></title>
    <link href="http://www.superqq.com/blog/2015/06/06/ios-kvcxiang-xi-jiang-jie/"/>
    <updated>2015-06-06T09:20:27+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/06/ios-kvcxiang-xi-jiang-jie</id>
    <content type="html"><![CDATA[<blockquote><p>欢迎大家提供面试题目，我们一起来讲解，以备不时之需。</p></blockquote>

<h2>什么是KVC？</h2>

<p>KVC即<strong>NSKeyValueCoding</strong>，就是键-值编码的意思。一个非正式的 Protocol，是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制。</p>

<p>以上就是KVC的理论，面试时，如实回答就可以啦！</p>

<h2>使用KVC说明</h2>

<ul>
<li>KVC间接修改对象属性时，会自动判断对象属性的类型，完成相应的转换。</li>
<li>KVC按键值路径取值时，如果对象不包含指定的键值，那么就会自动进入对象内部，查找对象属性。</li>
<li>KVC可以嵌套按照键值路径取值。</li>
</ul>


<h2>KVC和KVO有什么区别？</h2>

<p>上一篇文章我们讲了<a href="http://www.superqq.com/blog/2015/06/05/ios-kvogai-shu-yu-shi-jian/">iOS KVO概述</a>，有兴趣的可以看看。面试过程中，面试官问：KVC和KVO有什么区别？</p>

<p>听到这个问题真的很（dan）疼，真特么想回一句，我怎么知道什么区别？当然，如果你像这么回答，面试估计到此结束啦。</p>

<p>那KVC和KVO到底有什么区别呢？</p>

<p>KVO是建立在KVC之上的，KVO能够观察一个对象的KVC key-path值的变化。</p>

<p>iOS面试汇总：</p>

<p><a href="http://www.superqq.com/blog/2015/06/04/mian-shi-guan-wen-xian-zai-gong-zi-shi-duo-shao-gai-zen-yao-hui-da/">面试官问现在工资是多少该怎么回答?</a></p>

<p><a href="http://www.superqq.com/blog/2015/06/05/ios-kvogai-shu-yu-shi-jian/">iOS KVO概述</a></p>

<ul>
<li>关注公众号iOS开发：<strong>iOSDevTip</strong> 获取更多面试技巧。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS KVO概述]]></title>
    <link href="http://www.superqq.com/blog/2015/06/05/ios-kvogai-shu-yu-shi-jian/"/>
    <updated>2015-06-05T11:06:59+08:00</updated>
    <id>http://www.superqq.com/blog/2015/06/05/ios-kvogai-shu-yu-shi-jian</id>
    <content type="html"><![CDATA[<blockquote><p>面试中经常会被问到：什么是KVO？这个问题既然出现概率这么大，那么我们就来详细讲一讲到底什么是KVO。下次再有面试官问你的时候，你就可以娓娓道来，以彰显高逼格</p></blockquote>

<h2>概述</h2>

<p>问：什么是KVO？</p>

<p>答：KVO是Key-Value Observing的缩写。它提供一种机制，当指定的对象的属性被修改后，则对象就会接受到通知。简单的说就是每次指定的被观察的对象的属性被修改后，KVO就会自动通知相应的观察者了。</p>

<p>如果你能这样回答，面试官一定不会说你错的，这就是KVO的原理。但是如果你能说出KVO的好处，那一定能赢得面试官的刮目相看。比如：</p>

<ul>
<li>使用KVO最直接的好处就是可以减少代码量。</li>
<li>KVO是<strong>观察者</strong>设计模式中的一种，有利于业务逻辑于视图控制之间的解耦。</li>
</ul>


<p>更深刻的了解KVO，你可以动手写一个小demo思路如下：</p>

<ul>
<li>定义一个对象People，分别有name和age属性</li>
<li>监听People的age属性</li>
<li>定义一个UIButton，在button的点击方法里面，去改变People的age。</li>
<li>你就可以收到age改变时发出来的通知</li>
<li>在对象销毁的时候，移除通知。</li>
</ul>


<p>iOS面试汇总：</p>

<p><a href="http://www.superqq.com/blog/2015/06/04/mian-shi-guan-wen-xian-zai-gong-zi-shi-duo-shao-gai-zen-yao-hui-da/">面试官问现在工资是多少该怎么回答?</a></p>

<ul>
<li>关注公众号iOS开发：<strong>iOSDevTip</strong> 获取更多面试技巧。</li>
</ul>

]]></content>
  </entry>
  
</feed>
