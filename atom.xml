<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[刚刚在线]]></title>
  <link href="http://www.superqq.com/atom.xml" rel="self"/>
  <link href="http://www.superqq.com/"/>
  <updated>2015-11-12T18:24:59+08:00</updated>
  <id>http://www.superqq.com/</id>
  <author>
    <name><![CDATA[李刚]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add "Remote-notification" to the List of Your Supported UIBackgroundModes in Your Info.plist.解决方案]]></title>
    <link href="http://www.superqq.com/blog/2015/11/12/remote-notification-error/"/>
    <updated>2015-11-12T18:21:17+08:00</updated>
    <id>http://www.superqq.com/blog/2015/11/12/remote-notification-error</id>
    <content type="html"><![CDATA[<p>做推送的童鞋可能会遇到这样的问题，控制台会打印一句话：</p>

<p>You&rsquo;ve implemented -[<UIApplicationDelegate> application:didReceiveRemoteNotification:fetchCompletionHandler:], but you still need to add &ldquo;remote-notification&rdquo; to the list of your supported UIBackgroundModes in your Info.plist.</p>

<p>解决办法：</p>

<p><img src="http://images.90159.com/11/error1.png" alt="error1" /></p>

<p>这个时候再去看看Info.plist文件：</p>

<p><img src="http://images.90159.com/11/error2.png" alt="error2" /></p>

<p>再次运行，问题就解决啦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[月薪3万的程序员都避开了哪些坑]]></title>
    <link href="http://www.superqq.com/blog/2015/11/02/salary-programmer-avoid-pit/"/>
    <updated>2015-11-02T09:58:49+08:00</updated>
    <id>http://www.superqq.com/blog/2015/11/02/salary-programmer-avoid-pit</id>
    <content type="html"><![CDATA[<p>程序员薪水有高有低，有的人一个月可能拿30K、50K，有的人可能只有2K、3K。同样有五年工作经验的程序员，可能一个人每月拿20K，一个拿5K。是什么因素导致了这种差异？我特意总结了容易导致薪水低的九大行为表现，避开这些大坑，你就离高薪不远了。</p>

<h3>习惯即刻回报</h3>

<p>他不懂得只有春天播种，秋天才会有收获。刚刚付出一点点，甚至还没有付出，就想要得到回报。技术刚刚掌握，能一边百度一边干活了就觉得该拿到多少多少钱了。找工作先想着多少多少钱，入职了没干几个月就想着要加多少多少钱，干了没几个月，薪水要是没涨，就放弃了，准备通过跳槽加薪，不跳槽的话，往往也会因为没加薪而牢骚满腹，工作敷衍了事。</p>

<p>一个程序员的价值，是通过他带给公司的价值体现的。先给公司带来了价值，然后才会反过来在薪水上体现出自己的价值。公司都很现实，很少会为你的潜力买单，在你还没有体现出价值时就给你很高的薪水。</p>

<p>在生活和工作中，一定要懂得付出，不要那么急功近利，马上想得到回报。天下没有白吃的午餐，你想获得什么，就得先付出什么。唯有种下种子，然后浇水、施肥、除草、杀虫，然后才能等来收获。</p>

<!--more-->


<h3>缺乏学习热情</h3>

<p>很少有哪个岗位的人像程序员这样需要持续不断的学习，软件开发的技术日新月异，而每一项技术又往往博大精深，不持续、深入钻研是很难掌握的，更别谈精通了。如果你对一项技术不能深刻理解熟练应用，表现出来的水准仅仅是能干活、还行，那很难说会有公司愿意为“还行”付出大的代价，只有脱颖而出，才可能备受重视。</p>

<p>假如你对学习、掌握、精通技术没有兴趣，面对不断涌现的新语言新技术新框架没有学习欲望，那但就软件开发这个工作而言，你不但眼下不太可能拿到高薪，将来也不会。在这样一个快速变化的时代，只有不断地学习才不会被抛弃。</p>

<h3>不够努力</h3>

<p>虽然我们都知道努力学习可以改变我们的技能水平，持续努力不懈坚持可以让自己有所建树，可还是有很多人浅尝辄止，三天打鱼两天晒网，搞两下能Run就放下了。</p>

<p>人和人在聪明才智上的差距并没有想象中大，甚至很多时候，从大多数人的努力程度之低来看，根本还轮不到拼天赋。如果两个人的实力半斤八两的话，热情工作努力坚持的人，一定比较容易成功。</p>

<h3>畏难</h3>

<p>做事拈轻怕重，不愿挑战。殊不知能力就是在不断挑战不断突破自己的过程中历练出来的。在一个公司里面，经常承担高难度任务的程序员，一定是成长比较快的，薪水增长也一定是比较快的。越是困难的事情，越能体现出个人价值，也越能带给个人成长。</p>

<p>万事起头难，不要害怕困难。事情做不好往往不是因为没有能力，大都是由于缺乏恒心。只要不怕困难，坚持前行，一定会有不一样的收获。</p>

<p>事业就像女人，谁去追求，谁就能得手。金钱也一样。</p>

<h3>缺乏责任心</h3>

<p>工作上不管什么事儿，反正不是自己的事儿，缺乏责任心，干好干不好都无所谓，对交付承诺、对产品质量都不在意，没什么事儿能让他上心。</p>

<p>一个人的责任心如何，决定着他在工作中的态度，决定着其事业的好坏和成败。如果一个人没有责任心，即使他有再大的能耐，也不一定能做出好的成绩来。</p>

<h3>消极，抱怨</h3>

<p>工作稍有不顺，就怨气沸腾，这个怎么怎么样，那个怎么怎么样，而我怎么就这样，任务不公平，资源不公平，那谁谁不支持我，那谁谁不配合……</p>

<p>抱怨不能使事情变好，反之，它会让负面情绪蔓延，蚕食你的精力和时间，让你产出更低。成功者永不抱怨，抱怨者永不成功。立刻停止抱怨，早一分钟停止，你就离目标近一分钟。</p>

<h3>没有时间管理观念</h3>

<p>每个人的一天都只有24小时，人和人的差别就在于如何利用时间上。</p>

<p>有的人每周都有目标，每天都有计划，早上起来会想今天要做的几件重要的事，晚上会回顾今天完成的事，总结干成了什么干坏了什么，还会有计划的学习新知识新技能，这样日积月累不断坚持，每一天都是高效的，每一天都朝着更丰富更完美的自己前进。</p>

<p>而有的人则漫无目的，走哪算哪，到了公司，上午基本做不成事儿，到下午了还不知道要做什么，晚上也发愁如何消磨时间……</p>

<h3>为薪水工作</h3>

<p>虽然工作的一大目的是获取薪水，养活自己以及供给家庭所需；但是，这只是工作最直接的报偿，同时也是最低级的目标。</p>

<p>如果我们为薪水而工作，将注定我们是短视的，也将注定受到最深的伤害。假如你看不到工资以外的东西，斤斤计较于薪水、福利、职位等，那外界的些微风吹草动就可能让你像浮萍一样飘来荡去，你很快就会失去平衡，失去信心，失去热情，失去平和，进而在工作时总是采取一种应付了事的态度，能少做就少做，能躲避就躲避，觉得只要对得起自己的那份薪水就成了。长此以往，你追求的高薪水反倒得不到。</p>

<p>我们进入一个公司工作，是为了自己，不是薪水也不是别人，比薪水更重要的，是成长和成就自己的机会。我们一定要明白，公司、企业、组织，都是我们锻炼自己、修炼自我的平台，我们不是为薪水工作、不是为老板工作、不是为家人工作，是为实现自我而工作，是为更完美的自己而工作。</p>

<p>唯有志存高远，方能风行天下。</p>

<h3>其实不喜欢软件开发</h3>

<p>有一部分人从事软件开发工作，并不是因为喜欢，也没有干着干着从不喜欢变成喜欢。他们可能是喜欢软件开发附带的高薪水——平均薪水比其他行业高。人做一件自己不喜欢的事情时，心理上没有亲近感，不会想着怎样把事情做得更好，往往是差不多就成了，不太可能有精益求精积极向上的追求。因为在做不喜欢的事情时，情感上是拒绝的，情绪上是想逃离的，总想着早点儿完事儿拉倒，每一天去单位时不是充满期待，而是各种担忧、烦躁、畏惧，到了单位，稍有困难或不顺心，就会消极、抱怨、抵触、拒绝……</p>

<p>做喜欢的事，能最大可能发挥一个人的潜能和热情，会最快速地通向成功成就自己。而做不喜欢的事，一开始就注定了事倍功半，最后也往往会是痛苦不堪或半途而废。</p>

<blockquote><p>来自：foruok 地址：<a href="http://blog.csdn.net/foruok/article/details/49245349">http://blog.csdn.net/foruok/article/details/49245349</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序猿的幽默趣图，你并不懂他们的真正世界]]></title>
    <link href="http://www.superqq.com/blog/2015/11/01/humor-code-world/"/>
    <updated>2015-11-01T13:22:00+08:00</updated>
    <id>http://www.superqq.com/blog/2015/11/01/humor-code-world</id>
    <content type="html"><![CDATA[<blockquote><p>作为程序员 ，你不能错过的幽默！</p></blockquote>

<h3>1、旁人眼中的程序猿和真实世界的程序猿。</h3>

<p><img src="http://images.90159.com/11/humor1.gif" alt="humor1" /></p>

<h3>2、多线程的理论和现实。</h3>

<p><img src="http://images.90159.com/11/humor2.jpg" alt="humor2" /></p>

<h3>3、你是这样的还是那样的BUG？</h3>

<p><img src="http://images.90159.com/11/humor3.gif" alt="humor3" /></p>

<h3>4、我想重构，但又怕重构后，从此程序就不能再正常&hellip;&hellip;..</h3>

<p><img src="http://images.90159.com/11/humor4.jpg" alt="humor4" /></p>

<h3>5、客户的期望VS最终产品</h3>

<p><img src="http://images.90159.com/11/humor5.gif" alt="humor5" /></p>

<p>来自：网络</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为自己的应用配备上 3D Touch 功能]]></title>
    <link href="http://www.superqq.com/blog/2015/10/31/app-touch-3d-function/"/>
    <updated>2015-10-31T10:35:24+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/31/app-touch-3d-function</id>
    <content type="html"><![CDATA[<p>随着 iPhone 6s 以及 iPhone 6s Plus 的发布，开发者们现在就可以为自己的应用配备上 3D Touch 功能了，从而给界面交互方式开启一个新的维度。</p>

<p>正如苹果所言，开发者可以通过非常简单的 API 来使用 3D Touch ，从根本上来说，也就是 UITouch 的一个简单的新属性。</p>

<pre><code>override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) {
     guard let touch = touches.first else { return }
     if traitCollection.forceTouchCapability == .Available {
        println("Touch pressure is \(touch.force), maximum possible force is \(touch.maximumPossibleForce)")
     }
}
</code></pre>

<p>这个新的 API 可以让应用发挥出巨大的潜力，比如说游戏中的额外控制选项、绘图应用中的细粒度(fine-grained)控制，甚至是用来替代我们在 iOS 设备中使用过的长按操作(tap-and-hold)的极佳选择。</p>

<p>除了 UITouch 中新增的 API 外，苹果还为应用提供了两个用来增加3D Touch 功能的类集：UIPreviewAction 和 UIApplicationShortcutItem。</p>

<p>UIPreviewAction允许开发者在用户使用 3D Touch 功能触控一个 UI 元素的时候，快速地在一个新的预览窗口中显示某些内容。这种快速浏览应用特定内容的方式真的非常棒，比如说我们可以快速预览邮件信息、照片，甚至是网页内容，而无需弹出一个完整的视图控制器。</p>

<p>UIApplicationShortcutItem对象能够让 iOS 主屏幕激活一项令人惊叹的新特性。当用户使用 3D Touch 按下某个应用的图标时，一个选项列表就会被弹出，允许用户快速跳转至应用的特定部分，或者执行某项应用内的功能。</p>

<p><img src="http://images.90159.com/10/touch.jpg" alt="touch" /></p>

<p>总而言之，3D Touch 的引入给 iOS 设备解锁了一个全新的交互方式，并且将会给接下来的 iOS 应用带来新一代的创新。关于3D Touch 的实例代码和相关信息可以在苹果开发者网站的3D Touch网页上找到，祝你好运！</p>

<p>作者：Tim Oliver
@TimOliverAU — iComics创始人</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个非常不错的自定义UIAlertView第三方类库]]></title>
    <link href="http://www.superqq.com/blog/2015/10/30/two-nice-uialertview/"/>
    <updated>2015-10-30T10:08:00+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/30/two-nice-uialertview</id>
    <content type="html"><![CDATA[<p>UIAlertView大家都不陌生了。UIAlertView不可以添加控件，比如说：UILabel、UITextView等等，所以遇到这个需求，一般都要自定义UIAlertView来解决。</p>

<p>我再github上找到了两个非常错的自定义UIAlertView第三方类库，分别是：LMAlertView和CustomIOSAlertView。</p>

<h2>LMAlertView使用简介</h2>

<p><a href="https://github.com/lmcd/LMAlertView">LMAlertView</a>在github上有610个star。说明这个第三方的UIAlertView还不错，我大概看了一下用法也比较简单。</p>

<p>来看看两个个案例效果：</p>

<p><img src="https://camo.githubusercontent.com/eb9242282b703a847c5ca45ef47462ec507ba573/687474703a2f2f6c6d63642e6d652f4c4d416c657274566965772d637573746f6d4032782e706e67" alt="1" /></p>

<!--more-->


<p><img src="https://camo.githubusercontent.com/b1c95e3be84a8d277e1c542ca768b3bdebe043a6/687474703a2f2f6c6d63642e6d652f4c4d416c657274566965772d7265766965774032782e706e673f33" alt="2" /></p>

<h3>用CocoaPods安装LMAlertView</h3>

<pre><code>pod 'LMAlertView'
</code></pre>

<h3>使用案例</h3>

<pre><code>LMAlertView *alertView = [[LMAlertView alloc] initWithTitle:@"iOSDevTip"
                                        message:@"关注一下"
                                       delegate:nil
                              cancelButtonTitle:@"ok"
                              otherButtonTitles:nil];

// Add your subviews here to customise
UIView *contentView = alertView.contentView;

[alertView show];   
</code></pre>

<p>LMAlertView还保持着UIAlertView的创建方法，作者还比较用心。</p>

<h2>CustomIOSAlertView使用简介</h2>

<p><a href="https://github.com/wimagguc/ios-custom-alertview">CustomIOSAlertView</a>比LMAlertView的star还多一些，有861个。同样我们先看一下效果：</p>

<p><img src="https://github.com/wimagguc/ios-custom-alertview/raw/master/Docs/screen.png" alt="3" /></p>

<h3>用CocoaPods安装CustomIOSAlertView</h3>

<pre><code>pod 'CustomIOSAlertView', '~&gt; 0.9.3'
</code></pre>

<h3>使用案例</h3>

<pre><code>CustomIOSAlertView *alertView = [[CustomIOSAlertView alloc] init];  UIView *customView ..;

[alertView setContainerView:customView];
[alertView show];
</code></pre>

<p>CustomIOSAlertView可以设置代理，还可以通过block来实现按钮的点击事件。功能相对比较齐全。</p>

<p>喜欢的童鞋可以star一下，以备不时之需。如果你觉得不错，记得分享给更多朋友哈，谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一次皆大欢喜的程序员跳槽加薪]]></title>
    <link href="http://www.superqq.com/blog/2015/10/29/programmer-job-raise/"/>
    <updated>2015-10-29T10:49:15+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/29/programmer-job-raise</id>
    <content type="html"><![CDATA[<p>我的朋友A君是个典型的.NET开发人员，技术不错，人品也不错，在一家小公司（姑且称为甲公司）做项目开发，是技术骨干。</p>

<p>3个月前，他找到我说想跳槽，让我帮忙介绍工作。我说为什么想跳了？</p>

<h2>1.为什么想离职？</h2>

<p>他简单说了一下他在甲公司当时的状况：A君在甲公司做了两年多，这两年多完成了一个大项目，作为开发的核心主力，开发压力很大，特别是项目上线前的几个月是非常辛苦，几乎每晚都要加班到12点以后，周末最多只有一天休息。在最困难的时候，老板给大家大气，“大家再坚持坚持，项目上线赚钱了，就给大家涨工资，公司是绝对不会亏待大家的”，在老板豪情壮语的加薪鼓励下，大家要紧牙关拼上了。终于，半年前，项目上线了，运行也慢慢稳定了，公司赚钱也多了起来。</p>

<p>是的，公司赚钱了，利润很可观，这是大家都知道的事情。但是，一两个月过去了，加薪的事情完全没影，老板就像从来没提过一样。于是，A君向人事经理说出了希望加薪的请求，最后，得到的回复（在小公司，这当然是老板的意思）：（1）A君目前的工资与外面相比，基本是持平的。（2）A君目前的工作很悠闲，工作量不饱和。</p>

<p>关于（1）实际上是个难题，两个人的工资要怎么比较，几乎都是老板一个非常主观的想法。而关于（2），却是事实：由于新的项目还在调研中，所以，A君的工作暂时就轻松了不少，主要就是维护线上的系统，加加小功能，修修小bug，比较清闲。</p>

<!--more-->


<h2>2.老板很有骨气</h2>

<p>A君听到回复后，很是生气，在和同事们一起吃饭时，就忍不住埋怨起公司来，后来，这话传到了老板的耳朵里，老板很有骨气：越是抱怨，越不给你涨工资，看你怎么样。</p>

<p>终于，A决定离职，老板一如既往的有骨气：离职就离职，离开你公司就得关门了？</p>

<p>所以，就回到了开头的一幕，3个月前，A要我帮忙介绍工作。我刚好想到之前另外一个乙公司的技术经理联系我说，他下面有个B君想离职，希望我推荐个人，事成之后有推荐费拿的。理所当然的，我把A推荐了到了乙公司，A接手了B君的工作（在接手的过程中，A和B还成为了好朋友），乙公司对A的表现非常满意，最后，A的工资相比在甲公司涨幅达到50%。</p>

<h2>3.对调一下吧</h2>

<p>事情还没完，A君从甲公司离职后，甲公司的线上系统的维护就成为一个大问题了，老板命令人事经理赶快找人来顶上，苦逼的人事经理在QQ里群发了招聘的信息，这个信息也发给了A君，于是，A君把正在找工作的B君推荐过去了。B君在甲公司工作一个月后就转正，老板也很满意，相比之前在乙公司工资上涨了30%，和现在A的工资差不多。</p>

<p>—— 后来，A告诉我，B之所以要离职，原因跟A是差不多的。</p>

<h2>4. 皆大欢喜</h2>

<p>这真是一个皆大欢喜的局面！</p>

<pre><code>A到乙公司接手了原来B的工作，工资涨了50%。

B到甲公司接手了原来A的工作，工资涨了30%。

更重要的是，甲、乙公司的老板都爽了，对新进来的员工的表现都非常满意。

而我，拿到了乙公司的推荐费。

A和B成为了好朋友，除了经常探讨技术外，还经常一起讨论这搞笑的离职加薪过程，交流心得。
</code></pre>

<p>最后，我想说，这不是编的，这是一个真实的故事，而且以后还会发生……</p>

<blockquote><p>出处： GG2014
网址：<a href="http://www.cnblogs.com/justnow/p/4903436.html">http://www.cnblogs.com/justnow/p/4903436.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20年的老程序员对新入行的朋友的一些建议]]></title>
    <link href="http://www.superqq.com/blog/2015/10/28/20-years-programmers/"/>
    <updated>2015-10-28T13:09:57+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/28/20-years-programmers</id>
    <content type="html"><![CDATA[<p>从事编程这一行也已经20年了，到今天为止，有关编程方面的知识我也写了六七门课程了，教授课程的时间也已超过了1000小时，下面我所说的全部是我多年来的实践的经验之谈。</p>

<h2>◆编程真的不是一件容易的事</h2>

<p>不管你多喜欢或是多会编程，在学习和解决问题上总会碰到障碍。工作的时间越久就越能明白这个道理。不过这倒是一个让人进步的机会，因为你要一直不断的学习才能很好的解决你面前的难题。如果你已不有了进取心，那么当遇到难道无法解决时你就会想要放弃。</p>

<h2>◆编程也是最让人沮丧的事情</h2>

<p>正常的编程过程都是这样的：尝试、失败、学习、思考、灵感、成功。在这个漫长的过程中，常有人会感到沮丧也是很正常的事，如果最终成功了，那么接下来你会想挑战更难的项目，当然，之前的沮丧就会从新而来，又是一个从新学习的机会，在这个过程中，我们要懂得调整好心态，从新从发。</p>

<h2>◆办法总是要比困难多</h2>

<p>经过不断的学习，我们的编程技术会越来越强，对自己也会更加自信。每个人小时候都会有大大小小的闯祸经历，但随着我们的成长和能力的增强，我们很少再去办错事情了。而如今我们也有办法解决我们所犯的错。</p>

<!--more-->


<h2>◆编程就像魔法，而我们每个人都成为魔法师</h2>

<p>经过我们的努力，学习好编程的各种技能，当你做出来的各种编程代码，让别人操作起来轻而易举的就能得到他们想要的效果时，他们就会觉得我们像魔法师一样，因为我们所提供的这些功能可以让他们更轻松，他们也更需要我们的这种技能。</p>

<h2>◆要学会很好的利用网络资源</h2>

<p>当你刚开始学习编程时，如果遇到难道，你可以很好的利用网络来搜索你想要的东西，因为在你之前一定有很多人像你一样遇到过类似的问题，所以你一定要尽快的掌握如何有效的网上搜索技能，这样你会更快的得到有效学习。</p>

<h2>◆对于一个程序员来讲，工具箱一定是我们的好助手</h2>

<p>工具箱里的功能是程序员不可缺少的，这些工具将伴随我们每一天，随着我们经验的增长，我们还会学习到更高级的工具，有些工具虽然不是很常用，但他们更擅长解决一些特定的问题（例如，二叉树数据结构、A*、Valgrind、调试器等等）。大多数编程领域（游戏开发、Web开发、数据库）都有自己特有的一系列解决问题的模式。所以掌握的工具越多对你越有利。</p>

<h2>◆如果想更擅长编程，最好是阅读大量代码和亲自写大量的代码</h2>

<p>在这个行业里有成就的老程序员早已写下了很多可供我们参考的代码，所以，为什么不去多看看呢？当然，自己的实践也是不可缺少的，好好练习写代码吧，努力总是有收获的不是吗？</p>

<h2>◆不要满足于现状，因为你永远不会是最好的</h2>

<p>编程中的知识你永远都学不完，他就像一个大集会一样，总是有新的难道需要我们去解决。所以我们也应该要学习新的知识来解决面前的难题。只有你能做到这一点，你将永远不必担心自己的饭碗。</p>

<p>via：<a href="http://netsmell.com/post/what-i-tell-all-new-programmers.html">http://netsmell.com/post/what-i-tell-all-new-programmers.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从产品经理的角度算一算，做一个app需要花多少钱？]]></title>
    <link href="http://www.superqq.com/blog/2015/10/27/product-manager-calculate-app/"/>
    <updated>2015-10-27T14:41:46+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/27/product-manager-calculate-app</id>
    <content type="html"><![CDATA[<blockquote><p>作为互联网从业者，被外行的朋友们问及最多的问题是，“做一个网站需要多少钱？”或者“做一个APP需要多少钱？”。作为做过完整网站项目和APP的人，今天从产品经理的角度，一起来算一下中小型APP从无到有需要做哪些工作，以及为达成使命，需要付出多少金钱代价。</p></blockquote>

<p>以下内容的前提是：深圳、移动互联网方向。包含研发一个新产品过程中一些常见的工作，并非十全十美。</p>

<p>首先假设在做APP之前我们已经有了一个成熟的团队（这是非常幸运的前提，很多产品研发进度极其缓慢的原因之一就是在过程中不断在招人），团队的结构以架构师兼后台开发1名+安卓1名+iOS开发1名+产品经理1名+前端开发1名+设计师1名。你可能也发现了这些人员配备都是单点的，一旦有人生病或请假，某个职位就会缺失，项目进度就会拖后，所以我们大约配备2个浮动名额，也就是，初始团队大概有8名，我们假设团队平均工资在13000左右（憋惊讶，深圳需要这个数，还是比较低的。。。），需要给员工缴纳五险一金，详见下表（假设我们是老实善良的公司，公积金按最低标准缴纳）：</p>

<p><img src="http://images.90159.com/10/product.jpg" alt="product" /></p>

<p><strong>除工资的部分，还要平均为每个员工多缴纳 3653元的五险一金支出，员工部分的支出是 （13000+3653）*8=133224元/月。</strong></p>

<p>好，有了团队，下一步要解决的是工作场所的问题，8人团队可以选择创业孵化器（前提是你能找到孵化器）或者中低端的办公场所（这类的办公场所，深圳大约是120元/㎡，大约100平米）。这里有必要稍微提以下孵化器，孵化器的租金会比较便宜（或者不要钱），在接纳创业团队之前一般会签署协议，需要以场地作为股权置换条件，或者是优先投资权，是否划算，得创业团队自己掂量。算上水电、物业，一个月15000左右算比较省了。</p>

<p>有了场地和团队，接下来置换办公耗材、宽带之类的（假设电脑自己带），普通的人体工程学椅子价格在150元左右，如果不买工程学椅子也可以，用普通的椅子，加上桌子平摊成本，桌椅需要200左右的成本，这算一次性付出。拍脑袋，6000元可以搞定吧。</p>

<p>唔，人、场地、作案工具齐活了，开始进入正题吧。</p>

<h3>一、产品定位、扯皮、早期工作准备阶段。</h3>

<p>做APP之前一般会有个老板，老板大概知道自己想要什么功能（对，老板一般不知道自己要做什么东西，需求是什么，产品定位是什么），这时候产品经理要出马了，跟老板各种扯皮、厘清需求、找产品定位，这里大概扯吧个两周，好说歹说会把产品的定位、一期的需求想清楚（期间架构师可以开始构思产品的技术架构了，未能正式开工）。</p>

<p>产品定位以及早期的需求确定出来之后，需要想个产品的名字、需求调研、竞品调研分析、注册域名、购置服务器以及周边基础能力（如CDN存储、短信服务、消息推送等）、商标（未注册商标、很多团队就是吃了这个亏）、抢注域名、设计logo，这里在老板不中途改变想法、变更产品需求和定位的前提下，最起码扯一周，这时候产品的原型、技术架构的雏形也出来了，基本可以进入真刀真枪的干活了。这一步假设域名不需要花大价钱购买，全部费用算起来拍脑袋10000元/年 可以搞定。</p>

<!--more-->


<h3>二、产品版本策划、架构设计阶段。</h3>

<p>看似一切都准备就绪之后，产品开始整理需求，按照需求优先级规划版本。架构师按照产品的发展方向构想，开始着手进入开发环境、生产环境部署、基础代码研发阶段。</p>

<p>很有必要提一下的是，做APP比较常见的两种功能实现方式有native原生和webview 方式，这两种方式的优劣不在本文的讨论范围，一般为了保证体验，以原生的方式为主，webview的方式为辅。以原生的方式做开发，版本是尤为重要的。其一，APP开发完成之后，需要把上架到APP store（假设我们只上iOS和安卓），iOS 的APP Store 有冗长的应用审核周期，你必须提前把往后几个中小版本的功能规划好了才不至于在这个环节自乱阵脚；其二，你的APP安装到用户的手机上时你肯定希望他大部分时候运行的都是最新的版本，如果你的版本更新过于频繁，用户也会烦。</p>

<p>看起来过程似乎非常顺利，产品经理把产品的思路厘清之后，开始准备产品V1.0 的规划。</p>

<p>新产品从无到有常见的工作：</p>

<pre><code>（1）产品官网，产品官网是产品、公司、团队的脸面，让用户进入之后能以最快的速度了解你的定位以及产品特性，也就是什么样的人在为解决什么样的问题，做着什么样的事情。

（2）用户协议。是的，如果用户要注册、使用你的产品，你得起草你的用户协议，跟律师或法务不断沟通调整。

（3）种子用户。嗯，你要思考你的第一批种子用户从哪里来，如何组织，怎么管理，他们是检验你产品的第一群人，对于验证你的产品定位、发现产品问题、提升产品体验来说至关重要。

（4）基础数据上报规划。你要知道产品一旦发布，在对用户行为一无所知的情况下，需要收集什么数据来优化、调整你的产品设计，思考你的产品方向。

（5）UI设计与交互标准制定。不能保证产品的UI以及交互一上线就有让用户觉得惊艳的效果，但是必须保证UI/交互在一致性上没有问题。

（6）后台管理系统。如论是查看数据还是内容管理，后台管理系统是你工作的有效辅助，也不能少。

（7）APP。这是你的产品的重中之重，密切观察跟踪。

（8）。。。
</code></pre>

<p>如果一切顺利，那么在3-6个月之后，你的APP第一版应该有了第一个雏形了。</p>

<h3>三、内部测试、打磨阶段。</h3>

<p>在这个阶段，你要跟设计、研发、种子用户之间保持密切沟通，不断收集问题、发现问题、优化、解决问题，期间可能需要发布1-3个beta子版本。同时，你要想办法保持种子用户的活跃与配合的激情，这是一项艰巨的工作，谁做谁知道。</p>

<h3>四、发布阶段</h3>

<p>发布的时候，不算渠道宣传费用，不打广告，上线iOS APP Store 需要注册开发者账号，购买证书，也需要花费一定的费用，不多，也就99美元/年。</p>

<p>如果你做得多一些，找安全团队帮你做安全评估，这里也要花上一些钱，这里就不算了。至于负载均衡、加速技术什么的，你的APP刚上线，应该用不上。</p>

<p>6个月的时间，算快，一个APP从无到有需要的费用大概这么算：</p>

<pre><code>人工费用：    133224元*6个月 ≈ 80 w。

场地租金： 15000元*6个月 = 9w。

办公耗材+桌椅支出：1w。

服务器、域名、周边IT基础费用：2w。
</code></pre>

<p>大约算下来，不算营销费用，第一个版本，你需要准备100w。</p>

<p>是的，当有人问题做一个APP需要多少钱时，你可以回答一个不太复杂的APP，从无到有做出来，半年第一个版本出来，需要100万。</p>

<p>当别人做出很赞的东西，我们常感慨“啊，这个东西我早想到了”，作为程序员或产品经理，想到了并不是什么值得骄傲的事情，重要的是：做出来，是的，执行力很重要。</p>

<blockquote><p>本文作者 @歪，微信公众号：程序员和产品经理（ID：devpdm） 来源：鸟哥笔记（ID：niaoge8）</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Adobe Photoshop CS6 破解教程(图文)]]></title>
    <link href="http://www.superqq.com/blog/2015/10/20/mac-adobe-photoshop-crack/"/>
    <updated>2015-10-20T21:05:12+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/20/mac-adobe-photoshop-crack</id>
    <content type="html"><![CDATA[<p>看到网上很多童鞋发帖咨询如何破解 Mac Adobe Photoshop CS6 ，今天刚好换电脑，我又下载了一个Photoshop，并且成功破解。我把破解过程记录一下，希望能帮助到更多童鞋。</p>

<h2>下载Adobe Photoshop CS6</h2>

<p>如果你找不到下载地址，我教你一个简单的，在百度里面搜索Photoshop:</p>

<p><img src="http://images.90159.com/10/ps1.png" alt="ps1" /></p>

<p>看到了吧，上面还显示一行绿色字体：已通过百度安全认证，请放心使用！所以不需要到这到那去找下载地址了。</p>

<h2>安装Adobe Photoshop CS6</h2>

<p>下载完成之后，双击解压，找到install：</p>

<p><img src="http://images.90159.com/10/ps5.png" alt="ps1" /></p>

<p>别急，这个时候请务必断网！然后，再去点击试用：</p>

<p><img src="http://images.90159.com/10/ps2.png" alt="ps1" /></p>

<p>接受协议：</p>

<p><img src="http://images.90159.com/10/ps3.png" alt="ps1" /></p>

<p>进入安装界面：</p>

<p><img src="http://images.90159.com/10/ps4.png" alt="ps1" /></p>

<!--more-->


<h2>破解Adobe Photoshop CS6</h2>

<p>下载amtlib.framework，百度云盘地址放出来会被和谐，所以我把下载地址放到公众号iOS开发：iOSDevTip  关注之后回复：ps 即可获取！</p>

<p>在“应用程序”文件夹，找到Adobe Photoshop CS6文件夹，在里面找到Adobe Photoshop CS6.app，右键选择“显示包内容” 。</p>

<p><img src="http://images.90159.com/10/ps6.png" alt="ps1" /></p>

<p>找到contents/framework文件夹，把刚才解压得到的amtlib.framework拷贝进去，替换整个文件夹。</p>

<p><img src="http://images.90159.com/10/ps7.png" alt="ps1" /></p>

<p>恭喜你，破解完成！如果破解过程中遇到问题，可以加我微信：chinaligang 如果有时间我很乐意把你解决噢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[五个案例让你明白GCD死锁]]></title>
    <link href="http://www.superqq.com/blog/2015/10/16/five-case-know-gcd/"/>
    <updated>2015-10-16T20:29:42+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/16/five-case-know-gcd</id>
    <content type="html"><![CDATA[<pre><code>作者：brighttj（@saitjr

网址：http://www.brighttj.com/ios/ios-gcd-deadlock.html
</code></pre>

<p>死锁一直都是在使用多线程时，需要注意的一个问题。以前对同步、异步，串行、并行只有一个模糊的概念，想想也是时候整理一下了。再看看之前的博客，已经很久没有干货了【说得好像之前有干货一样】，所以，这篇博客，我尽最大努力，也借鉴了很多其他博客中的例子，来讲解GCD死锁问题。</p>

<p>环境信息：</p>

<p>Mac OS X 10.10.5</p>

<p>Xcode 6.4</p>

<p>iOS  8.4</p>

<h2>串行与并行</h2>

<p>在使用GCD的时候，我们会把需要处理的任务放到Block中，然后将任务追加到相应的队列里面，这个队列，叫做Dispatch Queue。然而，存在于两种Dispatch Queue，一种是要等待上一个执行完，再执行下一个的Serial Dispatch Queue，这叫做串行队列；另一种，则是不需要上一个执行完，就能执行下一个的Concurrent Dispatch Queue，叫做并行队列。这两种，均遵循FIFO原则。</p>

<pre><code>举一个简单的例子，在三个任务中输出1、2、3，串行队列输出是有序的1、2、3，但是并行队列的先后顺序就不一定了。
</code></pre>

<p>那么，并行队列又是怎么在执行呢？</p>

<p>虽然可以同时多个任务的处理，但是并行队列的处理量，还是要根据当前系统状态来。如果当前系统状态最多处理2个任务，那么1、2会排在前面，3什么时候操作，就看1或者2谁先完成，然后3接在后面。</p>

<p>串行和并行就简单说到这里，关于它们的技术点其实还有很多，可以自行了解。</p>

<h2>同步与异步</h2>

<p>串行与并行针对的是队列，而同步与异步，针对的则是线程。最大的区别在于，同步线程要阻塞当前线程，必须要等待同步线程中的任务执行完，返回以后，才能继续执行下一任务；而异步线程则是不用等待。</p>

<p>仅凭这几句话还是很难理解，所以之后准备了很多案例，可以边分析边理解。</p>

<!--more-->


<h2>GCD API</h2>

<p>GCD API很多，这里仅介绍本文用到的。</p>

<ol>
<li><p>系统标准提供的两个队列</p>

<pre><code> // 全局队列，也是一个并行队列

 dispatch_get_global_queue 

 // 主队列，在主线程中运行，因为主线程只有一个，所以这是一个串行队列

 dispatch_get_main_queue 
</code></pre></li>
<li><p>除此之外，还可以自己生成队列</p>

<pre><code> // 从DISPATCH_QUEUE_SERIAL看出，这是串行队列

 dispatch_queue_create("com.demo.serialQueue", DISPATCH_QUEUE_SERIAL) 

 // 同理，这是一个并行队列

 dispatch_queue_create("com.demo.concurrentQueue", DISPATCH_QUEUE_CONCURRENT) 
</code></pre></li>
</ol>


<p>接下来是同步与异步线程的创建：</p>

<pre><code>dispatch_sync(..., ^(block)) // 同步线程

dispatch_async(..., ^(block)) // 异步线程
</code></pre>

<h2>案例与分析</h2>

<p>假设你已经基本了解了上面提到的知识，接下来进入案例讲解阶段。</p>

<h2>案例一：</h2>

<pre><code>NSLog(@"1"); // 任务1

dispatch_sync(dispatch_get_main_queue(), ^{

    NSLog(@"2"); // 任务2

});

NSLog(@"3"); // 任务3
</code></pre>

<p>结果，控制台输出：</p>

<pre><code>1
</code></pre>

<p>分析：</p>

<pre><code>dispatch_sync表示是一个同步线程；

dispatch_get_main_queue表示运行在主线程中的主队列；

任务2是同步线程的任务。
</code></pre>

<p>首先执行任务1，这是肯定没问题的，只是接下来，程序遇到了同步线程，那么它会进入等待，等待任务2执行完，然后执行任务3。但这是队列，有任务来，当然会将任务加到队尾，然后遵循FIFO原则执行任务。那么，现在任务2就会被加到最后，任务3排在了任务2前面，问题来了：</p>

<pre><code>任务3要等任务2执行完才能执行，任务2由排在任务3后面，意味着任务2要在任务3执行完才能执行，所以他们进入了互相等待的局面。【既然这样，那干脆就卡在这里吧】这就是死锁。
</code></pre>

<p><img src="http://www.brighttj.com/wp-content/uploads/2015/09/gcd-deadlock-1.png" alt="deadlock" /></p>

<h2>案例二：</h2>

<pre><code>NSLog(@"1"); // 任务1

dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{

    NSLog(@"2"); // 任务2

});

NSLog(@"3"); // 任务3
</code></pre>

<p>结果，控制台输出：</p>

<pre><code>1

2

3
</code></pre>

<p>分析：</p>

<p>首先执行任务1，接下来会遇到一个同步线程，程序会进入等待。等待任务2执行完成以后，才能继续执行任务3。从dispatch_get_global_queue可以看出，任务2被加入到了全局的并行队列中，当并行队列执行完任务2以后，返回到主队列，继续执行任务3。</p>

<p><img src="http://www.brighttj.com/wp-content/uploads/2015/09/gcd-deadlock-2.png" alt="2" /></p>

<h2>案例三：</h2>

<pre><code>dispatch_queue_t queue = dispatch_queue_create("com.demo.serialQueue", DISPATCH_QUEUE_SERIAL);

NSLog(@"1"); // 任务1

dispatch_async(queue, ^{

    NSLog(@"2"); // 任务2

    dispatch_sync(queue, ^{  

        NSLog(@"3"); // 任务3

    });

    NSLog(@"4"); // 任务4

});

NSLog(@"5"); // 任务5
</code></pre>

<p>结果，控制台输出：</p>

<pre><code>1

5

2

// 5和2的顺序不一定
</code></pre>

<p>分析：</p>

<p>这个案例没有使用系统提供的串行或并行队列，而是自己通过dispatch_queue_create函数创建了一个DISPATCH_QUEUE_SERIAL的串行队列。</p>

<pre><code>执行任务1；

遇到异步线程，将【任务2、同步线程、任务4】加入串行队列中。因为是异步线程，所以在主线程中的任务5不必等待异步线程中的所有任务完成；

因为任务5不必等待，所以2和5的输出顺序不能确定；

任务2执行完以后，遇到同步线程，这时，将任务3加入串行队列；

又因为任务4比任务3早加入串行队列，所以，任务3要等待任务4完成以后，才能执行。但是任务3所在的同步线程会阻塞，所以任务4必须等任务3执行完以后再执行。这就又陷入了无限的等待中，造成死锁。
</code></pre>

<p><img src="http://www.brighttj.com/wp-content/uploads/2015/09/gcd-deadlock-3.png" alt="3" /></p>

<h2>案例四：</h2>

<pre><code>NSLog(@"1"); // 任务1

dispatch_async(dispatch_get_global_queue(0, 0), ^{

    NSLog(@"2"); // 任务2

    dispatch_sync(dispatch_get_main_queue(), ^{

        NSLog(@"3"); // 任务3

    });

    NSLog(@"4"); // 任务4

});

NSLog(@"5"); // 任务5
</code></pre>

<p>结果，控制台输出：</p>

<pre><code>1

2

5

3

4

// 5和2的顺序不一定
</code></pre>

<p>分析：</p>

<p>首先，将【任务1、异步线程、任务5】加入Main Queue中，异步线程中的任务是：【任务2、同步线程、任务4】。</p>

<p>所以，先执行任务1，然后将异步线程中的任务加入到Global Queue中，因为异步线程，所以任务5不用等待，结果就是2和5的输出顺序不一定。</p>

<p>然后再看异步线程中的任务执行顺序。任务2执行完以后，遇到同步线程。将同步线程中的任务加入到Main Queue中，这时加入的任务3在任务5的后面。</p>

<p>当任务3执行完以后，没有了阻塞，程序继续执行任务4。</p>

<p>从以上的分析来看，得到的几个结果：1最先执行；2和5顺序不一定；4一定在3后面。</p>

<p><img src="http://www.brighttj.com/wp-content/uploads/2015/09/gcd-deadlock-4.png" alt="4" /></p>

<h2>案例五：</h2>

<pre><code>dispatch_async(dispatch_get_global_queue(0, 0), ^{

    NSLog(@"1"); // 任务1

    dispatch_sync(dispatch_get_main_queue(), ^{

        NSLog(@"2"); // 任务2

    });

    NSLog(@"3"); // 任务3

});

NSLog(@"4"); // 任务4

while (1) {

}

NSLog(@"5"); // 任务5
</code></pre>

<p>结果，控制台输出：</p>

<pre><code>1

4

// 1和4的顺序不一定
</code></pre>

<p>分析：</p>

<p>和上面几个案例的分析类似，先来看看都有哪些任务加入了Main Queue：【异步线程、任务4、死循环、任务5】。</p>

<p>在加入到Global Queue异步线程中的任务有：【任务1、同步线程、任务3】。</p>

<p>第一个就是异步线程，任务4不用等待，所以结果任务1和任务4顺序不一定。</p>

<p>任务4完成后，程序进入死循环，Main Queue阻塞。但是加入到Global Queue的异步线程不受影响，继续执行任务1后面的同步线程。</p>

<p>同步线程中，将任务2加入到了主线程，并且，任务3等待任务2完成以后才能执行。这时的主线程，已经被死循环阻塞了。所以任务2无法执行，当然任务3也无法执行，在死循环后的任务5也不会执行。</p>

<p>最终，只能得到1和4顺序不定的结果。</p>

<p><img src="http://www.brighttj.com/wp-content/uploads/2015/09/gcd-deadlock-5.png" alt="5" /></p>

<h2>参考</h2>

<pre><code>http://www.jianshu.com/p/0b0d9b1f1f19

http://www.cnblogs.com/tangbinblog/p/4133481.html
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[杀一个程序员不需用枪，改三次需求即可]]></title>
    <link href="http://www.superqq.com/blog/2015/10/11/kill-a-programmer/"/>
    <updated>2015-10-11T16:47:09+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/11/kill-a-programmer</id>
    <content type="html"><![CDATA[<p>1、栈和队列的区别是啥? 吃多了拉就是队列;吃多了吐就是栈。</p>

<p>2、世界上最遥远的距离不是生与死，而是你亲手制造的BUG就在你眼前，你却怎么都找不到她。</p>

<p>3、《c++程序设计语言》比《c程序设计语言》厚了几倍。。。果然有了对象就麻烦很多。</p>

<p>4、怎么使用面向对象的方式变得富有?继承。</p>

<p>5、为什么程序员总是分不清万圣节和圣诞节?因为 Oct 31 == Dec 25。</p>

<p>6、Keyboard not found &hellip; press F1 to continue</p>

<p>7、提交代码不写注释的人，XX就跟注释一样长。</p>

<p>8、杀一个程序员不需要用枪，改三次需求就可以了。</p>

<p>9、服务器按功能可以分为：数据库服务器，web服务器，cache服务器，下片儿服务器等等。</p>

<p>10、四个2B青年掐架。</p>

<p>A：你丫等着，我爹是敏感词!</p>

<p>B：Cao你大爷!你丫牛B神马，我爹在网上搜索根本无法显示!!</p>

<p>C： 我爹404 not found!!!</p>

<p>D：我爹Connection Reset !!!!</p>

<p>11、一同学问我，软件外包是什么。解释了几句还没明白，遂想了一下：包工头知道吧?顿悟！</p>

<p>12、十行代码九个警告八个错误竟然敢说七日精通六天学会五湖四海也不见如此三心二意之项目经理简直一等下流。</p>

<p>13、一个程序猿在肉店买了1公斤肉，回家一称，他不高兴的跑回肉店对老板说：少了24克……</p>

<p>14、网络聊天的时候，想表达对方是猪，一般人会打“xxx你这个猪。”，程序员会打 xxx.isPig = TRUE。</p>

<p>15、两个程序员，一个技术精湛，思维严谨，认真负责，Bug极少，至今单身;一个技术一般，吊儿郎当，Bug一堆，经常被测试MM叫到她旁边，接受批评，后来成了她男朋友。</p>

<p>16、宝宝数学很好，2岁就可以从1数到10了。后来，我告诉他0比1还小。</p>

<p>今天吃饺子，我说：“宝宝，你数数你想吃几个饺子?”</p>

<p>“0，1，2，3。”一边说着一边拿起一个饺子，“这是第0个。”</p>

<p>老婆怒吼：“下一代还是做程序员的命!”</p>

<p>17、程序员找不到对象，一般有三种情况：</p>

<p>● C#、JAVA都有对象，但是经常找不到对象。</p>

<p>● ASM C直接没有对象。</p>

<p>● javascript都是伪对象，最多算暧昧。</p>

<p>但C++日子一直都好过，因为C++是多继承，富二代呀!!!</p>

<p>18、程序猿：我的第一个问题是，对于我第二个和第三个问题，你可不可以只用‘能’和‘不能’来回答?</p>

<p>老板：“OK!”</p>

<p>我的第二个问题是，如果我的第三个问题是我能不能涨工资?那么你对于我的第三个问题的答案能不能和第二个问题的答案一样?</p>

<p>老板：。。。。。。</p>

<p>19、假如生活欺骗了你，找50个程序员问问为什么编程；</p>

<p>假如生活让你想死，找50个程序员问问BUG改完了没有;</p>

<p>假如你觉得生活拮据，找50个程序员问问工资涨了没有;假如你觉得活着无聊，找50个程序员问问他们一天都干了什么!</p>

<p>20、c程序员看不起c++程序员， c++程序员看不起java程序员， java程序员看不起c#程序员，c#程序员看不起美工， 周末了，美工带着妹子出去约会了…一群傻X程序员还在加班!</p>

<p>21、客户被绑，蒙眼，惊问：“想干什么?”</p>

<p>对方不语，鞭笞之，客户求饶：“别打，要钱?”</p>

<p>又一鞭，“十万够不?”</p>

<p>又鞭，“一百万?”</p>

<p>又一鞭。客户崩溃：“你们TMD到底要啥?”</p>

<p>“要什么?我帮你做项目，写代码的时候也很想知道你TMD到底想要啥!”</p>

<p>22、“这位同学，请问你知道《边城》吗?”“呸!别跟我提编程，老子这辈子最讨厌的就是编程!”</p>

<p>23、摘自雷登书屋数据处理字典： 死循环: n.,见无限循环。 无限循环：n.,见死循环。</p>

<p>24、一个人正吸着雪茄，吐着烟圈。他女朋友生气了发飙道，“你没看见包装盒上的警告么?吸烟有害健康!” 那人回答道：“我是程序员。我们不关心警告，只关心错误。”</p>

<p>来源：豆夫脑</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIViewController的edgesForExtendedLayout属性]]></title>
    <link href="http://www.superqq.com/blog/2015/10/09/uiviewcontroller-rectedge/"/>
    <updated>2015-10-09T16:36:41+08:00</updated>
    <id>http://www.superqq.com/blog/2015/10/09/uiviewcontroller-rectedge</id>
    <content type="html"><![CDATA[<p>想必大家都遇到一种情况，明明y坐标设置的是0，但是总是被讨厌的导航栏给遮住。比如下面这个情况：</p>

<pre><code>UILabel *label = [[UILabel alloc] init];
label.frame = CGRectMake(10, 0, SCREEN.width - 20, 88);
label.backgroundColor = [UIColor redColor];
label.text = @"关注公众号iOS开发：iOSDevTip";
label.textColor = [UIColor whiteColor];
label.textAlignment = NSTextAlignmentCenter;
[self.view addSubview:label];
</code></pre>

<p>一起来看看效果：</p>

<p><img src="http://images.90159.com/10/RectEdge2.png" alt="RectEdge2" /></p>

<p>是不是很讨厌！其实，在iOS 7中，UIViewController引入了一个新的属性：edgesForExtendedLayout。 这个属性的默认值是UIRectEdgeAll。当你的容器是UINavigationController的shih，默认的布局就是从状态栏的顶部开始的。这就是为什么你设置的控件都往上漂移了66ot的原因。</p>

<pre><code>@property(nonatomic,assign) UIRectEdge edgesForExtendedLayout NS_AVAILABLE_IOS(7_0); // Defaults to UIRectEdgeAll
</code></pre>

<p>那么如何解决这个问题呢？有两种方法。</p>

<h2>方法一：改变edgesForExtendedLayout</h2>

<pre><code>self.edgesForExtendedLayout = UIRectEdgeNone;
</code></pre>

<p>将edgesForExtendedLayout属性设置为UIRectEdgeNone，这样布局就是从导航栏下面开始了。设置之后，再来看看效果：</p>

<p><img src="http://images.90159.com/10/RectEdge1.png" alt="RectEdge1" /></p>

<h2>方法二：导航栏半透明属性设置为NO</h2>

<pre><code>@property(nonatomic,assign,getter=isTranslucent) BOOL translucent NS_AVAILABLE_IOS(3_0) UI_APPEARANCE_SELECTOR; // Default is NO on iOS 6 and earlier. Always YES if barStyle is set to UIBarStyleBlackTranslucent
</code></pre>

<p>在iOS 6之前（包括iOS 6）translucent默认就是NO，在iOS 7就默认是YES了。</p>

<pre><code>self.navigationController.navigationBar.translucent = NO;
</code></pre>

<p>将导航栏的半透明属性关闭掉，布局也是从导航栏下面开始了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[报错：You Must Rebuild It With Bitcode Enabled (Xcode Setting ENABLE_BITCODE)（解决方案）]]></title>
    <link href="http://www.superqq.com/blog/2015/09/29/rebuild-bitcode-enable/"/>
    <updated>2015-09-29T15:08:00+08:00</updated>
    <id>http://www.superqq.com/blog/2015/09/29/rebuild-bitcode-enable</id>
    <content type="html"><![CDATA[<p>马上就要十一放假啦！大家是不是都很期待这一天到来，哈哈。相信有不少人跟我一样，早就请三天假回家了吧。希望大家十一都玩的开心噢！</p>

<p>今天在家里闲来无事，我就用Xcode7.0建一个项目。然后，引入一个第三方库，竟然运行不起来。报错如下：</p>

<p><img src="http://images.90159.com/09/error1.png" alt="1" /></p>

<p>我把错误提示复制出来，方便大家搜索：</p>

<pre><code>ld: 'XXX' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
</code></pre>

<p>Xcode7.0默认是开启Enable Bitcode的，如果你导入的一些第三方库在编译的时候没有Enable Bitcode 的话，就会导致报错。</p>

<p>解决方法有两种：</p>

<p>方法一：使用Enable Bitcode的第三方库</p>

<p>方法二：将工程中的Enable Bitcode设置为NO</p>

<p><img src="http://images.90159.com/09/error2.png" alt="1" /></p>

<p>如果你有更好的解决方法，记得告诉我噢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关 XcodeGhost 的问题和解答]]></title>
    <link href="http://www.superqq.com/blog/2015/09/24/apple-xcodeghost-answer/"/>
    <updated>2015-09-24T00:09:03+08:00</updated>
    <id>http://www.superqq.com/blog/2015/09/24/apple-xcodeghost-answer</id>
    <content type="html"><![CDATA[<p><strong>我听说了由 XcodeGhost 开发的恶意 app — 这是怎么回事？</strong></p>

<p>我们一直建议开发者使用由我们提供的免费、安全的工具，包括 Xcode，从而确保他们为 App Store 的用户创造出安全的 app。一些开发者下载了已被恶意软件感染的盗版 Xcode，由此开发的 app 也同样受到感染。</p>

<p>Apple 特意使用诸如 Gatekeeper 等技术，以防止安装从非 App Store 渠道下载的应用程序，和 / 或安装包括 Xcode 在内的未签名的应用程序。当开发者为了能安装类似 XcodeGhost 等恶意程序时，这些保护措施会被刻意地禁用。</p>

<p>作为 Apple 向开发者提供的业界先进工具之一，以下措施可以确保软件未被篡改：</p>

<pre><code>Xcode app 有 Apple 的代码签名。
从 Mac App Store 下载 Xcode 时，开发者的电脑系统自动对 Xcode 的代码签名会进行检查和验证。
从 Apple Developer Program 网站下载 Xcode 时，只要 Gatekeeper 没有被禁用，默认开发者的电脑系统对 Xcode 代码签名自动进行检查和验证。
</code></pre>

<h3>为什么开发者会不顾用户的安全下载盗版软件？</h3>

<p>为了更快下载我们的开发者工具，开发者有时会从其他非 Apple 站点搜寻。</p>

<h3>这会对我有什么影响吗？如何得知我的设备是否受到了影响？</h3>

<p>我们目前没有任何信息表明这些恶意软件与任何恶意事件相关，也没有信息表明这些软件被使用在传播任何个人身份信息的用途上。</p>

<p>我们目前没有看到任何客户个人身份信息受到影响，而且代码无法通过用户身份请求来获取 iCloud 或其他服务的密码。</p>

<p>只要一经发现这些 app 有可能通过恶意代码开发，我们就对其进行下架处理。开发者们正在快速更新他们的 app，以便用户使用。</p>

<!--more-->


<p>恶意代码只能提供一些基本信息，比如 app 和一般系统信息。</p>

<h3>从 Apps Store 下载 app 是否安全？</h3>

<p>我们已将由该盗版软件开发的 apps 从 App Store 中撤下，并拦截了通过该恶意软件开发的新 app 进入 App Store。</p>

<p>我们正与开发者紧密协作，以确保受到影响的 app 尽快回到 App Store 供用户使用。</p>

<p>我们将在支持页面上列出受此影响的前 25 个 apps，方便用户验证他们是否已将这些 app 更新到了最新版本。</p>

<p>用户还将会收到更多信息，以便了解他们下载的某 app 是否会存在问题。一旦开发者更新了他们的 app，用户可以通过在设备上运行更新解决存在的问题。</p>

<p>我们正努力让中国的开发者可以用更快的速度下载 Xcode 测试版本。开发者也可以通过 developer.apple.com 列出的步骤来验证他们的 Xcode 是否被篡改过。</p>

<h2>XcodeGhost Q&amp;A</h2>

<p><strong>I’ve heard about malicious apps created by XcodeGhost — what does this mean?</strong></p>

<p>We always recommend developers using the free, secure tools we provide them — including Xcode — to ensure they’re creating the most secure apps for App Store customers. Some developers downloaded counterfeit versions of Xcode that have been infected with malware and created apps that were just as infected.</p>

<p>Apple incorporates technologies like Gatekeeper expressly to prevent non-App Store and/or unsigned versions of programs, including Xcode, from being installed. Those protections had to have been deliberately disabled by the developer for something like XcodeGhost to successfully install.</p>

<p>As part of providing developers the industry&rsquo;s most advanced tools, Apple provides developers the following checks to ensure software is untampered:</p>

<pre><code>The Xcode app is code-signed by Apple.
When you download Xcode from the Mac App Store the code signature for Xcode is automatically checked and validated by your system.
When you download Xcode from the Apple Developer Program web site, the code signature for Xcode is automatically checked and validated by your system by default as long as Gatekeeper is not disabled.
</code></pre>

<h3>Why would a developer put customers at risk by downloading counterfeit software?</h3>

<p>Sometimes developers search for our tools on other, non-Apple sites in an effort to find faster downloads of developer tools.</p>

<h3>How does this affect me? How do I know if my device has been compromised?</h3>

<p>We have no information to suggest that the malware has been used to do anything malicious or that this exploit would have delivered any personally identifiable information had it been used.</p>

<p>We’re not aware of personally identifiable customer data being impacted and the code also did not have the ability to request customer credentials to gain iCloud and other service passwords.</p>

<p>As soon as we recognized these apps were using potentially malicious code we took them down. Developers are quickly updating their apps for users.</p>

<p>Malicious code could only have been able to deliver some general information such as the apps and general system information.</p>

<h3>Is it safe for me to download apps from App Store?</h3>

<p>We have removed the apps from the App Store that we know have been created with this counterfeit software and are blocking submissions of new apps that contain this malware from entering the App Store.</p>

<p>We’re working closely with developers to get impacted apps back on the App Store as quickly as possible for customers to enjoy.</p>

<p>A list of the top 25 most popular apps impacted will be listed soon so users can easily verify if they have downloaded the latest versions of these apps. After the top 25 impacted apps, the number of impacted users drops significantly.</p>

<p>Customers will be receiving more information letting them know if they’ve downloaded an app/apps that could have been compromised. Once a developer updates their app, that will fix the issue on the user’s device once they apply that update.</p>

<p>We’re working to make it faster for developers in China to download Xcode betas. To verify that their version of Xcode has not been altered, they can take the following steps posted at &lt;developer.apple.com>.</p>

<p>文章来自：<a href="http://www.apple.com/cn/xcodeghost/">http://www.apple.com/cn/xcodeghost/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员月入过万已经不再是神话]]></title>
    <link href="http://www.superqq.com/blog/2015/09/02/manicure-salary-heigher-programmer/"/>
    <updated>2015-09-02T11:15:01+08:00</updated>
    <id>http://www.superqq.com/blog/2015/09/02/manicure-salary-heigher-programmer</id>
    <content type="html"><![CDATA[<h2>创业英雄汇</h2>

<p>最近看了CCTV 2 财经频道的《创业英雄汇》，可能有人还没有看过这个节目。简单介绍一下：《CCTV中国青年创业实战公开课—创业英雄汇》这是一档全新模式、极致化表达的新型创业服务节目。播出时段：财经频道 周五22：10～23：10。建议有创业想法的童鞋，可以好好看一下，说不定可以激发一些灵感！</p>

<p>我看的这一期是20150821。创业导师分别是聚美优品的CEO陈欧和英才杂志社的社长宋立新。陈欧最经典的一句话应该就是：我是陈欧，我为自己代言！之前，没有认真了解过陈欧，只是简答的看了一下关于陈欧的创业故事。通过这次《创业英雄汇》节目，感觉的陈欧确实挺有个人魅力。</p>

<h2>美甲师 VS 程序员</h2>

<p>第一位上台的创业者叫于明山，一位大叔界别的创业者。他的项目是“美道家”，致力于打造专业上门美容服务平台。服务对线就是女性，美容师也都是女性。美女美容师上门服务，听起来就是一个不错的项目。（我们这些屌丝程序员，估计享受不到这种服务啦！）</p>

<p>在导师考核环节，陈欧大概了解了一下“美道家”的美容师上的收入大概是多少。随后，陈欧说：一个好的美甲师，或者一个美容师，挣的钱甚至比一个程序员还高。我前一段时间听说有一个美甲师，甚至挣到五万到七万，这基本上是一个CEO的工资了。</p>

<p>一个美甲师能月入五万到七万，那还干什么程序员啊。想想就觉得还是程序员苦逼，以后再也不说程序员的工资高了。都不好意思说了，人家美甲师就比你高，而且人家还是自由职业者。</p>

<p>前段时间，听人说他们做优步一月轻轻松松月入五六万。优步每个月做够规定的单数，额外奖励7000元。经常在新闻上看到，哪里的司机刷单也你能月入多少多少。（不公平啊！）</p>

<h2>出路在哪里？</h2>

<p>真的是三百六十行，行行出状元啊！作为程序员，三四年工作经验，大概也就是一两万的工资吧。也许你的工资很高，但是加班肯定也不少。</p>

<p>在这个全名创业的浪潮下，我们程序员不能再闲着了。有想法就去干吧，说不定能闯出一片天地。</p>

<p>明天要不要辞职呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITablView上下滑动控制底部按钮的出现和消失]]></title>
    <link href="http://www.superqq.com/blog/2015/09/01/uitablview-up-down-slide/"/>
    <updated>2015-09-01T00:49:19+08:00</updated>
    <id>http://www.superqq.com/blog/2015/09/01/uitablview-up-down-slide</id>
    <content type="html"><![CDATA[<p>今天我们一起来做一个好玩的功能，通过UITablView上下滑动控制底部按钮的出现和消失。先来看看效果：</p>

<p><img src="http://images.90159.com/09/bottombutton.gif" alt="1" /></p>

<h2>需求分析</h2>

<p>要做一个这样的功能，对你来说应该不难，实现的方式也有很多。我们来分析一下要实现那几个小功能点：</p>

<ul>
<li>UITablView向上滑动，底部按钮消失</li>
<li>UITablView向下滑动，底部按钮出现</li>
<li>UITablView滑动到底部，底部按钮出现</li>
</ul>


<p>主要就是这三个小功能点。那么很简单，我们只需要判断UITablView是往上滑动，还是往下滑动，以及判断UITablView是否滑动到底部即可。</p>

<h2>代码实现</h2>

<h3>创建一个底部按钮</h3>

<pre><code>self.bottomButton = [UIButton buttonWithType:UIButtonTypeCustom];
self.bottomButton.frame = CGRectMake(SCREEN.width / 2 - 25, SCREEN.height - 50, 50, 50);
[self.bottomButton setBackgroundImage:[UIImage imageNamed:@"bottom"] forState:UIControlStateNormal];
[self.view addSubview:self.bottomButton];
</code></pre>

<p>既然是控制按钮的出现和消失，首先要创建一个底部按钮。SCREEN是个宏定义：</p>

<pre><code>#define SCREEN [UIScreen mainScreen].bounds.size
</code></pre>

<h3>判断UITablView上下滑动</h3>

<p>我们都知道，UITablView是继承UIScrollView的。所以UIScrollView的代理方法在UITablView是可以使用的。要判断UITablView上下滑动，我们需要实现UIScrollView的scrollViewDidScroll:代理方法：</p>

<pre><code>-(void)scrollViewDidScroll:(UIScrollView *)scrollView{
    if (scrollView.contentOffset.y &gt; self.offsetY &amp;&amp; scrollView.contentOffset.y &gt; 0) {//向上滑动

    }else if (scrollView.contentOffset.y &lt; self.offsetY ){//向上滑动

    }
    self.offsetY = scrollView.contentOffset.y;//将当前位移变成缓存位移
}
</code></pre>

<!--more-->


<h3>判断UITablView滑动到底部</h3>

<p>也是在scrollViewDidScroll:这个方法里面判断：</p>

<pre><code> //判断滑动到底部
if (scrollView.contentOffset.y == scrollView.contentSize.height - self.tableView.frame.size.height) {

}
</code></pre>

<h3>按钮消失和出现</h3>

<pre><code>//按钮消失
[UIView transitionWithView:self.bottomButton duration:0.1 options:UIViewAnimationOptionTransitionNone animations:^{
            self.bottomButton.frame = CGRectMake(SCREEN.width / 2 - 25, SCREEN.height, 50, 50);
        } completion:NULL];

//按钮出现        
[UIView transitionWithView:self.bottomButton duration:0.1 options:UIViewAnimationOptionTransitionNone animations:^{
  self.bottomButton.frame = CGRectMake(SCREEN.width / 2 - 25, SCREEN.height - 50, 50, 50);
  } completion:NULL];
</code></pre>

<p>按钮消失其实就是移除屏幕，这里我加了一个旋转的过度动画，需要什么动画效果都可以选择。按钮出现就是把按钮的frame设置到初始化时候的frame即可。</p>

<p>这样我们就实现了通过UITablView上下滑动控制底部按钮的出现和消失。代码我已经上传的github，下载地址还是<a href="https://github.com/worldligang/iOSStrongDemo">iOSStrongDemo</a></p>

<p>如果你觉得文章还不错，请分享给你的同学和朋友，欢迎推荐他们关注iOS开发：iOSDevTip 公众号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年MacBook更换SSD固态硬盘和16G内存条]]></title>
    <link href="http://www.superqq.com/blog/2015/08/27/macbook-replace-ssd-solid-state/"/>
    <updated>2015-08-27T10:42:34+08:00</updated>
    <id>http://www.superqq.com/blog/2015/08/27/macbook-replace-ssd-solid-state</id>
    <content type="html"><![CDATA[<h2>我的2012年MacBook</h2>

<p>我的电脑是2012年的MacBook Pro（13-inch, 2012 年中），是那种比较厚的一款。当时买的时候官网，标价是8888元。我是在新蛋网上买的，新蛋网有活动只需要7888元即可购买。</p>

<p>电脑配置：处理器是2.5 GHz Intel Core i5，内存是两个2G，也就是4G。配置在现在来看，那简直是太Low了。但是对于当时一直用黑苹果的我来说，这就是圣物。贴个图给大家看看：</p>

<p><img src="http://images.90159.com/08/ssdsave1.jpg" alt="ssdsave1" /></p>

<p>这就是比较厚的13-inch的电脑，看起来还是比较笨重的。我用电脑还是比较爱惜的，一直保护的很好。基本上没有什么损伤。</p>

<p>但是，随之使用年限的增长，电脑反应速度越来越慢了。打开xcode、火狐、Chrome、印象比较、QQ等几个软件，电脑反应速度明显很慢。</p>

<p>有时候调试个程序，反应好半天。想想就是一件痛苦的事情，大好时光都浪费在等电脑反应上。浏览器也经常卡死，有时候编辑好的东西没来得及保持，浏览器突然就没有反应了。</p>

<p>总之，电脑性能差的一塌糊涂。最近听朋友说换个SSD固态硬盘电脑反应会快很多，如果是2012年的电脑还可以升级内存。</p>

<p>本来我是准备把这个笔记本处理掉，再买一个配置好一些的笔记本。听朋友这样一说，觉得还是自己买个SSD固态硬盘换上，比较换算。</p>

<h2>购买SSD固态硬盘和内存条</h2>

<p>说换就换吧，于是在京东和淘宝上查了查，品类太多看的我都晕晕乎乎的。网上买东西其实我一点都不喜欢，选来选去不知道选哪一个好。</p>

<p>最后，在朋友的推荐下。我买的是牌子是创见（Transcend）240G的SSD固态硬盘，价格是999元。内存条我看了苹果官网的介绍，说的是MacBook Pro（13 英寸，2012 年中）最大支持8G内存。但是网上有人说，他们装了16G的，没有什么兼容上的问题。所以我也买了金士顿苹果专用内存条两个8G，一共638元。</p>

<p><img src="http://images.90159.com/08/ssdsave2.jpg" alt="ssdsave1" /></p>

<p>我不是来给创见和金士顿大广告的，只是告诉大家我用的是什么。收到货之后，夜里下班回到家里，就开始折腾我的电脑。</p>

<!--more-->


<h2>替换SSD固态硬盘</h2>

<p>拆开创见的SSD固态硬盘，里面自带的有小螺丝刀，还有硬盘的外接壳。我先把硬盘装进外接壳，然后连接电脑。可以识别出来，此时这就是一个移动硬盘。</p>

<p>我想把原来电脑的资料通过磁盘工具恢复到新买的创见硬盘上，但是发现我电脑里面存的资料已经远大于240G。于是，我想先把硬盘换上吧。以后慢慢把有用的资料拷贝过来。</p>

<p>我简单说一下替换SSD固态硬盘的步骤吧</p>

<h3>拆卸后盖</h3>

<p>用创见送的螺丝刀，把后盖上所有的螺丝都卸掉。MacBook后盖上有10个螺丝，不知道苹果设计是个有何寓意，难道是十全十美的意思，我只是猜测的。</p>

<h3>取出原有硬盘</h3>

<p>电脑后盖卸掉之后，找到硬盘的位置。在硬盘的侧面有一个固定的小架子，上面有两个小螺丝。卸掉这两个小螺丝之后，拿掉小架子。慢慢拽硬盘上预留的带子，拔掉硬盘前面的线，一定要慢慢的。</p>

<h3>安装SSD固态硬盘</h3>

<p>既然可以取出来，那么安装的方法也很简单。接头插好，把硬盘放入正确的位置。最后，别忘了用小架子把硬盘给固定住。</p>

<p>更换SSD固态硬盘没有什么难度。但是换内存条的时候，还是有一些小难度的。可能是因为我很少或者说从来都没有接触过的原因。</p>

<h2>替换内存条</h2>

<p>我没有看网上替换内存跳的教程，因为我觉得应该没有什么难度。苹果电脑的内存条紧挨着电池的位置，我看到内存条上面也有个小架子。于是，我很熟练的把上面的两个螺丝卸掉，然后试图去拿掉小架子，这个时候我发现根本拿不动。</p>

<p>再仔细看看，发现内存条两侧分别有一个固定的小条子。上下拉动没有反应。直接去口内存条也扣不掉。既然拿不掉也不能硬拿，搜了一下苹果官方的教程MacBook Pro：如何拆卸或安装内存<a href="https://support.apple.com/zh-cn/HT1270" target="_blank" title=“https://support.apple.com/zh-cn/HT1270”><a href="https://support.apple.com/zh-cn/HT1270">https://support.apple.com/zh-cn/HT1270</a></a></p>

<p>步骤很详细，安装苹果官方的教程，我把两个内存条替换好了。别高兴太早，事情远没有想象的那么简单。新装的SSD固态硬盘是没有系统的。</p>

<h2>装系统</h2>

<p>我对装系统不是特别了解，一开始我尝试直接启动电脑，同时按住command+option+r会进入苹果官方的安装界面。这个需要下驱动，还需要下载苹果系统，整个过程估计没有个大半条肯定是搞不定的。</p>

<p>接着尝试，把老硬盘的系统恢复的新的SSD固态硬盘上。由于老硬盘里面的东西比较多，于是我进入老硬盘的系统删了很多资料。让他能够小于240G。然后对老硬盘进行分区，试了很多次，分区一直失败。最终不得不放弃这个方法。</p>

<p>最后一招，做个启动盘。这里有教程<a href="http://bbs.feng.com/read-htm-tid-7057977.html" target="_blank" title=“http://bbs.feng.com/read-htm-tid-7057977.html”><a href="http://bbs.feng.com/read-htm-tid-7057977.html">http://bbs.feng.com/read-htm-tid-7057977.html</a></a></p>

<p>有5个多G，幸亏我家是100M得光纤，下载速度还挺快。下载完成之后，我把新的SSD固态硬盘分了一个10几G的空间出来，做启动盘使用。</p>

<p>利用磁盘工具的恢复功能，把你下载的系统恢复到新的分区上。记住：磁盘源选择你下载的系统，目的磁盘是新的分区。</p>

<p>完成之后，重启电脑，接下来都是傻瓜式操作。用了大概半个小时左右才把系统装好。这个时候看看，抬头看看电脑右上角的时间，发现已经2点了。
试用一下</p>

<p>花了一两千块和几个小时的时间折腾出来的电脑反应到底怎么样呢？其实我也迫不及待看一看，完全没有困意。简单使用了一下：速度确实很快，基本上没有遇到卡的情况。基本上达到我的要求，不枉费我花得钱和时间。</p>

<p>前面说MacBook Pro（13 英寸，2012 年中）最大支持8G内存，我特意看了一下内存：</p>

<p><img src="http://images.90159.com/08/ssdsave3.jpg" alt="ssdsave1" /></p>

<p>在看看存储：</p>

<p><img src="http://images.90159.com/08/ssdsave4.jpg" alt="ssdsave1" /></p>

<p>终于搞定了，这下子电脑速度提高了不少，也节省了买电脑的钱，真心不错！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVFoundation和 GPUImage初探]]></title>
    <link href="http://www.superqq.com/blog/2015/08/24/avfoundation-gpuimage-find/"/>
    <updated>2015-08-24T11:21:01+08:00</updated>
    <id>http://www.superqq.com/blog/2015/08/24/avfoundation-gpuimage-find</id>
    <content type="html"><![CDATA[<p>文章来自：<a href="http://vonglo.me/2014/08/24/AVFoundation%E5%92%8C-GPUImage%E5%88%9D%E6%8E%A2/" target="_blank" title=“AVFoundation和 GPUImage初探”>AVFoundation和 GPUImage初探</a></p>

<p>最近在做视频相关的东西，然后熟悉了一下AVFoundation框架，以及强大的开源库GPUImage。在这里记录这个过程中遇到的一些问题，以及解决的方法。</p>

<h3>AVFoundation的一些基本概念</h3>

<p>根据苹果的官方文档，AVFoundation是用来播放和创建实时的视听媒体数据的框架，同时提供Objective-C接口来操作这些视听数据，比如编辑，旋转，重编码。本文着重讲的是视频的录制和编辑和GPUImage的一些简单使用，其他的都是一笔带过。来看下苹果文档的一个框架图。</p>

<p><img src="http://images.90159.com/08/frameworksBlockDiagram_2x.png" alt="1" /></p>

<h4>相关类</h4>

<ul>
<li><code>AVAsset</code></li>
<li><code>AVAssetTrack</code></li>
<li><code>AVComposition</code></li>
<li><code>AVVideoComposition</code></li>
<li><code>AVAudioMix</code></li>
<li><code>AVMutableAudioMixInputParameter</code></li>
<li><code>AVMutableVideoCompositionInstrution</code></li>
<li><code>AVMutableVideoCompositionLayerInstrution</code></li>
</ul>


<p>简单的播放可以使用MPMoviePlayerController或者MPMovieViewController就行,简单的录
制可以直接使用UIImagePickerController。同样简单的声音播放直接使用AVAudioPlayer，简单的录制直接使用AVAduioRecorder。如果你想要有更多的操作，可使用各种复杂的方式来控制播放，比如在同一时刻为同一个asset的不同片段使用不同的分辨率渲染，playitem来管理asset的呈现状态和方式,playitemtrack管理asset中的轨道（track）状态。</p>

<!--more-->


<p>在AVFoudation框架中最核心的类就是AVAsset，他是由一系列的媒体数据组成的，包括但不限于:时间、大小(size)、标题、字幕等。其中每一个单独的媒体数据称为轨道(track)。同样剪辑操作中，AVMutableComposition是一个核心类。</p>

<p><img src="http://images.90159.com/08/asset-track.png" alt="4" /></p>

<p>这里又一个重要的东西就是CMTime,它是一个结构体，定义如下:</p>

<p>typedef struct
{
    CMTimeValue    value;      <br/>
    CMTimeScale    timescale;  <br/>
    CMTimeFlags    flags;      <br/>
    CMTimeEpoch    epoch;      <br/>
} CMTime;
通常时间是等于value/timescale的，所以两个有相同时间的CMTime它们的timescale并不一定相同。关于更多CMTime的内容可以看<a href="https://developer.apple.com/library/ios/documentation/CoreMedia/Reference/CMTime/Reference/reference.html#//apple_ref/doc/uid/TP40009748">这里</a>。</p>

<h3>进阶</h3>

<h4>视频的录制</h4>

<p>这里用的是系统原生录制,关于录制通常用到的几个类就是AVCaptureDevice、
AVCaptureSession、AVCaptureDeviceInput、AVCaptureOutput,同样，来看一张图。</p>

<p><img src="http://images.90159.com/08/capture.png" alt="2" /></p>

<p>一般来说，如果你想修改视频的相关信息，如拍摄地点等，可以拿到output的metadata来修改。大致代码如下:</p>

<pre><code>NSMutableArray *array = [output.metadta mutableCopy];
AVMutableMetadataItem *item = [[AVMutableMetadataItem alloc] init];
item.keyspace = ...;
item.key = ...;
item.value = ...;
[array addObject:item];
output.metadata = array;
</code></pre>

<p>如果录制时候想要得到指定的视频size必须先指定分辨率，像这样</p>

<pre><code>if ([session canSetSessionPreset:AVCaptureSessionPreset640x480]){ 

    session.sessionPreset = AVCaptureSessionPreset640x480;
}
else {
    //设置失败
}
</code></pre>

<p>切换摄像头或其他输入源必须在beginConfiguration和commitConfiguration之间来处理，大致是这样</p>

<pre><code>[session beginConfiguration];
//移除某个输入源
//再添加某个输入源
//再为新添加的输入源进行必要的相关设置
//...其他操作
[session commitConfiguration];
</code></pre>

<p>如果想对实时视频帧进行相关的渲染操作,通过 setSampleBufferDelegate:queue:方法来为output设置代理，同时必须指定queue，代理方法将会在这些queue上面被调用。可以在自己的类里面实现AVCaptureVideoDataOutput的协议方法,通过实现
captureOutput:didOutputSampleBuffer:fromConnection:来拿到视频的每一帧，默认情况下这些视频帧会被用最有效的格式来输出到output,当然也可以在拍摄之前就为output进行相关设置。</p>

<pre><code>AVCaptureVideoDataOutput *videoDataOutput = [AVCaptureVideoDataOutput new];
NSDictionary *newSettings =@{ (NSString *)kCVPixelBufferPixelFormatTypeKey : @(kCVPixelFormatType_32BGRA) };
videoDataOutput.videoSettings = newSettings;
</code></pre>

<p>说了这么多，感觉很虚，还是直接上代码，将以上部分衔接起来</p>

<pre><code>//自定义方法，小演示只添加了视频，没有添加声音，添加声音类似
- (void)yourCustomMethodName{
    AVCaptureSession *session = [[AVCaptureSession alloc] init];
    if ([session canSetSessionPreset:AVCaptureSessionPreset640x480]){ 

            session.sessionPreset = AVCaptureSessionPreset640x480;
        }
        else {
            //设置失败
        }
    AVCaptureDevice *device =
            [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];

    NSError *error = nil;
    AVCaptureDeviceInput *input =
            [AVCaptureDeviceInput deviceInputWithDevice:device error:&amp;error];
    if (!input) {
        // Handle the error appropriately.
    }
    if(session canAddInput:input){
        [session addInput:input];
    }
    AVCaptureVideoDataOutput *output = [[AVCaptureVideoDataOutput alloc] init];
    if(session canAddOutput:output){
        [session addOutput:output];
    }
    output.videoSettings =@{ (NSString *)kCVPixelBufferPixelFormatTypeKey : @(kCVPixelFormatType_32BGRA) };
    //设置帧率(FPS),每秒15帧
    output.minFrameDuration = CMTimeMake(1, 15);
    dispatch_queue_t queue = dispatch_queue_create("CustomQueue", NULL);
    [output setSampleBufferDelegate:self queue:queue];
    dispatch_release(queue)
    NSString *mediaType = AVMediaTypeVideo;

 //用来显示录制的实时画面
    AVCaptureVideoPreviewLayer *captureVideoPreviewLayer = [[AVCaptureVideoPreviewLayer alloc] initWithSession:session];
    [self.view.layer addSublayer:captureVideoPreviewLayer];

    //用户是否允许启用摄像头
    [AVCaptureDevice requestAccessForMediaType:mediaType completionHandler:^(BOOL granted) {
        if (granted)
        {
            //Granted access to mediaType
            [self setDeviceAuthorized:YES];
            [session startRunning];
        }
        else
        {
            //Not granted access to mediaType
            dispatch_async(dispatch_get_main_queue(), ^{
            [[[UIAlertView alloc] initWithTitle:@"AVCam!"
                                        message:@"AVCam doesn't have permission to use Camera, please change privacy settings"
                                       delegate:self
                              cancelButtonTitle:@"OK"
                              otherButtonTitles:nil] show];
                    [self setDeviceAuthorized:NO];
            });
        }
    }];
}

//协议方法,获取每一帧，将每一帧转换成图片，你也可以进行其他的渲染操作
- (void)captureOutput:(AVCaptureOutput *)captureOutput
         didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer
         fromConnection:(AVCaptureConnection *)connection {

    UIImage *image = imageFromSampleBuffer(sampleBuffer);
}
</code></pre>

<p>上面演示了如何取得每一帧实时画面,如果想要直接存成视频可使用AVCaptureMovieFileOutput,如下</p>

<pre><code>AVCaptureMovieFileOutput *movieFileOutput = [[AVCaptureMovieFileOutput alloc] init];
NSURL *fileURL = ...;    //存放位置
//指定代理
[aMovieFileOutput startRecordingToOutputFileURL:fileURL recordingDelegate:delete];
//也可以为其指定outputSettings
同样代理必须实现协议方法captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:,
</code></pre>

<p>当然还有其他各种具体的设置，如对焦、曝光、闪光灯以及白平衡等等均可以通过KVO来设置，每次设置前都加一个判断，是否支持指定模式,在这里不做详细叙述了,这里你可以看到<a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/04_MediaCapture.html#//apple_ref/doc/uid/TP40010188-CH5-SW14">更多</a>。</p>

<h4>视频的剪辑</h4>

<p>视频的剪辑包括但不限于:裁剪、旋转(改变transform)、添加水印、添加字幕、合并等。关于剪辑，无非就是取出视频中的轨道(视频和音频),然后对轨道进行一系列的操作变可以得到各种想要的效果。首先我们先来看下面一张图</p>

<p><img src="http://images.90159.com/08/composition.png" alt="3" /></p>

<p>AVMutableComposition是整个视频剪辑过程中的一个核心，下面着重讲解这个类。AVMutableComposition和AVAsset一样含有多个视/音频轨道，但是更重要的是，它可以将多个AVAssetTrack合并到一起，比如在视频合并时，可以直接将多段视频拼接到一个轨道(AVMutableCompositonTrcak)，音频也一样。通过借助AVMutableVideoComposition和AVMutableAudioMix来设置每一段的视/音频的属性，从而达到想要的视听效果，比如视频切换处的淡入淡出，声音的渐变，字幕等等。
关于上图的解释:首先通过将asset里面的轨道加载到composition的各轨道，然后通过audioMix和videoComposition对某个轨道进行对应操作,设置其相关属性。其中要用到的具体方法可以参见<a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/03_Editing.html#//apple_ref/doc/uid/TP40010188-CH8-SW1">这里</a>。</p>

<p>其中图中1，2，3用到的方法为</p>

<pre><code>[1]
[mutableComposition addMutableTrackWithMediaType:AVMediaTypeVideo preferredTrackID:kCMPersistentTrackID_Invalid]
[2]
[AVMutableAudioMixInputParameters audioMixInputParametersWithTrack:mutableCompositionAudioTrack];`
[3]
[AVMutableVideoCompositionLayerInstruction videoCompositionLayerInstructionWithAssetTrack:mutableCompositionVideoTrack]
</code></pre>

<p>关于视频的剪辑的代码可以参见苹果给出的官方<a href="https://developer.apple.com/library/ios/samplecode/AVSimpleEditoriOS/Introduction/Intro.html#//apple_ref/doc/uid/DTS40012797">Demo</a>以及Raywendrich上的两篇文章<a href="http://www.raywenderlich.com/13418/how-to-play-record-edit-videos-in-ios">1</a>,<a href="http://www.raywenderlich.com/30200/avfoundation-tutorial-adding-overlays-and-animations-to-videos">2</a>。</p>

<h3>GPUImage</h3>

<p>什么?!你没听说过GPUImage?!那你赶紧去看看它的<a href="https://github.com/BradLarson/GPUImage/blob/master/README.md#overview">相关介绍</a>。GPUImage是一个基于OpenGL ES的一个强大的图像/视频处理库,封装好了各种滤镜同时也可以编写自定义的滤镜。至于他到底是如何强大,用了就知道。在这篇文章不是为了介绍它，而是列出一些我在使用过程中遇到的问题和解决方法。</p>

<h4>分段录制</h4>

<p>在使用GPUImageVideoCamera来录制的时候,可能需要分段录制,在GPUImage给出的视频录制Demo中直接只是录制一次，然而有时候需求可能是要录制多次，如果此时按照Demo的方法每次录制都要创建一个movieWriter,这样子的话每次都会在重新创建movieWriter并将它设置为videoCamera的audioEncodingTarget时候，界面都会卡顿一下，这是什么原因呢？因为videoCamera默认是不录制声音的，而每次创建movieWriter的时候都用到了movieWriter.hasAudioTrack = YES;,吊用这个之后videoCamera会自动去添加声音输入源,准备一些数据，所以这个过程会导致界面卡顿一下？这该怎么办呢？如果你有进到videoCamera的头文件去看的话你会发现这么一个方法和它的注释</p>

<pre><code>//Add audio capture to the session. Adding inputs and outputs freezes 
//the capture session momentarily, so you can use this method to add 
//the audio inputs and outputs early, if you’re going to set the 
//audioEncodingTarget later. Returns YES is the audio inputs and 
//outputs were added, or NO if they had already been added.

-(BOOL)addAudioInputsAndOutputs;
</code></pre>

<p>注释的大意是:录制的时候添加声音,添加输入源和输出源会暂时会使录制暂时卡住,所以在要使用声音的情况下要先调用该方法来防止录制被卡住。这不刚好就解决了上面的这个问题吗？所以问题就迎刃而解了,因为没看到这个,走了不少弯路,浪费了好长时间。</p>

<p>关于分段录制,可能有这么一个需求就是所有片段都是存于一个文件中而不是录制完成后将各段合并到一个视频文件中。这两个东西或许会帮到你<a href="http://blog.csdn.net/whf727/article/details/18702643">分段录制的实现</a>,<a href="https://github.com/leanlyne/GPUImageExtend">GPUImageExtend</a>。前者是基于系统的分段录制的实现,后者是GPUImageMoiveWriter的一个子类。</p>

<h4>所见即所得</h4>

<p>在录制的时候,使用GPUImageView来显示,因为给GPUImageView设置的大小是320*320的,如果不设置它的填充模式(fillMode)它是默认使用kGPUImageFillModePreserveAspectRatio即保持长宽比,其余空白处使用背景色填充,如果要设置成方形就得使用kGPUImageFillModePreserveAspectRatioAndFill,但是这个时候问题又来了假设你是用的录制分辨率是960x540,显示的画面则只会显示中间的540x540的画面,这个时候如果movieWriter的size设置为540x540,则最后保存的视频是失真的因为960被压到了540，整个画面变扁了。这个时候有两种解决方案</p>

<ul>
<li>1.使用GPUImageCropFilter,通过设置其cropRegion来裁出中间540x540部分。关于cropRegion要注意它是一个CGRect,它对坐标系做了一个归一化处理,所以让所有的取值都在0.0~1.0范围内,比如960x540裁剪至中间540x540部分则cropRegion为(0,((960-540)/2)/960,1,540/960)</li>
<li>2.改变videoComposition的perferTransfom使其只显示中间的540x540。
这样就完成了所见即所得。</li>
</ul>


<p>关于GPUImage的实时滤镜添加或给已存在的视频添加滤镜,Demo都给出了详细过程,依葫芦画瓢即可。有一点要注意的是,在一些操作完成的时候注意removeTarget,还有就是在使用movieFile来播放已存在视频并添加滤镜的时候是没有声音的,这是这个库的一个缺陷,Github上有人提了这个<a href="https://github.com/BradLarson/GPUImage/issues/458">issue</a>和<a href="https://gist.github.com/pgodino/3819907">一些解决办法</a>。同时在用movieFile处理视频的时候在切换滤镜的时候最好先cancelProcessing不然会有黑屏或卡顿现象出现。同样如果你是用老版本的GPUImage的时候,可能会遇到第一帧是红色的现象,有人提出这个issue后,作者修复了这个bug,切换到最新版的时候就不会有这种情况发生。发生这种情况的原因是视频掉帧,导致音频和视频不同步。</p>

<h3>总结</h3>

<p>AVFoundation还是有很多东西去做深层次的挖掘,GPUImage也是一样,有了这个强大的库,解决一些事情节省了大量时间。这次仅仅是一个小小的尝试,对于很多东西都是浅尝则止,文中难免会有错误,欢迎在评论中指正。如果你在使用GPUImage和AVFoundation有什么好的心得或者对一些问题有相应的解决方案,不妨在评论中分享一下。</p>

<hr />

<p>版权声明：我已将本文在微信公众平台的发表权「独家代理」给 iOS开发（ iOSDevTip ） 微信公众号。扫下方二维码即可关注「iOS 开发」：</p>

<p><img src="http://images.90159.com/icon/iOSDevTip.jpg" alt="iOSDevTip" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS/Android开发社交SDK列表]]></title>
    <link href="http://www.superqq.com/blog/2015/08/23/ios-android-social-sdk/"/>
    <updated>2015-08-23T11:48:48+08:00</updated>
    <id>http://www.superqq.com/blog/2015/08/23/ios-android-social-sdk</id>
    <content type="html"><![CDATA[<h3>友盟社会化分享</h3>

<p><a href="http://www.umeng.com/social"target="_blank"title="进入官网">进入官网</a></p>

<p>友盟社会化分享组件，可以让移动应用快速具备社会化分享、登录、评论、喜欢等功能，并提供实时、全面的社会化数据统计分析服务。指南将会手把手教你使用社会化组件SDK，用5分钟为APP增加新浪微博、腾讯微博、人人网分享功能。</p>

<h2></br></h2>

<h3>ShareSDK</h3>

<p><a href="www.mob.com"target="_blank"title="进入官网">进入官网</a></p>

<p>ShareSDK是为iOS、Android的App提供社会化功能的一个组件，开发者仅需10分钟即可集成到自己的App中，它不仅支持国内外40多家的主流社交平台，帮助开发者轻松实现社会化分享、登录、关注、获得用户资料、获取好友列表等主流的社会化功能，还有强大的社会化统计分析管理后台，可以实时了解用户、信息流、回流率、传播效率等数据，有效地指导移动App的日常运营与推广，同时为App引入更多的社会化流量</p>

<h2></br></h2>

<h3>百度社会化分享</h3>

<p><a href="http://developer.baidu.com/soc/share"target="_blank"title="进入官网">进入官网</a></p>

<p>百度社会化分享组件集成多种热门社会化媒体平台，开发者可将此组件集成到自己的移动应用中，用户即可方便地对应用中的内容分享到新浪微博、Qzone、腾讯微博、开心网等各大热门社会化媒体平台中。</p>

<!--more-->


<h2></br></h2>

<h3>微信开放平台</h3>

<p><a href="https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN"target="_blank"title="进入官网">进入官网</a></p>

<p>微信是腾讯公司于2011年1月21日推出的一款通过网络快速发送语音短信、视频、图片和文字，支持多人群聊的手机聊天软件。用户可以通过微信与好友进行形式上更加丰富的类似于短信、彩信等方式的联系。微信软件本身完全免费，使用任何功能都不会收取费用，微信时产生的上网流量费由网络运营商收取。</p>

<h2></br></h2>

<h3>新浪微博</h3>

<p><a href="http://open.weibo.com/wiki/%E9%A6%96%E9%A1%B5"target="_blank"title="进入官网">进入官网</a></p>

<p>新浪微博开放平台（Weibo Open Platform）是基于新浪微博海量用户和强大的传播能力，接入第三方合作伙伴服务，向用户提供丰富应用和完善服务的开放平台。将你的服务接入微博平台，有助于推广产品，增加网站/应用的流量、拓展新用户，获得收益。</p>

<h2></br></h2>

<h3>bShare</h3>

<p><a href="http://www.bshare.cn/"target="_blank"title="进入官网">进入官网</a></p>

<p>bShare是中国最专业、最强大的社会化分享服务商，提供能分享到QQ空间、新浪微博、人人网等的分享功能。目前bShare已与130+家合作平台，赢得 150000+家网站 的信任。长期以来，我们专注于在社会化分享领域深耕细作，为千万家网站注入社交功能，导入巨大流量的同时，也提供专业的用户分享数据统计，并致力于打造最专业的社会化分享服务。</p>

<h2></br></h2>

<h3>LeanCloud</h3>

<p><a href="https://cn.avoscloud.com/docs/sns.html"target="_blank"title="进入官网">进入官网</a></p>

<p>LeanCloud 社交分享提供强大的用户管理功能，包括密码加密、邮箱验证等。并且用户通过 LeanCloud 的 SDK，可轻松实现微博、微信等账号绑定和信息分享。</p>

<h2></br></h2>

<p>有<a href="http://www.superqq.com/">刚刚在线</a>整理，转载请注明来源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发征稿启示（打赏归作者所有）]]></title>
    <link href="http://www.superqq.com/blog/2015/08/22/development-ios-reward/"/>
    <updated>2015-08-22T00:45:26+08:00</updated>
    <id>http://www.superqq.com/blog/2015/08/22/development-ios-reward</id>
    <content type="html"><![CDATA[<h2>iOS开发订阅用户突破10000人</h2>

<p>首先，非常感谢您的支持和一路陪伴！经过一年多的发展，iOS开发（iOSDevTip）微信公众号的订阅用户越来越多，已经超过10000人。这是一件好事，也是对iOS开发公众号价值的体现。</p>

<p>这一年多的时间里，我每天都在为寻求一篇好的iOS开发文章而努力。这个过程有快乐也有艰辛。每天做一件事，说起来不难，真要坚持下来，不是那么容易的一件事情。我说这些，并不是要证明自己有多厉害。为了寻求好的文章，我会经常阅读大量的博文，上各大程序员门户网站。有时，会因为发现一篇好的文章而庆幸不已；有时，也会因为找不到文章而心里焦急。</p>

<p>后来，我建立了自己的博客<a href="http://www.superqq.com/">刚刚在线</a>：www.superqq.com 。有时间，我就会写一些技术文章分享在上面。也会把文章同步到iOS开发公众号上。</p>

<p>随着订阅用户的增多，大家对文章内容的需求也越来越高。由于我一个人的力量毕竟有限，可能无法满足所有人的需求。订阅iOS开发的用户不乏一些大牛，所以我想发动大家的力量，一起来为优质的iOS开发文章而努力。</p>

<h2>毕洪博投稿文章情况</h2>

<p>七夕那天，作者毕洪博投稿<a href="http://www.superqq.com/blog/2015/08/21/sina-animation/"> 一句代码添加新浪弹出框动画 </a>得到了不错的反响，我把主数据给大家看看：</p>

<pre><code>图文阅读：1695
原文阅读：19   
转发+收藏：193
文章发布日期：2015-08-20
评论人数：5
赞赏人数：3
赞赏金额：9元
</code></pre>

<p>从阅读量上来看，还是挺不错的。虽然赞赏金额不多吧，但也算是有一点点回报。七夕那天夜里，我找到作者毕洪博给他发了一个红包。哈哈！</p>

<p>如果您是一名iOS开发者，如果您有自己的博客，如果您喜欢分享，那就快行动吧！把您的优秀文章投稿给我，我将会把您的文章推送在iOS开发微信公众号上，分享给更多的iOS开发者。</p>

<!--more-->


<h2>投稿方式</h2>

<pre><code>投稿邮箱：worldligang@163.com
个人微信：chinaligang
投稿格式：markdown格式
博主联盟群：364679270
</code></pre>

<p>因为微信上面不方便阅读代码，但是支持markdown语法转换。所以投稿的时候，最好是markdown格式的。投稿之后，请记得加我的个人微信，以便我将打赏的钱转账给您。如果你有自己的博客，欢迎加入博主联盟群。</p>

<h2>版权申明</h2>

<ul>
<li><p>微信公众号规定打赏必须是原创文章，所以希望您能将你的文章在微信公众平台的发表权「独家代理」iOS开发（ iOSDevTip ） 微信公众号。这样我就可以对您的文章申明原创和开通打赏功能。文章的版权依然归您所有，你可以将文章发布在你的博客、微博上。</p></li>
<li><p>为了证明我得到您的授权，您需要在您的文章底部加上如下申明：</p>

<p>  版权声明：我已将本文在微信公众平台的发表权「独家代理」给 iOS开发（ iOSDevTip ） 微信公众号。扫下方二维码即可关注「iOS 开发」：</p>

<p>  <img src="http://images.90159.com/icon/iOSDevTip.jpg" alt="iOSDevTip" /></p></li>
</ul>


<p>申明markdown格式为：</p>

<pre><code>    版权声明：我已将本文在微信公众平台的发表权「独家代理」给 iOS开发（ iOSDevTip ） 微信公众号。扫下方二维码即可关注「iOS 开发」：

    ![iOSDevTip](http://images.90159.com/icon/iOSDevTip.jpg)    
</code></pre>

<p>如果对投稿有什么疑问，欢迎加我微信：chinaligang，详细了解一下。</p>
]]></content>
  </entry>
  
</feed>
